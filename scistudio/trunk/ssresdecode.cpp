//---------------------------------------------------------------------------
// SCI Studio 3+
// By Brian Provinciano
// www.bripro.com
// (c) 1999-2003 Brian Provinciano
//---------------------------------------------------------------------------
#include "scihdr.h"
#include "scc\scc.h"   
#include "main.h"     
//---------------------------------------------------------------------------
#include "picrender.h"
#include "gfxedits.h"
//---------------------------------------------------------------------------
// Palettes
tPAL palEGA = {
	{16},
	{
    	(TColor) 0x00000000, (TColor) 0x00A00000, (TColor) 0x0000A000,
    	(TColor) 0x00A0A000, (TColor) 0x000000A0, (TColor) 0x00A00080,
    	(TColor) 0x000050A0, (TColor) 0x00A0A0A0, (TColor) 0x00505050,
    	(TColor) 0x00FF5050, (TColor) 0x0050FF00, (TColor) 0x00FFFF50,
    	(TColor) 0x005050FF, (TColor) 0x00FF50FF, (TColor) 0x0050FFFF,
    	(TColor) 0x00FFFFFF
    },
	{
    	(TColor) 0x00000000, (TColor) 0x000000A0, (TColor) 0x0000A000,
    	(TColor) 0x0000A0A0, (TColor) 0x00A00000, (TColor) 0x008000A0,
    	(TColor) 0x00A05000, (TColor) 0x00A0A0A0, (TColor) 0x00505050,
    	(TColor) 0x005050FF, (TColor) 0x0000FF50, (TColor) 0x0050FFFF,
    	(TColor) 0x00FF5050, (TColor) 0x00FF50FF, (TColor) 0x00FFFF50,
    	(TColor) 0x00FFFFFF
    }
};
tPAL palFont = {
	{2},
	{
    	(TColor) 0x00FFFFFF, (TColor) 0x00000000
    },
	{
    	(TColor) 0x00FFFFFF, (TColor) 0x00000000
    }
};
   
tPAL palCursor = {
	{4},
	{
    	(TColor) 0x00000000,  (TColor) 0x00FFFFFF,
    	(TColor) 0x00A0A000,  (TColor) 0x00FFFFFF//0x00DCDCDC
	},
	{
    	(TColor) 0x00000000,  (TColor) 0x00FFFFFF,
    	(TColor) 0x0000A0A0,  (TColor) 0x00FFFFFF//0x00DCDCDC
	}
};

tPAL palCursorVGA = {
	{4},
	{
    	(TColor) 0x00000000,  (TColor) 0x00FFFFFF,
    	(TColor) 0x00A0A000,  (TColor) 0x00DCDCDC
	},
	{
    	(TColor) 0x00000000,  (TColor) 0x00FFFFFF,
    	(TColor) 0x0000A0A0,  (TColor) 0x00DCDCDC
	}
};

U8 picBackCol[sPIC_TOTALBMPS] = {15,0,0,0};

U8 rsBuf[rsMAX_SIZE];
                   
VOCTYPES vocabTypes[] = {
    {0x000, "noword"},          // Actually exists in SCI games, discovered (11/11/00)
    {0x001, "preposition"},
    {0x002, "article"},
    {0x004, "qualifying adjective"},
    {0x008, "relative pronoun"},
    {0x010, "noun"},
    {0x020, "indicative verb"}, // (such as "is", "went" as opposed to _do_ this or that, which is imperative)
    {0x040, "adverb"},
    {0x080, "imperative verb"},
    {0x400, "conjunction"},     // "and", "or", "nor", "if", "but"
    {0x800, "subordination"},   // "until", "while", "with", "without" and "for"
    {0x4FF, "anyword"}
};

U16 defPri[14] = {42, 53, 64, 74, 85, 96, 106, 117, 127, 138, 149, 159, 170, 180};

sciCOL amiga4096[4096] = {
	// added the extra 0x0F for brightness
	{0,0x0F,0x0F,0x0F},{0,0x0F,0x0F,0x1F},{0,0x0F,0x0F,0x2F},{0,0x0F,0x0F,0x3F},
	{0,0x0F,0x0F,0x4F},{0,0x0F,0x0F,0x5F},{0,0x0F,0x0F,0x6F},{0,0x0F,0x0F,0x7F},
	{0,0x0F,0x0F,0x8F},{0,0x0F,0x0F,0x9F},{0,0x0F,0x0F,0xAF},{0,0x0F,0x0F,0xBF},
	{0,0x0F,0x0F,0xCF},{0,0x0F,0x0F,0xDF},{0,0x0F,0x0F,0xEF},{0,0x0F,0x0F,0xFF},
	{0,0x0F,0x1F,0x0F},{0,0x0F,0x1F,0x1F},{0,0x0F,0x1F,0x2F},{0,0x0F,0x1F,0x3F},
	{0,0x0F,0x1F,0x4F},{0,0x0F,0x1F,0x5F},{0,0x0F,0x1F,0x6F},{0,0x0F,0x1F,0x7F},
	{0,0x0F,0x1F,0x8F},{0,0x0F,0x1F,0x9F},{0,0x0F,0x1F,0xAF},{0,0x0F,0x1F,0xBF},
	{0,0x0F,0x1F,0xCF},{0,0x0F,0x1F,0xDF},{0,0x0F,0x1F,0xEF},{0,0x0F,0x1F,0xFF},
	{0,0x0F,0x2F,0x0F},{0,0x0F,0x2F,0x1F},{0,0x0F,0x2F,0x2F},{0,0x0F,0x2F,0x3F},
	{0,0x0F,0x2F,0x4F},{0,0x0F,0x2F,0x5F},{0,0x0F,0x2F,0x6F},{0,0x0F,0x2F,0x7F},
	{0,0x0F,0x2F,0x8F},{0,0x0F,0x2F,0x9F},{0,0x0F,0x2F,0xAF},{0,0x0F,0x2F,0xBF},
	{0,0x0F,0x2F,0xCF},{0,0x0F,0x2F,0xDF},{0,0x0F,0x2F,0xEF},{0,0x0F,0x2F,0xFF},
	{0,0x0F,0x3F,0x0F},{0,0x0F,0x3F,0x1F},{0,0x0F,0x3F,0x2F},{0,0x0F,0x3F,0x3F},
	{0,0x0F,0x3F,0x4F},{0,0x0F,0x3F,0x5F},{0,0x0F,0x3F,0x6F},{0,0x0F,0x3F,0x7F},
	{0,0x0F,0x3F,0x8F},{0,0x0F,0x3F,0x9F},{0,0x0F,0x3F,0xAF},{0,0x0F,0x3F,0xBF},
	{0,0x0F,0x3F,0xCF},{0,0x0F,0x3F,0xDF},{0,0x0F,0x3F,0xEF},{0,0x0F,0x3F,0xFF},
	{0,0x0F,0x4F,0x0F},{0,0x0F,0x4F,0x1F},{0,0x0F,0x4F,0x2F},{0,0x0F,0x4F,0x3F},
	{0,0x0F,0x4F,0x4F},{0,0x0F,0x4F,0x5F},{0,0x0F,0x4F,0x6F},{0,0x0F,0x4F,0x7F},
	{0,0x0F,0x4F,0x8F},{0,0x0F,0x4F,0x9F},{0,0x0F,0x4F,0xAF},{0,0x0F,0x4F,0xBF},
	{0,0x0F,0x4F,0xCF},{0,0x0F,0x4F,0xDF},{0,0x0F,0x4F,0xEF},{0,0x0F,0x4F,0xFF},
	{0,0x0F,0x5F,0x0F},{0,0x0F,0x5F,0x1F},{0,0x0F,0x5F,0x2F},{0,0x0F,0x5F,0x3F},
	{0,0x0F,0x5F,0x4F},{0,0x0F,0x5F,0x5F},{0,0x0F,0x5F,0x6F},{0,0x0F,0x5F,0x7F},
	{0,0x0F,0x5F,0x8F},{0,0x0F,0x5F,0x9F},{0,0x0F,0x5F,0xAF},{0,0x0F,0x5F,0xBF},
	{0,0x0F,0x5F,0xCF},{0,0x0F,0x5F,0xDF},{0,0x0F,0x5F,0xEF},{0,0x0F,0x5F,0xFF},
	{0,0x0F,0x6F,0x0F},{0,0x0F,0x6F,0x1F},{0,0x0F,0x6F,0x2F},{0,0x0F,0x6F,0x3F},
	{0,0x0F,0x6F,0x4F},{0,0x0F,0x6F,0x5F},{0,0x0F,0x6F,0x6F},{0,0x0F,0x6F,0x7F},
	{0,0x0F,0x6F,0x8F},{0,0x0F,0x6F,0x9F},{0,0x0F,0x6F,0xAF},{0,0x0F,0x6F,0xBF},
	{0,0x0F,0x6F,0xCF},{0,0x0F,0x6F,0xDF},{0,0x0F,0x6F,0xEF},{0,0x0F,0x6F,0xFF},
	{0,0x0F,0x7F,0x0F},{0,0x0F,0x7F,0x1F},{0,0x0F,0x7F,0x2F},{0,0x0F,0x7F,0x3F},
	{0,0x0F,0x7F,0x4F},{0,0x0F,0x7F,0x5F},{0,0x0F,0x7F,0x6F},{0,0x0F,0x7F,0x7F},
	{0,0x0F,0x7F,0x8F},{0,0x0F,0x7F,0x9F},{0,0x0F,0x7F,0xAF},{0,0x0F,0x7F,0xBF},
	{0,0x0F,0x7F,0xCF},{0,0x0F,0x7F,0xDF},{0,0x0F,0x7F,0xEF},{0,0x0F,0x7F,0xFF},
	{0,0x0F,0x8F,0x0F},{0,0x0F,0x8F,0x1F},{0,0x0F,0x8F,0x2F},{0,0x0F,0x8F,0x3F},
	{0,0x0F,0x8F,0x4F},{0,0x0F,0x8F,0x5F},{0,0x0F,0x8F,0x6F},{0,0x0F,0x8F,0x7F},
	{0,0x0F,0x8F,0x8F},{0,0x0F,0x8F,0x9F},{0,0x0F,0x8F,0xAF},{0,0x0F,0x8F,0xBF},
	{0,0x0F,0x8F,0xCF},{0,0x0F,0x8F,0xDF},{0,0x0F,0x8F,0xEF},{0,0x0F,0x8F,0xFF},
	{0,0x0F,0x9F,0x0F},{0,0x0F,0x9F,0x1F},{0,0x0F,0x9F,0x2F},{0,0x0F,0x9F,0x3F},
	{0,0x0F,0x9F,0x4F},{0,0x0F,0x9F,0x5F},{0,0x0F,0x9F,0x6F},{0,0x0F,0x9F,0x7F},
	{0,0x0F,0x9F,0x8F},{0,0x0F,0x9F,0x9F},{0,0x0F,0x9F,0xAF},{0,0x0F,0x9F,0xBF},
	{0,0x0F,0x9F,0xCF},{0,0x0F,0x9F,0xDF},{0,0x0F,0x9F,0xEF},{0,0x0F,0x9F,0xFF},
	{0,0x0F,0xAF,0x0F},{0,0x0F,0xAF,0x1F},{0,0x0F,0xAF,0x2F},{0,0x0F,0xAF,0x3F},
	{0,0x0F,0xAF,0x4F},{0,0x0F,0xAF,0x5F},{0,0x0F,0xAF,0x6F},{0,0x0F,0xAF,0x7F},
	{0,0x0F,0xAF,0x8F},{0,0x0F,0xAF,0x9F},{0,0x0F,0xAF,0xAF},{0,0x0F,0xAF,0xBF},
	{0,0x0F,0xAF,0xCF},{0,0x0F,0xAF,0xDF},{0,0x0F,0xAF,0xEF},{0,0x0F,0xAF,0xFF},
	{0,0x0F,0xBF,0x0F},{0,0x0F,0xBF,0x1F},{0,0x0F,0xBF,0x2F},{0,0x0F,0xBF,0x3F},
	{0,0x0F,0xBF,0x4F},{0,0x0F,0xBF,0x5F},{0,0x0F,0xBF,0x6F},{0,0x0F,0xBF,0x7F},
	{0,0x0F,0xBF,0x8F},{0,0x0F,0xBF,0x9F},{0,0x0F,0xBF,0xAF},{0,0x0F,0xBF,0xBF},
	{0,0x0F,0xBF,0xCF},{0,0x0F,0xBF,0xDF},{0,0x0F,0xBF,0xEF},{0,0x0F,0xBF,0xFF},
	{0,0x0F,0xCF,0x0F},{0,0x0F,0xCF,0x1F},{0,0x0F,0xCF,0x2F},{0,0x0F,0xCF,0x3F},
	{0,0x0F,0xCF,0x4F},{0,0x0F,0xCF,0x5F},{0,0x0F,0xCF,0x6F},{0,0x0F,0xCF,0x7F},
	{0,0x0F,0xCF,0x8F},{0,0x0F,0xCF,0x9F},{0,0x0F,0xCF,0xAF},{0,0x0F,0xCF,0xBF},
	{0,0x0F,0xCF,0xCF},{0,0x0F,0xCF,0xDF},{0,0x0F,0xCF,0xEF},{0,0x0F,0xCF,0xFF},
	{0,0x0F,0xDF,0x0F},{0,0x0F,0xDF,0x1F},{0,0x0F,0xDF,0x2F},{0,0x0F,0xDF,0x3F},
	{0,0x0F,0xDF,0x4F},{0,0x0F,0xDF,0x5F},{0,0x0F,0xDF,0x6F},{0,0x0F,0xDF,0x7F},
	{0,0x0F,0xDF,0x8F},{0,0x0F,0xDF,0x9F},{0,0x0F,0xDF,0xAF},{0,0x0F,0xDF,0xBF},
	{0,0x0F,0xDF,0xCF},{0,0x0F,0xDF,0xDF},{0,0x0F,0xDF,0xEF},{0,0x0F,0xDF,0xFF},
	{0,0x0F,0xEF,0x0F},{0,0x0F,0xEF,0x1F},{0,0x0F,0xEF,0x2F},{0,0x0F,0xEF,0x3F},
	{0,0x0F,0xEF,0x4F},{0,0x0F,0xEF,0x5F},{0,0x0F,0xEF,0x6F},{0,0x0F,0xEF,0x7F},
	{0,0x0F,0xEF,0x8F},{0,0x0F,0xEF,0x9F},{0,0x0F,0xEF,0xAF},{0,0x0F,0xEF,0xBF},
	{0,0x0F,0xEF,0xCF},{0,0x0F,0xEF,0xDF},{0,0x0F,0xEF,0xEF},{0,0x0F,0xEF,0xFF},
	{0,0x0F,0xFF,0x0F},{0,0x0F,0xFF,0x1F},{0,0x0F,0xFF,0x2F},{0,0x0F,0xFF,0x3F},
	{0,0x0F,0xFF,0x4F},{0,0x0F,0xFF,0x5F},{0,0x0F,0xFF,0x6F},{0,0x0F,0xFF,0x7F},
	{0,0x0F,0xFF,0x8F},{0,0x0F,0xFF,0x9F},{0,0x0F,0xFF,0xAF},{0,0x0F,0xFF,0xBF},
	{0,0x0F,0xFF,0xCF},{0,0x0F,0xFF,0xDF},{0,0x0F,0xFF,0xEF},{0,0x0F,0xFF,0xFF},
	{0,0x1F,0x0F,0x0F},{0,0x1F,0x0F,0x1F},{0,0x1F,0x0F,0x2F},{0,0x1F,0x0F,0x3F},
	{0,0x1F,0x0F,0x4F},{0,0x1F,0x0F,0x5F},{0,0x1F,0x0F,0x6F},{0,0x1F,0x0F,0x7F},
	{0,0x1F,0x0F,0x8F},{0,0x1F,0x0F,0x9F},{0,0x1F,0x0F,0xAF},{0,0x1F,0x0F,0xBF},
	{0,0x1F,0x0F,0xCF},{0,0x1F,0x0F,0xDF},{0,0x1F,0x0F,0xEF},{0,0x1F,0x0F,0xFF},
	{0,0x1F,0x1F,0x0F},{0,0x1F,0x1F,0x1F},{0,0x1F,0x1F,0x2F},{0,0x1F,0x1F,0x3F},
	{0,0x1F,0x1F,0x4F},{0,0x1F,0x1F,0x5F},{0,0x1F,0x1F,0x6F},{0,0x1F,0x1F,0x7F},
	{0,0x1F,0x1F,0x8F},{0,0x1F,0x1F,0x9F},{0,0x1F,0x1F,0xAF},{0,0x1F,0x1F,0xBF},
	{0,0x1F,0x1F,0xCF},{0,0x1F,0x1F,0xDF},{0,0x1F,0x1F,0xEF},{0,0x1F,0x1F,0xFF},
	{0,0x1F,0x2F,0x0F},{0,0x1F,0x2F,0x1F},{0,0x1F,0x2F,0x2F},{0,0x1F,0x2F,0x3F},
	{0,0x1F,0x2F,0x4F},{0,0x1F,0x2F,0x5F},{0,0x1F,0x2F,0x6F},{0,0x1F,0x2F,0x7F},
	{0,0x1F,0x2F,0x8F},{0,0x1F,0x2F,0x9F},{0,0x1F,0x2F,0xAF},{0,0x1F,0x2F,0xBF},
	{0,0x1F,0x2F,0xCF},{0,0x1F,0x2F,0xDF},{0,0x1F,0x2F,0xEF},{0,0x1F,0x2F,0xFF},
	{0,0x1F,0x3F,0x0F},{0,0x1F,0x3F,0x1F},{0,0x1F,0x3F,0x2F},{0,0x1F,0x3F,0x3F},
	{0,0x1F,0x3F,0x4F},{0,0x1F,0x3F,0x5F},{0,0x1F,0x3F,0x6F},{0,0x1F,0x3F,0x7F},
	{0,0x1F,0x3F,0x8F},{0,0x1F,0x3F,0x9F},{0,0x1F,0x3F,0xAF},{0,0x1F,0x3F,0xBF},
	{0,0x1F,0x3F,0xCF},{0,0x1F,0x3F,0xDF},{0,0x1F,0x3F,0xEF},{0,0x1F,0x3F,0xFF},
	{0,0x1F,0x4F,0x0F},{0,0x1F,0x4F,0x1F},{0,0x1F,0x4F,0x2F},{0,0x1F,0x4F,0x3F},
	{0,0x1F,0x4F,0x4F},{0,0x1F,0x4F,0x5F},{0,0x1F,0x4F,0x6F},{0,0x1F,0x4F,0x7F},
	{0,0x1F,0x4F,0x8F},{0,0x1F,0x4F,0x9F},{0,0x1F,0x4F,0xAF},{0,0x1F,0x4F,0xBF},
	{0,0x1F,0x4F,0xCF},{0,0x1F,0x4F,0xDF},{0,0x1F,0x4F,0xEF},{0,0x1F,0x4F,0xFF},
	{0,0x1F,0x5F,0x0F},{0,0x1F,0x5F,0x1F},{0,0x1F,0x5F,0x2F},{0,0x1F,0x5F,0x3F},
	{0,0x1F,0x5F,0x4F},{0,0x1F,0x5F,0x5F},{0,0x1F,0x5F,0x6F},{0,0x1F,0x5F,0x7F},
	{0,0x1F,0x5F,0x8F},{0,0x1F,0x5F,0x9F},{0,0x1F,0x5F,0xAF},{0,0x1F,0x5F,0xBF},
	{0,0x1F,0x5F,0xCF},{0,0x1F,0x5F,0xDF},{0,0x1F,0x5F,0xEF},{0,0x1F,0x5F,0xFF},
	{0,0x1F,0x6F,0x0F},{0,0x1F,0x6F,0x1F},{0,0x1F,0x6F,0x2F},{0,0x1F,0x6F,0x3F},
	{0,0x1F,0x6F,0x4F},{0,0x1F,0x6F,0x5F},{0,0x1F,0x6F,0x6F},{0,0x1F,0x6F,0x7F},
	{0,0x1F,0x6F,0x8F},{0,0x1F,0x6F,0x9F},{0,0x1F,0x6F,0xAF},{0,0x1F,0x6F,0xBF},
	{0,0x1F,0x6F,0xCF},{0,0x1F,0x6F,0xDF},{0,0x1F,0x6F,0xEF},{0,0x1F,0x6F,0xFF},
	{0,0x1F,0x7F,0x0F},{0,0x1F,0x7F,0x1F},{0,0x1F,0x7F,0x2F},{0,0x1F,0x7F,0x3F},
	{0,0x1F,0x7F,0x4F},{0,0x1F,0x7F,0x5F},{0,0x1F,0x7F,0x6F},{0,0x1F,0x7F,0x7F},
	{0,0x1F,0x7F,0x8F},{0,0x1F,0x7F,0x9F},{0,0x1F,0x7F,0xAF},{0,0x1F,0x7F,0xBF},
	{0,0x1F,0x7F,0xCF},{0,0x1F,0x7F,0xDF},{0,0x1F,0x7F,0xEF},{0,0x1F,0x7F,0xFF},
	{0,0x1F,0x8F,0x0F},{0,0x1F,0x8F,0x1F},{0,0x1F,0x8F,0x2F},{0,0x1F,0x8F,0x3F},
	{0,0x1F,0x8F,0x4F},{0,0x1F,0x8F,0x5F},{0,0x1F,0x8F,0x6F},{0,0x1F,0x8F,0x7F},
	{0,0x1F,0x8F,0x8F},{0,0x1F,0x8F,0x9F},{0,0x1F,0x8F,0xAF},{0,0x1F,0x8F,0xBF},
	{0,0x1F,0x8F,0xCF},{0,0x1F,0x8F,0xDF},{0,0x1F,0x8F,0xEF},{0,0x1F,0x8F,0xFF},
	{0,0x1F,0x9F,0x0F},{0,0x1F,0x9F,0x1F},{0,0x1F,0x9F,0x2F},{0,0x1F,0x9F,0x3F},
	{0,0x1F,0x9F,0x4F},{0,0x1F,0x9F,0x5F},{0,0x1F,0x9F,0x6F},{0,0x1F,0x9F,0x7F},
	{0,0x1F,0x9F,0x8F},{0,0x1F,0x9F,0x9F},{0,0x1F,0x9F,0xAF},{0,0x1F,0x9F,0xBF},
	{0,0x1F,0x9F,0xCF},{0,0x1F,0x9F,0xDF},{0,0x1F,0x9F,0xEF},{0,0x1F,0x9F,0xFF},
	{0,0x1F,0xAF,0x0F},{0,0x1F,0xAF,0x1F},{0,0x1F,0xAF,0x2F},{0,0x1F,0xAF,0x3F},
	{0,0x1F,0xAF,0x4F},{0,0x1F,0xAF,0x5F},{0,0x1F,0xAF,0x6F},{0,0x1F,0xAF,0x7F},
	{0,0x1F,0xAF,0x8F},{0,0x1F,0xAF,0x9F},{0,0x1F,0xAF,0xAF},{0,0x1F,0xAF,0xBF},
	{0,0x1F,0xAF,0xCF},{0,0x1F,0xAF,0xDF},{0,0x1F,0xAF,0xEF},{0,0x1F,0xAF,0xFF},
	{0,0x1F,0xBF,0x0F},{0,0x1F,0xBF,0x1F},{0,0x1F,0xBF,0x2F},{0,0x1F,0xBF,0x3F},
	{0,0x1F,0xBF,0x4F},{0,0x1F,0xBF,0x5F},{0,0x1F,0xBF,0x6F},{0,0x1F,0xBF,0x7F},
	{0,0x1F,0xBF,0x8F},{0,0x1F,0xBF,0x9F},{0,0x1F,0xBF,0xAF},{0,0x1F,0xBF,0xBF},
	{0,0x1F,0xBF,0xCF},{0,0x1F,0xBF,0xDF},{0,0x1F,0xBF,0xEF},{0,0x1F,0xBF,0xFF},
	{0,0x1F,0xCF,0x0F},{0,0x1F,0xCF,0x1F},{0,0x1F,0xCF,0x2F},{0,0x1F,0xCF,0x3F},
	{0,0x1F,0xCF,0x4F},{0,0x1F,0xCF,0x5F},{0,0x1F,0xCF,0x6F},{0,0x1F,0xCF,0x7F},
	{0,0x1F,0xCF,0x8F},{0,0x1F,0xCF,0x9F},{0,0x1F,0xCF,0xAF},{0,0x1F,0xCF,0xBF},
	{0,0x1F,0xCF,0xCF},{0,0x1F,0xCF,0xDF},{0,0x1F,0xCF,0xEF},{0,0x1F,0xCF,0xFF},
	{0,0x1F,0xDF,0x0F},{0,0x1F,0xDF,0x1F},{0,0x1F,0xDF,0x2F},{0,0x1F,0xDF,0x3F},
	{0,0x1F,0xDF,0x4F},{0,0x1F,0xDF,0x5F},{0,0x1F,0xDF,0x6F},{0,0x1F,0xDF,0x7F},
	{0,0x1F,0xDF,0x8F},{0,0x1F,0xDF,0x9F},{0,0x1F,0xDF,0xAF},{0,0x1F,0xDF,0xBF},
	{0,0x1F,0xDF,0xCF},{0,0x1F,0xDF,0xDF},{0,0x1F,0xDF,0xEF},{0,0x1F,0xDF,0xFF},
	{0,0x1F,0xEF,0x0F},{0,0x1F,0xEF,0x1F},{0,0x1F,0xEF,0x2F},{0,0x1F,0xEF,0x3F},
	{0,0x1F,0xEF,0x4F},{0,0x1F,0xEF,0x5F},{0,0x1F,0xEF,0x6F},{0,0x1F,0xEF,0x7F},
	{0,0x1F,0xEF,0x8F},{0,0x1F,0xEF,0x9F},{0,0x1F,0xEF,0xAF},{0,0x1F,0xEF,0xBF},
	{0,0x1F,0xEF,0xCF},{0,0x1F,0xEF,0xDF},{0,0x1F,0xEF,0xEF},{0,0x1F,0xEF,0xFF},
	{0,0x1F,0xFF,0x0F},{0,0x1F,0xFF,0x1F},{0,0x1F,0xFF,0x2F},{0,0x1F,0xFF,0x3F},
	{0,0x1F,0xFF,0x4F},{0,0x1F,0xFF,0x5F},{0,0x1F,0xFF,0x6F},{0,0x1F,0xFF,0x7F},
	{0,0x1F,0xFF,0x8F},{0,0x1F,0xFF,0x9F},{0,0x1F,0xFF,0xAF},{0,0x1F,0xFF,0xBF},
	{0,0x1F,0xFF,0xCF},{0,0x1F,0xFF,0xDF},{0,0x1F,0xFF,0xEF},{0,0x1F,0xFF,0xFF},
	{0,0x2F,0x0F,0x0F},{0,0x2F,0x0F,0x1F},{0,0x2F,0x0F,0x2F},{0,0x2F,0x0F,0x3F},
	{0,0x2F,0x0F,0x4F},{0,0x2F,0x0F,0x5F},{0,0x2F,0x0F,0x6F},{0,0x2F,0x0F,0x7F},
	{0,0x2F,0x0F,0x8F},{0,0x2F,0x0F,0x9F},{0,0x2F,0x0F,0xAF},{0,0x2F,0x0F,0xBF},
	{0,0x2F,0x0F,0xCF},{0,0x2F,0x0F,0xDF},{0,0x2F,0x0F,0xEF},{0,0x2F,0x0F,0xFF},
	{0,0x2F,0x1F,0x0F},{0,0x2F,0x1F,0x1F},{0,0x2F,0x1F,0x2F},{0,0x2F,0x1F,0x3F},
	{0,0x2F,0x1F,0x4F},{0,0x2F,0x1F,0x5F},{0,0x2F,0x1F,0x6F},{0,0x2F,0x1F,0x7F},
	{0,0x2F,0x1F,0x8F},{0,0x2F,0x1F,0x9F},{0,0x2F,0x1F,0xAF},{0,0x2F,0x1F,0xBF},
	{0,0x2F,0x1F,0xCF},{0,0x2F,0x1F,0xDF},{0,0x2F,0x1F,0xEF},{0,0x2F,0x1F,0xFF},
	{0,0x2F,0x2F,0x0F},{0,0x2F,0x2F,0x1F},{0,0x2F,0x2F,0x2F},{0,0x2F,0x2F,0x3F},
	{0,0x2F,0x2F,0x4F},{0,0x2F,0x2F,0x5F},{0,0x2F,0x2F,0x6F},{0,0x2F,0x2F,0x7F},
	{0,0x2F,0x2F,0x8F},{0,0x2F,0x2F,0x9F},{0,0x2F,0x2F,0xAF},{0,0x2F,0x2F,0xBF},
	{0,0x2F,0x2F,0xCF},{0,0x2F,0x2F,0xDF},{0,0x2F,0x2F,0xEF},{0,0x2F,0x2F,0xFF},
	{0,0x2F,0x3F,0x0F},{0,0x2F,0x3F,0x1F},{0,0x2F,0x3F,0x2F},{0,0x2F,0x3F,0x3F},
	{0,0x2F,0x3F,0x4F},{0,0x2F,0x3F,0x5F},{0,0x2F,0x3F,0x6F},{0,0x2F,0x3F,0x7F},
	{0,0x2F,0x3F,0x8F},{0,0x2F,0x3F,0x9F},{0,0x2F,0x3F,0xAF},{0,0x2F,0x3F,0xBF},
	{0,0x2F,0x3F,0xCF},{0,0x2F,0x3F,0xDF},{0,0x2F,0x3F,0xEF},{0,0x2F,0x3F,0xFF},
	{0,0x2F,0x4F,0x0F},{0,0x2F,0x4F,0x1F},{0,0x2F,0x4F,0x2F},{0,0x2F,0x4F,0x3F},
	{0,0x2F,0x4F,0x4F},{0,0x2F,0x4F,0x5F},{0,0x2F,0x4F,0x6F},{0,0x2F,0x4F,0x7F},
	{0,0x2F,0x4F,0x8F},{0,0x2F,0x4F,0x9F},{0,0x2F,0x4F,0xAF},{0,0x2F,0x4F,0xBF},
	{0,0x2F,0x4F,0xCF},{0,0x2F,0x4F,0xDF},{0,0x2F,0x4F,0xEF},{0,0x2F,0x4F,0xFF},
	{0,0x2F,0x5F,0x0F},{0,0x2F,0x5F,0x1F},{0,0x2F,0x5F,0x2F},{0,0x2F,0x5F,0x3F},
	{0,0x2F,0x5F,0x4F},{0,0x2F,0x5F,0x5F},{0,0x2F,0x5F,0x6F},{0,0x2F,0x5F,0x7F},
	{0,0x2F,0x5F,0x8F},{0,0x2F,0x5F,0x9F},{0,0x2F,0x5F,0xAF},{0,0x2F,0x5F,0xBF},
	{0,0x2F,0x5F,0xCF},{0,0x2F,0x5F,0xDF},{0,0x2F,0x5F,0xEF},{0,0x2F,0x5F,0xFF},
	{0,0x2F,0x6F,0x0F},{0,0x2F,0x6F,0x1F},{0,0x2F,0x6F,0x2F},{0,0x2F,0x6F,0x3F},
	{0,0x2F,0x6F,0x4F},{0,0x2F,0x6F,0x5F},{0,0x2F,0x6F,0x6F},{0,0x2F,0x6F,0x7F},
	{0,0x2F,0x6F,0x8F},{0,0x2F,0x6F,0x9F},{0,0x2F,0x6F,0xAF},{0,0x2F,0x6F,0xBF},
	{0,0x2F,0x6F,0xCF},{0,0x2F,0x6F,0xDF},{0,0x2F,0x6F,0xEF},{0,0x2F,0x6F,0xFF},
	{0,0x2F,0x7F,0x0F},{0,0x2F,0x7F,0x1F},{0,0x2F,0x7F,0x2F},{0,0x2F,0x7F,0x3F},
	{0,0x2F,0x7F,0x4F},{0,0x2F,0x7F,0x5F},{0,0x2F,0x7F,0x6F},{0,0x2F,0x7F,0x7F},
	{0,0x2F,0x7F,0x8F},{0,0x2F,0x7F,0x9F},{0,0x2F,0x7F,0xAF},{0,0x2F,0x7F,0xBF},
	{0,0x2F,0x7F,0xCF},{0,0x2F,0x7F,0xDF},{0,0x2F,0x7F,0xEF},{0,0x2F,0x7F,0xFF},
	{0,0x2F,0x8F,0x0F},{0,0x2F,0x8F,0x1F},{0,0x2F,0x8F,0x2F},{0,0x2F,0x8F,0x3F},
	{0,0x2F,0x8F,0x4F},{0,0x2F,0x8F,0x5F},{0,0x2F,0x8F,0x6F},{0,0x2F,0x8F,0x7F},
	{0,0x2F,0x8F,0x8F},{0,0x2F,0x8F,0x9F},{0,0x2F,0x8F,0xAF},{0,0x2F,0x8F,0xBF},
	{0,0x2F,0x8F,0xCF},{0,0x2F,0x8F,0xDF},{0,0x2F,0x8F,0xEF},{0,0x2F,0x8F,0xFF},
	{0,0x2F,0x9F,0x0F},{0,0x2F,0x9F,0x1F},{0,0x2F,0x9F,0x2F},{0,0x2F,0x9F,0x3F},
	{0,0x2F,0x9F,0x4F},{0,0x2F,0x9F,0x5F},{0,0x2F,0x9F,0x6F},{0,0x2F,0x9F,0x7F},
	{0,0x2F,0x9F,0x8F},{0,0x2F,0x9F,0x9F},{0,0x2F,0x9F,0xAF},{0,0x2F,0x9F,0xBF},
	{0,0x2F,0x9F,0xCF},{0,0x2F,0x9F,0xDF},{0,0x2F,0x9F,0xEF},{0,0x2F,0x9F,0xFF},
	{0,0x2F,0xAF,0x0F},{0,0x2F,0xAF,0x1F},{0,0x2F,0xAF,0x2F},{0,0x2F,0xAF,0x3F},
	{0,0x2F,0xAF,0x4F},{0,0x2F,0xAF,0x5F},{0,0x2F,0xAF,0x6F},{0,0x2F,0xAF,0x7F},
	{0,0x2F,0xAF,0x8F},{0,0x2F,0xAF,0x9F},{0,0x2F,0xAF,0xAF},{0,0x2F,0xAF,0xBF},
	{0,0x2F,0xAF,0xCF},{0,0x2F,0xAF,0xDF},{0,0x2F,0xAF,0xEF},{0,0x2F,0xAF,0xFF},
	{0,0x2F,0xBF,0x0F},{0,0x2F,0xBF,0x1F},{0,0x2F,0xBF,0x2F},{0,0x2F,0xBF,0x3F},
	{0,0x2F,0xBF,0x4F},{0,0x2F,0xBF,0x5F},{0,0x2F,0xBF,0x6F},{0,0x2F,0xBF,0x7F},
	{0,0x2F,0xBF,0x8F},{0,0x2F,0xBF,0x9F},{0,0x2F,0xBF,0xAF},{0,0x2F,0xBF,0xBF},
	{0,0x2F,0xBF,0xCF},{0,0x2F,0xBF,0xDF},{0,0x2F,0xBF,0xEF},{0,0x2F,0xBF,0xFF},
	{0,0x2F,0xCF,0x0F},{0,0x2F,0xCF,0x1F},{0,0x2F,0xCF,0x2F},{0,0x2F,0xCF,0x3F},
	{0,0x2F,0xCF,0x4F},{0,0x2F,0xCF,0x5F},{0,0x2F,0xCF,0x6F},{0,0x2F,0xCF,0x7F},
	{0,0x2F,0xCF,0x8F},{0,0x2F,0xCF,0x9F},{0,0x2F,0xCF,0xAF},{0,0x2F,0xCF,0xBF},
	{0,0x2F,0xCF,0xCF},{0,0x2F,0xCF,0xDF},{0,0x2F,0xCF,0xEF},{0,0x2F,0xCF,0xFF},
	{0,0x2F,0xDF,0x0F},{0,0x2F,0xDF,0x1F},{0,0x2F,0xDF,0x2F},{0,0x2F,0xDF,0x3F},
	{0,0x2F,0xDF,0x4F},{0,0x2F,0xDF,0x5F},{0,0x2F,0xDF,0x6F},{0,0x2F,0xDF,0x7F},
	{0,0x2F,0xDF,0x8F},{0,0x2F,0xDF,0x9F},{0,0x2F,0xDF,0xAF},{0,0x2F,0xDF,0xBF},
	{0,0x2F,0xDF,0xCF},{0,0x2F,0xDF,0xDF},{0,0x2F,0xDF,0xEF},{0,0x2F,0xDF,0xFF},
	{0,0x2F,0xEF,0x0F},{0,0x2F,0xEF,0x1F},{0,0x2F,0xEF,0x2F},{0,0x2F,0xEF,0x3F},
	{0,0x2F,0xEF,0x4F},{0,0x2F,0xEF,0x5F},{0,0x2F,0xEF,0x6F},{0,0x2F,0xEF,0x7F},
	{0,0x2F,0xEF,0x8F},{0,0x2F,0xEF,0x9F},{0,0x2F,0xEF,0xAF},{0,0x2F,0xEF,0xBF},
	{0,0x2F,0xEF,0xCF},{0,0x2F,0xEF,0xDF},{0,0x2F,0xEF,0xEF},{0,0x2F,0xEF,0xFF},
	{0,0x2F,0xFF,0x0F},{0,0x2F,0xFF,0x1F},{0,0x2F,0xFF,0x2F},{0,0x2F,0xFF,0x3F},
	{0,0x2F,0xFF,0x4F},{0,0x2F,0xFF,0x5F},{0,0x2F,0xFF,0x6F},{0,0x2F,0xFF,0x7F},
	{0,0x2F,0xFF,0x8F},{0,0x2F,0xFF,0x9F},{0,0x2F,0xFF,0xAF},{0,0x2F,0xFF,0xBF},
	{0,0x2F,0xFF,0xCF},{0,0x2F,0xFF,0xDF},{0,0x2F,0xFF,0xEF},{0,0x2F,0xFF,0xFF},
	{0,0x3F,0x0F,0x0F},{0,0x3F,0x0F,0x1F},{0,0x3F,0x0F,0x2F},{0,0x3F,0x0F,0x3F},
	{0,0x3F,0x0F,0x4F},{0,0x3F,0x0F,0x5F},{0,0x3F,0x0F,0x6F},{0,0x3F,0x0F,0x7F},
	{0,0x3F,0x0F,0x8F},{0,0x3F,0x0F,0x9F},{0,0x3F,0x0F,0xAF},{0,0x3F,0x0F,0xBF},
	{0,0x3F,0x0F,0xCF},{0,0x3F,0x0F,0xDF},{0,0x3F,0x0F,0xEF},{0,0x3F,0x0F,0xFF},
	{0,0x3F,0x1F,0x0F},{0,0x3F,0x1F,0x1F},{0,0x3F,0x1F,0x2F},{0,0x3F,0x1F,0x3F},
	{0,0x3F,0x1F,0x4F},{0,0x3F,0x1F,0x5F},{0,0x3F,0x1F,0x6F},{0,0x3F,0x1F,0x7F},
	{0,0x3F,0x1F,0x8F},{0,0x3F,0x1F,0x9F},{0,0x3F,0x1F,0xAF},{0,0x3F,0x1F,0xBF},
	{0,0x3F,0x1F,0xCF},{0,0x3F,0x1F,0xDF},{0,0x3F,0x1F,0xEF},{0,0x3F,0x1F,0xFF},
	{0,0x3F,0x2F,0x0F},{0,0x3F,0x2F,0x1F},{0,0x3F,0x2F,0x2F},{0,0x3F,0x2F,0x3F},
	{0,0x3F,0x2F,0x4F},{0,0x3F,0x2F,0x5F},{0,0x3F,0x2F,0x6F},{0,0x3F,0x2F,0x7F},
	{0,0x3F,0x2F,0x8F},{0,0x3F,0x2F,0x9F},{0,0x3F,0x2F,0xAF},{0,0x3F,0x2F,0xBF},
	{0,0x3F,0x2F,0xCF},{0,0x3F,0x2F,0xDF},{0,0x3F,0x2F,0xEF},{0,0x3F,0x2F,0xFF},
	{0,0x3F,0x3F,0x0F},{0,0x3F,0x3F,0x1F},{0,0x3F,0x3F,0x2F},{0,0x3F,0x3F,0x3F},
	{0,0x3F,0x3F,0x4F},{0,0x3F,0x3F,0x5F},{0,0x3F,0x3F,0x6F},{0,0x3F,0x3F,0x7F},
	{0,0x3F,0x3F,0x8F},{0,0x3F,0x3F,0x9F},{0,0x3F,0x3F,0xAF},{0,0x3F,0x3F,0xBF},
	{0,0x3F,0x3F,0xCF},{0,0x3F,0x3F,0xDF},{0,0x3F,0x3F,0xEF},{0,0x3F,0x3F,0xFF},
	{0,0x3F,0x4F,0x0F},{0,0x3F,0x4F,0x1F},{0,0x3F,0x4F,0x2F},{0,0x3F,0x4F,0x3F},
	{0,0x3F,0x4F,0x4F},{0,0x3F,0x4F,0x5F},{0,0x3F,0x4F,0x6F},{0,0x3F,0x4F,0x7F},
	{0,0x3F,0x4F,0x8F},{0,0x3F,0x4F,0x9F},{0,0x3F,0x4F,0xAF},{0,0x3F,0x4F,0xBF},
	{0,0x3F,0x4F,0xCF},{0,0x3F,0x4F,0xDF},{0,0x3F,0x4F,0xEF},{0,0x3F,0x4F,0xFF},
	{0,0x3F,0x5F,0x0F},{0,0x3F,0x5F,0x1F},{0,0x3F,0x5F,0x2F},{0,0x3F,0x5F,0x3F},
	{0,0x3F,0x5F,0x4F},{0,0x3F,0x5F,0x5F},{0,0x3F,0x5F,0x6F},{0,0x3F,0x5F,0x7F},
	{0,0x3F,0x5F,0x8F},{0,0x3F,0x5F,0x9F},{0,0x3F,0x5F,0xAF},{0,0x3F,0x5F,0xBF},
	{0,0x3F,0x5F,0xCF},{0,0x3F,0x5F,0xDF},{0,0x3F,0x5F,0xEF},{0,0x3F,0x5F,0xFF},
	{0,0x3F,0x6F,0x0F},{0,0x3F,0x6F,0x1F},{0,0x3F,0x6F,0x2F},{0,0x3F,0x6F,0x3F},
	{0,0x3F,0x6F,0x4F},{0,0x3F,0x6F,0x5F},{0,0x3F,0x6F,0x6F},{0,0x3F,0x6F,0x7F},
	{0,0x3F,0x6F,0x8F},{0,0x3F,0x6F,0x9F},{0,0x3F,0x6F,0xAF},{0,0x3F,0x6F,0xBF},
	{0,0x3F,0x6F,0xCF},{0,0x3F,0x6F,0xDF},{0,0x3F,0x6F,0xEF},{0,0x3F,0x6F,0xFF},
	{0,0x3F,0x7F,0x0F},{0,0x3F,0x7F,0x1F},{0,0x3F,0x7F,0x2F},{0,0x3F,0x7F,0x3F},
	{0,0x3F,0x7F,0x4F},{0,0x3F,0x7F,0x5F},{0,0x3F,0x7F,0x6F},{0,0x3F,0x7F,0x7F},
	{0,0x3F,0x7F,0x8F},{0,0x3F,0x7F,0x9F},{0,0x3F,0x7F,0xAF},{0,0x3F,0x7F,0xBF},
	{0,0x3F,0x7F,0xCF},{0,0x3F,0x7F,0xDF},{0,0x3F,0x7F,0xEF},{0,0x3F,0x7F,0xFF},
	{0,0x3F,0x8F,0x0F},{0,0x3F,0x8F,0x1F},{0,0x3F,0x8F,0x2F},{0,0x3F,0x8F,0x3F},
	{0,0x3F,0x8F,0x4F},{0,0x3F,0x8F,0x5F},{0,0x3F,0x8F,0x6F},{0,0x3F,0x8F,0x7F},
	{0,0x3F,0x8F,0x8F},{0,0x3F,0x8F,0x9F},{0,0x3F,0x8F,0xAF},{0,0x3F,0x8F,0xBF},
	{0,0x3F,0x8F,0xCF},{0,0x3F,0x8F,0xDF},{0,0x3F,0x8F,0xEF},{0,0x3F,0x8F,0xFF},
	{0,0x3F,0x9F,0x0F},{0,0x3F,0x9F,0x1F},{0,0x3F,0x9F,0x2F},{0,0x3F,0x9F,0x3F},
	{0,0x3F,0x9F,0x4F},{0,0x3F,0x9F,0x5F},{0,0x3F,0x9F,0x6F},{0,0x3F,0x9F,0x7F},
	{0,0x3F,0x9F,0x8F},{0,0x3F,0x9F,0x9F},{0,0x3F,0x9F,0xAF},{0,0x3F,0x9F,0xBF},
	{0,0x3F,0x9F,0xCF},{0,0x3F,0x9F,0xDF},{0,0x3F,0x9F,0xEF},{0,0x3F,0x9F,0xFF},
	{0,0x3F,0xAF,0x0F},{0,0x3F,0xAF,0x1F},{0,0x3F,0xAF,0x2F},{0,0x3F,0xAF,0x3F},
	{0,0x3F,0xAF,0x4F},{0,0x3F,0xAF,0x5F},{0,0x3F,0xAF,0x6F},{0,0x3F,0xAF,0x7F},
	{0,0x3F,0xAF,0x8F},{0,0x3F,0xAF,0x9F},{0,0x3F,0xAF,0xAF},{0,0x3F,0xAF,0xBF},
	{0,0x3F,0xAF,0xCF},{0,0x3F,0xAF,0xDF},{0,0x3F,0xAF,0xEF},{0,0x3F,0xAF,0xFF},
	{0,0x3F,0xBF,0x0F},{0,0x3F,0xBF,0x1F},{0,0x3F,0xBF,0x2F},{0,0x3F,0xBF,0x3F},
	{0,0x3F,0xBF,0x4F},{0,0x3F,0xBF,0x5F},{0,0x3F,0xBF,0x6F},{0,0x3F,0xBF,0x7F},
	{0,0x3F,0xBF,0x8F},{0,0x3F,0xBF,0x9F},{0,0x3F,0xBF,0xAF},{0,0x3F,0xBF,0xBF},
	{0,0x3F,0xBF,0xCF},{0,0x3F,0xBF,0xDF},{0,0x3F,0xBF,0xEF},{0,0x3F,0xBF,0xFF},
	{0,0x3F,0xCF,0x0F},{0,0x3F,0xCF,0x1F},{0,0x3F,0xCF,0x2F},{0,0x3F,0xCF,0x3F},
	{0,0x3F,0xCF,0x4F},{0,0x3F,0xCF,0x5F},{0,0x3F,0xCF,0x6F},{0,0x3F,0xCF,0x7F},
	{0,0x3F,0xCF,0x8F},{0,0x3F,0xCF,0x9F},{0,0x3F,0xCF,0xAF},{0,0x3F,0xCF,0xBF},
	{0,0x3F,0xCF,0xCF},{0,0x3F,0xCF,0xDF},{0,0x3F,0xCF,0xEF},{0,0x3F,0xCF,0xFF},
	{0,0x3F,0xDF,0x0F},{0,0x3F,0xDF,0x1F},{0,0x3F,0xDF,0x2F},{0,0x3F,0xDF,0x3F},
	{0,0x3F,0xDF,0x4F},{0,0x3F,0xDF,0x5F},{0,0x3F,0xDF,0x6F},{0,0x3F,0xDF,0x7F},
	{0,0x3F,0xDF,0x8F},{0,0x3F,0xDF,0x9F},{0,0x3F,0xDF,0xAF},{0,0x3F,0xDF,0xBF},
	{0,0x3F,0xDF,0xCF},{0,0x3F,0xDF,0xDF},{0,0x3F,0xDF,0xEF},{0,0x3F,0xDF,0xFF},
	{0,0x3F,0xEF,0x0F},{0,0x3F,0xEF,0x1F},{0,0x3F,0xEF,0x2F},{0,0x3F,0xEF,0x3F},
	{0,0x3F,0xEF,0x4F},{0,0x3F,0xEF,0x5F},{0,0x3F,0xEF,0x6F},{0,0x3F,0xEF,0x7F},
	{0,0x3F,0xEF,0x8F},{0,0x3F,0xEF,0x9F},{0,0x3F,0xEF,0xAF},{0,0x3F,0xEF,0xBF},
	{0,0x3F,0xEF,0xCF},{0,0x3F,0xEF,0xDF},{0,0x3F,0xEF,0xEF},{0,0x3F,0xEF,0xFF},
	{0,0x3F,0xFF,0x0F},{0,0x3F,0xFF,0x1F},{0,0x3F,0xFF,0x2F},{0,0x3F,0xFF,0x3F},
	{0,0x3F,0xFF,0x4F},{0,0x3F,0xFF,0x5F},{0,0x3F,0xFF,0x6F},{0,0x3F,0xFF,0x7F},
	{0,0x3F,0xFF,0x8F},{0,0x3F,0xFF,0x9F},{0,0x3F,0xFF,0xAF},{0,0x3F,0xFF,0xBF},
	{0,0x3F,0xFF,0xCF},{0,0x3F,0xFF,0xDF},{0,0x3F,0xFF,0xEF},{0,0x3F,0xFF,0xFF},
	{0,0x4F,0x0F,0x0F},{0,0x4F,0x0F,0x1F},{0,0x4F,0x0F,0x2F},{0,0x4F,0x0F,0x3F},
	{0,0x4F,0x0F,0x4F},{0,0x4F,0x0F,0x5F},{0,0x4F,0x0F,0x6F},{0,0x4F,0x0F,0x7F},
	{0,0x4F,0x0F,0x8F},{0,0x4F,0x0F,0x9F},{0,0x4F,0x0F,0xAF},{0,0x4F,0x0F,0xBF},
	{0,0x4F,0x0F,0xCF},{0,0x4F,0x0F,0xDF},{0,0x4F,0x0F,0xEF},{0,0x4F,0x0F,0xFF},
	{0,0x4F,0x1F,0x0F},{0,0x4F,0x1F,0x1F},{0,0x4F,0x1F,0x2F},{0,0x4F,0x1F,0x3F},
	{0,0x4F,0x1F,0x4F},{0,0x4F,0x1F,0x5F},{0,0x4F,0x1F,0x6F},{0,0x4F,0x1F,0x7F},
	{0,0x4F,0x1F,0x8F},{0,0x4F,0x1F,0x9F},{0,0x4F,0x1F,0xAF},{0,0x4F,0x1F,0xBF},
	{0,0x4F,0x1F,0xCF},{0,0x4F,0x1F,0xDF},{0,0x4F,0x1F,0xEF},{0,0x4F,0x1F,0xFF},
	{0,0x4F,0x2F,0x0F},{0,0x4F,0x2F,0x1F},{0,0x4F,0x2F,0x2F},{0,0x4F,0x2F,0x3F},
	{0,0x4F,0x2F,0x4F},{0,0x4F,0x2F,0x5F},{0,0x4F,0x2F,0x6F},{0,0x4F,0x2F,0x7F},
	{0,0x4F,0x2F,0x8F},{0,0x4F,0x2F,0x9F},{0,0x4F,0x2F,0xAF},{0,0x4F,0x2F,0xBF},
	{0,0x4F,0x2F,0xCF},{0,0x4F,0x2F,0xDF},{0,0x4F,0x2F,0xEF},{0,0x4F,0x2F,0xFF},
	{0,0x4F,0x3F,0x0F},{0,0x4F,0x3F,0x1F},{0,0x4F,0x3F,0x2F},{0,0x4F,0x3F,0x3F},
	{0,0x4F,0x3F,0x4F},{0,0x4F,0x3F,0x5F},{0,0x4F,0x3F,0x6F},{0,0x4F,0x3F,0x7F},
	{0,0x4F,0x3F,0x8F},{0,0x4F,0x3F,0x9F},{0,0x4F,0x3F,0xAF},{0,0x4F,0x3F,0xBF},
	{0,0x4F,0x3F,0xCF},{0,0x4F,0x3F,0xDF},{0,0x4F,0x3F,0xEF},{0,0x4F,0x3F,0xFF},
	{0,0x4F,0x4F,0x0F},{0,0x4F,0x4F,0x1F},{0,0x4F,0x4F,0x2F},{0,0x4F,0x4F,0x3F},
	{0,0x4F,0x4F,0x4F},{0,0x4F,0x4F,0x5F},{0,0x4F,0x4F,0x6F},{0,0x4F,0x4F,0x7F},
	{0,0x4F,0x4F,0x8F},{0,0x4F,0x4F,0x9F},{0,0x4F,0x4F,0xAF},{0,0x4F,0x4F,0xBF},
	{0,0x4F,0x4F,0xCF},{0,0x4F,0x4F,0xDF},{0,0x4F,0x4F,0xEF},{0,0x4F,0x4F,0xFF},
	{0,0x4F,0x5F,0x0F},{0,0x4F,0x5F,0x1F},{0,0x4F,0x5F,0x2F},{0,0x4F,0x5F,0x3F},
	{0,0x4F,0x5F,0x4F},{0,0x4F,0x5F,0x5F},{0,0x4F,0x5F,0x6F},{0,0x4F,0x5F,0x7F},
	{0,0x4F,0x5F,0x8F},{0,0x4F,0x5F,0x9F},{0,0x4F,0x5F,0xAF},{0,0x4F,0x5F,0xBF},
	{0,0x4F,0x5F,0xCF},{0,0x4F,0x5F,0xDF},{0,0x4F,0x5F,0xEF},{0,0x4F,0x5F,0xFF},
	{0,0x4F,0x6F,0x0F},{0,0x4F,0x6F,0x1F},{0,0x4F,0x6F,0x2F},{0,0x4F,0x6F,0x3F},
	{0,0x4F,0x6F,0x4F},{0,0x4F,0x6F,0x5F},{0,0x4F,0x6F,0x6F},{0,0x4F,0x6F,0x7F},
	{0,0x4F,0x6F,0x8F},{0,0x4F,0x6F,0x9F},{0,0x4F,0x6F,0xAF},{0,0x4F,0x6F,0xBF},
	{0,0x4F,0x6F,0xCF},{0,0x4F,0x6F,0xDF},{0,0x4F,0x6F,0xEF},{0,0x4F,0x6F,0xFF},
	{0,0x4F,0x7F,0x0F},{0,0x4F,0x7F,0x1F},{0,0x4F,0x7F,0x2F},{0,0x4F,0x7F,0x3F},
	{0,0x4F,0x7F,0x4F},{0,0x4F,0x7F,0x5F},{0,0x4F,0x7F,0x6F},{0,0x4F,0x7F,0x7F},
	{0,0x4F,0x7F,0x8F},{0,0x4F,0x7F,0x9F},{0,0x4F,0x7F,0xAF},{0,0x4F,0x7F,0xBF},
	{0,0x4F,0x7F,0xCF},{0,0x4F,0x7F,0xDF},{0,0x4F,0x7F,0xEF},{0,0x4F,0x7F,0xFF},
	{0,0x4F,0x8F,0x0F},{0,0x4F,0x8F,0x1F},{0,0x4F,0x8F,0x2F},{0,0x4F,0x8F,0x3F},
	{0,0x4F,0x8F,0x4F},{0,0x4F,0x8F,0x5F},{0,0x4F,0x8F,0x6F},{0,0x4F,0x8F,0x7F},
	{0,0x4F,0x8F,0x8F},{0,0x4F,0x8F,0x9F},{0,0x4F,0x8F,0xAF},{0,0x4F,0x8F,0xBF},
	{0,0x4F,0x8F,0xCF},{0,0x4F,0x8F,0xDF},{0,0x4F,0x8F,0xEF},{0,0x4F,0x8F,0xFF},
	{0,0x4F,0x9F,0x0F},{0,0x4F,0x9F,0x1F},{0,0x4F,0x9F,0x2F},{0,0x4F,0x9F,0x3F},
	{0,0x4F,0x9F,0x4F},{0,0x4F,0x9F,0x5F},{0,0x4F,0x9F,0x6F},{0,0x4F,0x9F,0x7F},
	{0,0x4F,0x9F,0x8F},{0,0x4F,0x9F,0x9F},{0,0x4F,0x9F,0xAF},{0,0x4F,0x9F,0xBF},
	{0,0x4F,0x9F,0xCF},{0,0x4F,0x9F,0xDF},{0,0x4F,0x9F,0xEF},{0,0x4F,0x9F,0xFF},
	{0,0x4F,0xAF,0x0F},{0,0x4F,0xAF,0x1F},{0,0x4F,0xAF,0x2F},{0,0x4F,0xAF,0x3F},
	{0,0x4F,0xAF,0x4F},{0,0x4F,0xAF,0x5F},{0,0x4F,0xAF,0x6F},{0,0x4F,0xAF,0x7F},
	{0,0x4F,0xAF,0x8F},{0,0x4F,0xAF,0x9F},{0,0x4F,0xAF,0xAF},{0,0x4F,0xAF,0xBF},
	{0,0x4F,0xAF,0xCF},{0,0x4F,0xAF,0xDF},{0,0x4F,0xAF,0xEF},{0,0x4F,0xAF,0xFF},
	{0,0x4F,0xBF,0x0F},{0,0x4F,0xBF,0x1F},{0,0x4F,0xBF,0x2F},{0,0x4F,0xBF,0x3F},
	{0,0x4F,0xBF,0x4F},{0,0x4F,0xBF,0x5F},{0,0x4F,0xBF,0x6F},{0,0x4F,0xBF,0x7F},
	{0,0x4F,0xBF,0x8F},{0,0x4F,0xBF,0x9F},{0,0x4F,0xBF,0xAF},{0,0x4F,0xBF,0xBF},
	{0,0x4F,0xBF,0xCF},{0,0x4F,0xBF,0xDF},{0,0x4F,0xBF,0xEF},{0,0x4F,0xBF,0xFF},
	{0,0x4F,0xCF,0x0F},{0,0x4F,0xCF,0x1F},{0,0x4F,0xCF,0x2F},{0,0x4F,0xCF,0x3F},
	{0,0x4F,0xCF,0x4F},{0,0x4F,0xCF,0x5F},{0,0x4F,0xCF,0x6F},{0,0x4F,0xCF,0x7F},
	{0,0x4F,0xCF,0x8F},{0,0x4F,0xCF,0x9F},{0,0x4F,0xCF,0xAF},{0,0x4F,0xCF,0xBF},
	{0,0x4F,0xCF,0xCF},{0,0x4F,0xCF,0xDF},{0,0x4F,0xCF,0xEF},{0,0x4F,0xCF,0xFF},
	{0,0x4F,0xDF,0x0F},{0,0x4F,0xDF,0x1F},{0,0x4F,0xDF,0x2F},{0,0x4F,0xDF,0x3F},
	{0,0x4F,0xDF,0x4F},{0,0x4F,0xDF,0x5F},{0,0x4F,0xDF,0x6F},{0,0x4F,0xDF,0x7F},
	{0,0x4F,0xDF,0x8F},{0,0x4F,0xDF,0x9F},{0,0x4F,0xDF,0xAF},{0,0x4F,0xDF,0xBF},
	{0,0x4F,0xDF,0xCF},{0,0x4F,0xDF,0xDF},{0,0x4F,0xDF,0xEF},{0,0x4F,0xDF,0xFF},
	{0,0x4F,0xEF,0x0F},{0,0x4F,0xEF,0x1F},{0,0x4F,0xEF,0x2F},{0,0x4F,0xEF,0x3F},
	{0,0x4F,0xEF,0x4F},{0,0x4F,0xEF,0x5F},{0,0x4F,0xEF,0x6F},{0,0x4F,0xEF,0x7F},
	{0,0x4F,0xEF,0x8F},{0,0x4F,0xEF,0x9F},{0,0x4F,0xEF,0xAF},{0,0x4F,0xEF,0xBF},
	{0,0x4F,0xEF,0xCF},{0,0x4F,0xEF,0xDF},{0,0x4F,0xEF,0xEF},{0,0x4F,0xEF,0xFF},
	{0,0x4F,0xFF,0x0F},{0,0x4F,0xFF,0x1F},{0,0x4F,0xFF,0x2F},{0,0x4F,0xFF,0x3F},
	{0,0x4F,0xFF,0x4F},{0,0x4F,0xFF,0x5F},{0,0x4F,0xFF,0x6F},{0,0x4F,0xFF,0x7F},
	{0,0x4F,0xFF,0x8F},{0,0x4F,0xFF,0x9F},{0,0x4F,0xFF,0xAF},{0,0x4F,0xFF,0xBF},
	{0,0x4F,0xFF,0xCF},{0,0x4F,0xFF,0xDF},{0,0x4F,0xFF,0xEF},{0,0x4F,0xFF,0xFF},
	{0,0x5F,0x0F,0x0F},{0,0x5F,0x0F,0x1F},{0,0x5F,0x0F,0x2F},{0,0x5F,0x0F,0x3F},
	{0,0x5F,0x0F,0x4F},{0,0x5F,0x0F,0x5F},{0,0x5F,0x0F,0x6F},{0,0x5F,0x0F,0x7F},
	{0,0x5F,0x0F,0x8F},{0,0x5F,0x0F,0x9F},{0,0x5F,0x0F,0xAF},{0,0x5F,0x0F,0xBF},
	{0,0x5F,0x0F,0xCF},{0,0x5F,0x0F,0xDF},{0,0x5F,0x0F,0xEF},{0,0x5F,0x0F,0xFF},
	{0,0x5F,0x1F,0x0F},{0,0x5F,0x1F,0x1F},{0,0x5F,0x1F,0x2F},{0,0x5F,0x1F,0x3F},
	{0,0x5F,0x1F,0x4F},{0,0x5F,0x1F,0x5F},{0,0x5F,0x1F,0x6F},{0,0x5F,0x1F,0x7F},
	{0,0x5F,0x1F,0x8F},{0,0x5F,0x1F,0x9F},{0,0x5F,0x1F,0xAF},{0,0x5F,0x1F,0xBF},
	{0,0x5F,0x1F,0xCF},{0,0x5F,0x1F,0xDF},{0,0x5F,0x1F,0xEF},{0,0x5F,0x1F,0xFF},
	{0,0x5F,0x2F,0x0F},{0,0x5F,0x2F,0x1F},{0,0x5F,0x2F,0x2F},{0,0x5F,0x2F,0x3F},
	{0,0x5F,0x2F,0x4F},{0,0x5F,0x2F,0x5F},{0,0x5F,0x2F,0x6F},{0,0x5F,0x2F,0x7F},
	{0,0x5F,0x2F,0x8F},{0,0x5F,0x2F,0x9F},{0,0x5F,0x2F,0xAF},{0,0x5F,0x2F,0xBF},
	{0,0x5F,0x2F,0xCF},{0,0x5F,0x2F,0xDF},{0,0x5F,0x2F,0xEF},{0,0x5F,0x2F,0xFF},
	{0,0x5F,0x3F,0x0F},{0,0x5F,0x3F,0x1F},{0,0x5F,0x3F,0x2F},{0,0x5F,0x3F,0x3F},
	{0,0x5F,0x3F,0x4F},{0,0x5F,0x3F,0x5F},{0,0x5F,0x3F,0x6F},{0,0x5F,0x3F,0x7F},
	{0,0x5F,0x3F,0x8F},{0,0x5F,0x3F,0x9F},{0,0x5F,0x3F,0xAF},{0,0x5F,0x3F,0xBF},
	{0,0x5F,0x3F,0xCF},{0,0x5F,0x3F,0xDF},{0,0x5F,0x3F,0xEF},{0,0x5F,0x3F,0xFF},
	{0,0x5F,0x4F,0x0F},{0,0x5F,0x4F,0x1F},{0,0x5F,0x4F,0x2F},{0,0x5F,0x4F,0x3F},
	{0,0x5F,0x4F,0x4F},{0,0x5F,0x4F,0x5F},{0,0x5F,0x4F,0x6F},{0,0x5F,0x4F,0x7F},
	{0,0x5F,0x4F,0x8F},{0,0x5F,0x4F,0x9F},{0,0x5F,0x4F,0xAF},{0,0x5F,0x4F,0xBF},
	{0,0x5F,0x4F,0xCF},{0,0x5F,0x4F,0xDF},{0,0x5F,0x4F,0xEF},{0,0x5F,0x4F,0xFF},
	{0,0x5F,0x5F,0x0F},{0,0x5F,0x5F,0x1F},{0,0x5F,0x5F,0x2F},{0,0x5F,0x5F,0x3F},
	{0,0x5F,0x5F,0x4F},{0,0x5F,0x5F,0x5F},{0,0x5F,0x5F,0x6F},{0,0x5F,0x5F,0x7F},
	{0,0x5F,0x5F,0x8F},{0,0x5F,0x5F,0x9F},{0,0x5F,0x5F,0xAF},{0,0x5F,0x5F,0xBF},
	{0,0x5F,0x5F,0xCF},{0,0x5F,0x5F,0xDF},{0,0x5F,0x5F,0xEF},{0,0x5F,0x5F,0xFF},
	{0,0x5F,0x6F,0x0F},{0,0x5F,0x6F,0x1F},{0,0x5F,0x6F,0x2F},{0,0x5F,0x6F,0x3F},
	{0,0x5F,0x6F,0x4F},{0,0x5F,0x6F,0x5F},{0,0x5F,0x6F,0x6F},{0,0x5F,0x6F,0x7F},
	{0,0x5F,0x6F,0x8F},{0,0x5F,0x6F,0x9F},{0,0x5F,0x6F,0xAF},{0,0x5F,0x6F,0xBF},
	{0,0x5F,0x6F,0xCF},{0,0x5F,0x6F,0xDF},{0,0x5F,0x6F,0xEF},{0,0x5F,0x6F,0xFF},
	{0,0x5F,0x7F,0x0F},{0,0x5F,0x7F,0x1F},{0,0x5F,0x7F,0x2F},{0,0x5F,0x7F,0x3F},
	{0,0x5F,0x7F,0x4F},{0,0x5F,0x7F,0x5F},{0,0x5F,0x7F,0x6F},{0,0x5F,0x7F,0x7F},
	{0,0x5F,0x7F,0x8F},{0,0x5F,0x7F,0x9F},{0,0x5F,0x7F,0xAF},{0,0x5F,0x7F,0xBF},
	{0,0x5F,0x7F,0xCF},{0,0x5F,0x7F,0xDF},{0,0x5F,0x7F,0xEF},{0,0x5F,0x7F,0xFF},
	{0,0x5F,0x8F,0x0F},{0,0x5F,0x8F,0x1F},{0,0x5F,0x8F,0x2F},{0,0x5F,0x8F,0x3F},
	{0,0x5F,0x8F,0x4F},{0,0x5F,0x8F,0x5F},{0,0x5F,0x8F,0x6F},{0,0x5F,0x8F,0x7F},
	{0,0x5F,0x8F,0x8F},{0,0x5F,0x8F,0x9F},{0,0x5F,0x8F,0xAF},{0,0x5F,0x8F,0xBF},
	{0,0x5F,0x8F,0xCF},{0,0x5F,0x8F,0xDF},{0,0x5F,0x8F,0xEF},{0,0x5F,0x8F,0xFF},
	{0,0x5F,0x9F,0x0F},{0,0x5F,0x9F,0x1F},{0,0x5F,0x9F,0x2F},{0,0x5F,0x9F,0x3F},
	{0,0x5F,0x9F,0x4F},{0,0x5F,0x9F,0x5F},{0,0x5F,0x9F,0x6F},{0,0x5F,0x9F,0x7F},
	{0,0x5F,0x9F,0x8F},{0,0x5F,0x9F,0x9F},{0,0x5F,0x9F,0xAF},{0,0x5F,0x9F,0xBF},
	{0,0x5F,0x9F,0xCF},{0,0x5F,0x9F,0xDF},{0,0x5F,0x9F,0xEF},{0,0x5F,0x9F,0xFF},
	{0,0x5F,0xAF,0x0F},{0,0x5F,0xAF,0x1F},{0,0x5F,0xAF,0x2F},{0,0x5F,0xAF,0x3F},
	{0,0x5F,0xAF,0x4F},{0,0x5F,0xAF,0x5F},{0,0x5F,0xAF,0x6F},{0,0x5F,0xAF,0x7F},
	{0,0x5F,0xAF,0x8F},{0,0x5F,0xAF,0x9F},{0,0x5F,0xAF,0xAF},{0,0x5F,0xAF,0xBF},
	{0,0x5F,0xAF,0xCF},{0,0x5F,0xAF,0xDF},{0,0x5F,0xAF,0xEF},{0,0x5F,0xAF,0xFF},
	{0,0x5F,0xBF,0x0F},{0,0x5F,0xBF,0x1F},{0,0x5F,0xBF,0x2F},{0,0x5F,0xBF,0x3F},
	{0,0x5F,0xBF,0x4F},{0,0x5F,0xBF,0x5F},{0,0x5F,0xBF,0x6F},{0,0x5F,0xBF,0x7F},
	{0,0x5F,0xBF,0x8F},{0,0x5F,0xBF,0x9F},{0,0x5F,0xBF,0xAF},{0,0x5F,0xBF,0xBF},
	{0,0x5F,0xBF,0xCF},{0,0x5F,0xBF,0xDF},{0,0x5F,0xBF,0xEF},{0,0x5F,0xBF,0xFF},
	{0,0x5F,0xCF,0x0F},{0,0x5F,0xCF,0x1F},{0,0x5F,0xCF,0x2F},{0,0x5F,0xCF,0x3F},
	{0,0x5F,0xCF,0x4F},{0,0x5F,0xCF,0x5F},{0,0x5F,0xCF,0x6F},{0,0x5F,0xCF,0x7F},
	{0,0x5F,0xCF,0x8F},{0,0x5F,0xCF,0x9F},{0,0x5F,0xCF,0xAF},{0,0x5F,0xCF,0xBF},
	{0,0x5F,0xCF,0xCF},{0,0x5F,0xCF,0xDF},{0,0x5F,0xCF,0xEF},{0,0x5F,0xCF,0xFF},
	{0,0x5F,0xDF,0x0F},{0,0x5F,0xDF,0x1F},{0,0x5F,0xDF,0x2F},{0,0x5F,0xDF,0x3F},
	{0,0x5F,0xDF,0x4F},{0,0x5F,0xDF,0x5F},{0,0x5F,0xDF,0x6F},{0,0x5F,0xDF,0x7F},
	{0,0x5F,0xDF,0x8F},{0,0x5F,0xDF,0x9F},{0,0x5F,0xDF,0xAF},{0,0x5F,0xDF,0xBF},
	{0,0x5F,0xDF,0xCF},{0,0x5F,0xDF,0xDF},{0,0x5F,0xDF,0xEF},{0,0x5F,0xDF,0xFF},
	{0,0x5F,0xEF,0x0F},{0,0x5F,0xEF,0x1F},{0,0x5F,0xEF,0x2F},{0,0x5F,0xEF,0x3F},
	{0,0x5F,0xEF,0x4F},{0,0x5F,0xEF,0x5F},{0,0x5F,0xEF,0x6F},{0,0x5F,0xEF,0x7F},
	{0,0x5F,0xEF,0x8F},{0,0x5F,0xEF,0x9F},{0,0x5F,0xEF,0xAF},{0,0x5F,0xEF,0xBF},
	{0,0x5F,0xEF,0xCF},{0,0x5F,0xEF,0xDF},{0,0x5F,0xEF,0xEF},{0,0x5F,0xEF,0xFF},
	{0,0x5F,0xFF,0x0F},{0,0x5F,0xFF,0x1F},{0,0x5F,0xFF,0x2F},{0,0x5F,0xFF,0x3F},
	{0,0x5F,0xFF,0x4F},{0,0x5F,0xFF,0x5F},{0,0x5F,0xFF,0x6F},{0,0x5F,0xFF,0x7F},
	{0,0x5F,0xFF,0x8F},{0,0x5F,0xFF,0x9F},{0,0x5F,0xFF,0xAF},{0,0x5F,0xFF,0xBF},
	{0,0x5F,0xFF,0xCF},{0,0x5F,0xFF,0xDF},{0,0x5F,0xFF,0xEF},{0,0x5F,0xFF,0xFF},
	{0,0x6F,0x0F,0x0F},{0,0x6F,0x0F,0x1F},{0,0x6F,0x0F,0x2F},{0,0x6F,0x0F,0x3F},
	{0,0x6F,0x0F,0x4F},{0,0x6F,0x0F,0x5F},{0,0x6F,0x0F,0x6F},{0,0x6F,0x0F,0x7F},
	{0,0x6F,0x0F,0x8F},{0,0x6F,0x0F,0x9F},{0,0x6F,0x0F,0xAF},{0,0x6F,0x0F,0xBF},
	{0,0x6F,0x0F,0xCF},{0,0x6F,0x0F,0xDF},{0,0x6F,0x0F,0xEF},{0,0x6F,0x0F,0xFF},
	{0,0x6F,0x1F,0x0F},{0,0x6F,0x1F,0x1F},{0,0x6F,0x1F,0x2F},{0,0x6F,0x1F,0x3F},
	{0,0x6F,0x1F,0x4F},{0,0x6F,0x1F,0x5F},{0,0x6F,0x1F,0x6F},{0,0x6F,0x1F,0x7F},
	{0,0x6F,0x1F,0x8F},{0,0x6F,0x1F,0x9F},{0,0x6F,0x1F,0xAF},{0,0x6F,0x1F,0xBF},
	{0,0x6F,0x1F,0xCF},{0,0x6F,0x1F,0xDF},{0,0x6F,0x1F,0xEF},{0,0x6F,0x1F,0xFF},
	{0,0x6F,0x2F,0x0F},{0,0x6F,0x2F,0x1F},{0,0x6F,0x2F,0x2F},{0,0x6F,0x2F,0x3F},
	{0,0x6F,0x2F,0x4F},{0,0x6F,0x2F,0x5F},{0,0x6F,0x2F,0x6F},{0,0x6F,0x2F,0x7F},
	{0,0x6F,0x2F,0x8F},{0,0x6F,0x2F,0x9F},{0,0x6F,0x2F,0xAF},{0,0x6F,0x2F,0xBF},
	{0,0x6F,0x2F,0xCF},{0,0x6F,0x2F,0xDF},{0,0x6F,0x2F,0xEF},{0,0x6F,0x2F,0xFF},
	{0,0x6F,0x3F,0x0F},{0,0x6F,0x3F,0x1F},{0,0x6F,0x3F,0x2F},{0,0x6F,0x3F,0x3F},
	{0,0x6F,0x3F,0x4F},{0,0x6F,0x3F,0x5F},{0,0x6F,0x3F,0x6F},{0,0x6F,0x3F,0x7F},
	{0,0x6F,0x3F,0x8F},{0,0x6F,0x3F,0x9F},{0,0x6F,0x3F,0xAF},{0,0x6F,0x3F,0xBF},
	{0,0x6F,0x3F,0xCF},{0,0x6F,0x3F,0xDF},{0,0x6F,0x3F,0xEF},{0,0x6F,0x3F,0xFF},
	{0,0x6F,0x4F,0x0F},{0,0x6F,0x4F,0x1F},{0,0x6F,0x4F,0x2F},{0,0x6F,0x4F,0x3F},
	{0,0x6F,0x4F,0x4F},{0,0x6F,0x4F,0x5F},{0,0x6F,0x4F,0x6F},{0,0x6F,0x4F,0x7F},
	{0,0x6F,0x4F,0x8F},{0,0x6F,0x4F,0x9F},{0,0x6F,0x4F,0xAF},{0,0x6F,0x4F,0xBF},
	{0,0x6F,0x4F,0xCF},{0,0x6F,0x4F,0xDF},{0,0x6F,0x4F,0xEF},{0,0x6F,0x4F,0xFF},
	{0,0x6F,0x5F,0x0F},{0,0x6F,0x5F,0x1F},{0,0x6F,0x5F,0x2F},{0,0x6F,0x5F,0x3F},
	{0,0x6F,0x5F,0x4F},{0,0x6F,0x5F,0x5F},{0,0x6F,0x5F,0x6F},{0,0x6F,0x5F,0x7F},
	{0,0x6F,0x5F,0x8F},{0,0x6F,0x5F,0x9F},{0,0x6F,0x5F,0xAF},{0,0x6F,0x5F,0xBF},
	{0,0x6F,0x5F,0xCF},{0,0x6F,0x5F,0xDF},{0,0x6F,0x5F,0xEF},{0,0x6F,0x5F,0xFF},
	{0,0x6F,0x6F,0x0F},{0,0x6F,0x6F,0x1F},{0,0x6F,0x6F,0x2F},{0,0x6F,0x6F,0x3F},
	{0,0x6F,0x6F,0x4F},{0,0x6F,0x6F,0x5F},{0,0x6F,0x6F,0x6F},{0,0x6F,0x6F,0x7F},
	{0,0x6F,0x6F,0x8F},{0,0x6F,0x6F,0x9F},{0,0x6F,0x6F,0xAF},{0,0x6F,0x6F,0xBF},
	{0,0x6F,0x6F,0xCF},{0,0x6F,0x6F,0xDF},{0,0x6F,0x6F,0xEF},{0,0x6F,0x6F,0xFF},
	{0,0x6F,0x7F,0x0F},{0,0x6F,0x7F,0x1F},{0,0x6F,0x7F,0x2F},{0,0x6F,0x7F,0x3F},
	{0,0x6F,0x7F,0x4F},{0,0x6F,0x7F,0x5F},{0,0x6F,0x7F,0x6F},{0,0x6F,0x7F,0x7F},
	{0,0x6F,0x7F,0x8F},{0,0x6F,0x7F,0x9F},{0,0x6F,0x7F,0xAF},{0,0x6F,0x7F,0xBF},
	{0,0x6F,0x7F,0xCF},{0,0x6F,0x7F,0xDF},{0,0x6F,0x7F,0xEF},{0,0x6F,0x7F,0xFF},
	{0,0x6F,0x8F,0x0F},{0,0x6F,0x8F,0x1F},{0,0x6F,0x8F,0x2F},{0,0x6F,0x8F,0x3F},
	{0,0x6F,0x8F,0x4F},{0,0x6F,0x8F,0x5F},{0,0x6F,0x8F,0x6F},{0,0x6F,0x8F,0x7F},
	{0,0x6F,0x8F,0x8F},{0,0x6F,0x8F,0x9F},{0,0x6F,0x8F,0xAF},{0,0x6F,0x8F,0xBF},
	{0,0x6F,0x8F,0xCF},{0,0x6F,0x8F,0xDF},{0,0x6F,0x8F,0xEF},{0,0x6F,0x8F,0xFF},
	{0,0x6F,0x9F,0x0F},{0,0x6F,0x9F,0x1F},{0,0x6F,0x9F,0x2F},{0,0x6F,0x9F,0x3F},
	{0,0x6F,0x9F,0x4F},{0,0x6F,0x9F,0x5F},{0,0x6F,0x9F,0x6F},{0,0x6F,0x9F,0x7F},
	{0,0x6F,0x9F,0x8F},{0,0x6F,0x9F,0x9F},{0,0x6F,0x9F,0xAF},{0,0x6F,0x9F,0xBF},
	{0,0x6F,0x9F,0xCF},{0,0x6F,0x9F,0xDF},{0,0x6F,0x9F,0xEF},{0,0x6F,0x9F,0xFF},
	{0,0x6F,0xAF,0x0F},{0,0x6F,0xAF,0x1F},{0,0x6F,0xAF,0x2F},{0,0x6F,0xAF,0x3F},
	{0,0x6F,0xAF,0x4F},{0,0x6F,0xAF,0x5F},{0,0x6F,0xAF,0x6F},{0,0x6F,0xAF,0x7F},
	{0,0x6F,0xAF,0x8F},{0,0x6F,0xAF,0x9F},{0,0x6F,0xAF,0xAF},{0,0x6F,0xAF,0xBF},
	{0,0x6F,0xAF,0xCF},{0,0x6F,0xAF,0xDF},{0,0x6F,0xAF,0xEF},{0,0x6F,0xAF,0xFF},
	{0,0x6F,0xBF,0x0F},{0,0x6F,0xBF,0x1F},{0,0x6F,0xBF,0x2F},{0,0x6F,0xBF,0x3F},
	{0,0x6F,0xBF,0x4F},{0,0x6F,0xBF,0x5F},{0,0x6F,0xBF,0x6F},{0,0x6F,0xBF,0x7F},
	{0,0x6F,0xBF,0x8F},{0,0x6F,0xBF,0x9F},{0,0x6F,0xBF,0xAF},{0,0x6F,0xBF,0xBF},
	{0,0x6F,0xBF,0xCF},{0,0x6F,0xBF,0xDF},{0,0x6F,0xBF,0xEF},{0,0x6F,0xBF,0xFF},
	{0,0x6F,0xCF,0x0F},{0,0x6F,0xCF,0x1F},{0,0x6F,0xCF,0x2F},{0,0x6F,0xCF,0x3F},
	{0,0x6F,0xCF,0x4F},{0,0x6F,0xCF,0x5F},{0,0x6F,0xCF,0x6F},{0,0x6F,0xCF,0x7F},
	{0,0x6F,0xCF,0x8F},{0,0x6F,0xCF,0x9F},{0,0x6F,0xCF,0xAF},{0,0x6F,0xCF,0xBF},
	{0,0x6F,0xCF,0xCF},{0,0x6F,0xCF,0xDF},{0,0x6F,0xCF,0xEF},{0,0x6F,0xCF,0xFF},
	{0,0x6F,0xDF,0x0F},{0,0x6F,0xDF,0x1F},{0,0x6F,0xDF,0x2F},{0,0x6F,0xDF,0x3F},
	{0,0x6F,0xDF,0x4F},{0,0x6F,0xDF,0x5F},{0,0x6F,0xDF,0x6F},{0,0x6F,0xDF,0x7F},
	{0,0x6F,0xDF,0x8F},{0,0x6F,0xDF,0x9F},{0,0x6F,0xDF,0xAF},{0,0x6F,0xDF,0xBF},
	{0,0x6F,0xDF,0xCF},{0,0x6F,0xDF,0xDF},{0,0x6F,0xDF,0xEF},{0,0x6F,0xDF,0xFF},
	{0,0x6F,0xEF,0x0F},{0,0x6F,0xEF,0x1F},{0,0x6F,0xEF,0x2F},{0,0x6F,0xEF,0x3F},
	{0,0x6F,0xEF,0x4F},{0,0x6F,0xEF,0x5F},{0,0x6F,0xEF,0x6F},{0,0x6F,0xEF,0x7F},
	{0,0x6F,0xEF,0x8F},{0,0x6F,0xEF,0x9F},{0,0x6F,0xEF,0xAF},{0,0x6F,0xEF,0xBF},
	{0,0x6F,0xEF,0xCF},{0,0x6F,0xEF,0xDF},{0,0x6F,0xEF,0xEF},{0,0x6F,0xEF,0xFF},
	{0,0x6F,0xFF,0x0F},{0,0x6F,0xFF,0x1F},{0,0x6F,0xFF,0x2F},{0,0x6F,0xFF,0x3F},
	{0,0x6F,0xFF,0x4F},{0,0x6F,0xFF,0x5F},{0,0x6F,0xFF,0x6F},{0,0x6F,0xFF,0x7F},
	{0,0x6F,0xFF,0x8F},{0,0x6F,0xFF,0x9F},{0,0x6F,0xFF,0xAF},{0,0x6F,0xFF,0xBF},
	{0,0x6F,0xFF,0xCF},{0,0x6F,0xFF,0xDF},{0,0x6F,0xFF,0xEF},{0,0x6F,0xFF,0xFF},
	{0,0x7F,0x0F,0x0F},{0,0x7F,0x0F,0x1F},{0,0x7F,0x0F,0x2F},{0,0x7F,0x0F,0x3F},
	{0,0x7F,0x0F,0x4F},{0,0x7F,0x0F,0x5F},{0,0x7F,0x0F,0x6F},{0,0x7F,0x0F,0x7F},
	{0,0x7F,0x0F,0x8F},{0,0x7F,0x0F,0x9F},{0,0x7F,0x0F,0xAF},{0,0x7F,0x0F,0xBF},
	{0,0x7F,0x0F,0xCF},{0,0x7F,0x0F,0xDF},{0,0x7F,0x0F,0xEF},{0,0x7F,0x0F,0xFF},
	{0,0x7F,0x1F,0x0F},{0,0x7F,0x1F,0x1F},{0,0x7F,0x1F,0x2F},{0,0x7F,0x1F,0x3F},
	{0,0x7F,0x1F,0x4F},{0,0x7F,0x1F,0x5F},{0,0x7F,0x1F,0x6F},{0,0x7F,0x1F,0x7F},
	{0,0x7F,0x1F,0x8F},{0,0x7F,0x1F,0x9F},{0,0x7F,0x1F,0xAF},{0,0x7F,0x1F,0xBF},
	{0,0x7F,0x1F,0xCF},{0,0x7F,0x1F,0xDF},{0,0x7F,0x1F,0xEF},{0,0x7F,0x1F,0xFF},
	{0,0x7F,0x2F,0x0F},{0,0x7F,0x2F,0x1F},{0,0x7F,0x2F,0x2F},{0,0x7F,0x2F,0x3F},
	{0,0x7F,0x2F,0x4F},{0,0x7F,0x2F,0x5F},{0,0x7F,0x2F,0x6F},{0,0x7F,0x2F,0x7F},
	{0,0x7F,0x2F,0x8F},{0,0x7F,0x2F,0x9F},{0,0x7F,0x2F,0xAF},{0,0x7F,0x2F,0xBF},
	{0,0x7F,0x2F,0xCF},{0,0x7F,0x2F,0xDF},{0,0x7F,0x2F,0xEF},{0,0x7F,0x2F,0xFF},
	{0,0x7F,0x3F,0x0F},{0,0x7F,0x3F,0x1F},{0,0x7F,0x3F,0x2F},{0,0x7F,0x3F,0x3F},
	{0,0x7F,0x3F,0x4F},{0,0x7F,0x3F,0x5F},{0,0x7F,0x3F,0x6F},{0,0x7F,0x3F,0x7F},
	{0,0x7F,0x3F,0x8F},{0,0x7F,0x3F,0x9F},{0,0x7F,0x3F,0xAF},{0,0x7F,0x3F,0xBF},
	{0,0x7F,0x3F,0xCF},{0,0x7F,0x3F,0xDF},{0,0x7F,0x3F,0xEF},{0,0x7F,0x3F,0xFF},
	{0,0x7F,0x4F,0x0F},{0,0x7F,0x4F,0x1F},{0,0x7F,0x4F,0x2F},{0,0x7F,0x4F,0x3F},
	{0,0x7F,0x4F,0x4F},{0,0x7F,0x4F,0x5F},{0,0x7F,0x4F,0x6F},{0,0x7F,0x4F,0x7F},
	{0,0x7F,0x4F,0x8F},{0,0x7F,0x4F,0x9F},{0,0x7F,0x4F,0xAF},{0,0x7F,0x4F,0xBF},
	{0,0x7F,0x4F,0xCF},{0,0x7F,0x4F,0xDF},{0,0x7F,0x4F,0xEF},{0,0x7F,0x4F,0xFF},
	{0,0x7F,0x5F,0x0F},{0,0x7F,0x5F,0x1F},{0,0x7F,0x5F,0x2F},{0,0x7F,0x5F,0x3F},
	{0,0x7F,0x5F,0x4F},{0,0x7F,0x5F,0x5F},{0,0x7F,0x5F,0x6F},{0,0x7F,0x5F,0x7F},
	{0,0x7F,0x5F,0x8F},{0,0x7F,0x5F,0x9F},{0,0x7F,0x5F,0xAF},{0,0x7F,0x5F,0xBF},
	{0,0x7F,0x5F,0xCF},{0,0x7F,0x5F,0xDF},{0,0x7F,0x5F,0xEF},{0,0x7F,0x5F,0xFF},
	{0,0x7F,0x6F,0x0F},{0,0x7F,0x6F,0x1F},{0,0x7F,0x6F,0x2F},{0,0x7F,0x6F,0x3F},
	{0,0x7F,0x6F,0x4F},{0,0x7F,0x6F,0x5F},{0,0x7F,0x6F,0x6F},{0,0x7F,0x6F,0x7F},
	{0,0x7F,0x6F,0x8F},{0,0x7F,0x6F,0x9F},{0,0x7F,0x6F,0xAF},{0,0x7F,0x6F,0xBF},
	{0,0x7F,0x6F,0xCF},{0,0x7F,0x6F,0xDF},{0,0x7F,0x6F,0xEF},{0,0x7F,0x6F,0xFF},
	{0,0x7F,0x7F,0x0F},{0,0x7F,0x7F,0x1F},{0,0x7F,0x7F,0x2F},{0,0x7F,0x7F,0x3F},
	{0,0x7F,0x7F,0x4F},{0,0x7F,0x7F,0x5F},{0,0x7F,0x7F,0x6F},{0,0x7F,0x7F,0x7F},
	{0,0x7F,0x7F,0x8F},{0,0x7F,0x7F,0x9F},{0,0x7F,0x7F,0xAF},{0,0x7F,0x7F,0xBF},
	{0,0x7F,0x7F,0xCF},{0,0x7F,0x7F,0xDF},{0,0x7F,0x7F,0xEF},{0,0x7F,0x7F,0xFF},
	{0,0x7F,0x8F,0x0F},{0,0x7F,0x8F,0x1F},{0,0x7F,0x8F,0x2F},{0,0x7F,0x8F,0x3F},
	{0,0x7F,0x8F,0x4F},{0,0x7F,0x8F,0x5F},{0,0x7F,0x8F,0x6F},{0,0x7F,0x8F,0x7F},
	{0,0x7F,0x8F,0x8F},{0,0x7F,0x8F,0x9F},{0,0x7F,0x8F,0xAF},{0,0x7F,0x8F,0xBF},
	{0,0x7F,0x8F,0xCF},{0,0x7F,0x8F,0xDF},{0,0x7F,0x8F,0xEF},{0,0x7F,0x8F,0xFF},
	{0,0x7F,0x9F,0x0F},{0,0x7F,0x9F,0x1F},{0,0x7F,0x9F,0x2F},{0,0x7F,0x9F,0x3F},
	{0,0x7F,0x9F,0x4F},{0,0x7F,0x9F,0x5F},{0,0x7F,0x9F,0x6F},{0,0x7F,0x9F,0x7F},
	{0,0x7F,0x9F,0x8F},{0,0x7F,0x9F,0x9F},{0,0x7F,0x9F,0xAF},{0,0x7F,0x9F,0xBF},
	{0,0x7F,0x9F,0xCF},{0,0x7F,0x9F,0xDF},{0,0x7F,0x9F,0xEF},{0,0x7F,0x9F,0xFF},
	{0,0x7F,0xAF,0x0F},{0,0x7F,0xAF,0x1F},{0,0x7F,0xAF,0x2F},{0,0x7F,0xAF,0x3F},
	{0,0x7F,0xAF,0x4F},{0,0x7F,0xAF,0x5F},{0,0x7F,0xAF,0x6F},{0,0x7F,0xAF,0x7F},
	{0,0x7F,0xAF,0x8F},{0,0x7F,0xAF,0x9F},{0,0x7F,0xAF,0xAF},{0,0x7F,0xAF,0xBF},
	{0,0x7F,0xAF,0xCF},{0,0x7F,0xAF,0xDF},{0,0x7F,0xAF,0xEF},{0,0x7F,0xAF,0xFF},
	{0,0x7F,0xBF,0x0F},{0,0x7F,0xBF,0x1F},{0,0x7F,0xBF,0x2F},{0,0x7F,0xBF,0x3F},
	{0,0x7F,0xBF,0x4F},{0,0x7F,0xBF,0x5F},{0,0x7F,0xBF,0x6F},{0,0x7F,0xBF,0x7F},
	{0,0x7F,0xBF,0x8F},{0,0x7F,0xBF,0x9F},{0,0x7F,0xBF,0xAF},{0,0x7F,0xBF,0xBF},
	{0,0x7F,0xBF,0xCF},{0,0x7F,0xBF,0xDF},{0,0x7F,0xBF,0xEF},{0,0x7F,0xBF,0xFF},
	{0,0x7F,0xCF,0x0F},{0,0x7F,0xCF,0x1F},{0,0x7F,0xCF,0x2F},{0,0x7F,0xCF,0x3F},
	{0,0x7F,0xCF,0x4F},{0,0x7F,0xCF,0x5F},{0,0x7F,0xCF,0x6F},{0,0x7F,0xCF,0x7F},
	{0,0x7F,0xCF,0x8F},{0,0x7F,0xCF,0x9F},{0,0x7F,0xCF,0xAF},{0,0x7F,0xCF,0xBF},
	{0,0x7F,0xCF,0xCF},{0,0x7F,0xCF,0xDF},{0,0x7F,0xCF,0xEF},{0,0x7F,0xCF,0xFF},
	{0,0x7F,0xDF,0x0F},{0,0x7F,0xDF,0x1F},{0,0x7F,0xDF,0x2F},{0,0x7F,0xDF,0x3F},
	{0,0x7F,0xDF,0x4F},{0,0x7F,0xDF,0x5F},{0,0x7F,0xDF,0x6F},{0,0x7F,0xDF,0x7F},
	{0,0x7F,0xDF,0x8F},{0,0x7F,0xDF,0x9F},{0,0x7F,0xDF,0xAF},{0,0x7F,0xDF,0xBF},
	{0,0x7F,0xDF,0xCF},{0,0x7F,0xDF,0xDF},{0,0x7F,0xDF,0xEF},{0,0x7F,0xDF,0xFF},
	{0,0x7F,0xEF,0x0F},{0,0x7F,0xEF,0x1F},{0,0x7F,0xEF,0x2F},{0,0x7F,0xEF,0x3F},
	{0,0x7F,0xEF,0x4F},{0,0x7F,0xEF,0x5F},{0,0x7F,0xEF,0x6F},{0,0x7F,0xEF,0x7F},
	{0,0x7F,0xEF,0x8F},{0,0x7F,0xEF,0x9F},{0,0x7F,0xEF,0xAF},{0,0x7F,0xEF,0xBF},
	{0,0x7F,0xEF,0xCF},{0,0x7F,0xEF,0xDF},{0,0x7F,0xEF,0xEF},{0,0x7F,0xEF,0xFF},
	{0,0x7F,0xFF,0x0F},{0,0x7F,0xFF,0x1F},{0,0x7F,0xFF,0x2F},{0,0x7F,0xFF,0x3F},
	{0,0x7F,0xFF,0x4F},{0,0x7F,0xFF,0x5F},{0,0x7F,0xFF,0x6F},{0,0x7F,0xFF,0x7F},
	{0,0x7F,0xFF,0x8F},{0,0x7F,0xFF,0x9F},{0,0x7F,0xFF,0xAF},{0,0x7F,0xFF,0xBF},
	{0,0x7F,0xFF,0xCF},{0,0x7F,0xFF,0xDF},{0,0x7F,0xFF,0xEF},{0,0x7F,0xFF,0xFF},
	{0,0x8F,0x0F,0x0F},{0,0x8F,0x0F,0x1F},{0,0x8F,0x0F,0x2F},{0,0x8F,0x0F,0x3F},
	{0,0x8F,0x0F,0x4F},{0,0x8F,0x0F,0x5F},{0,0x8F,0x0F,0x6F},{0,0x8F,0x0F,0x7F},
	{0,0x8F,0x0F,0x8F},{0,0x8F,0x0F,0x9F},{0,0x8F,0x0F,0xAF},{0,0x8F,0x0F,0xBF},
	{0,0x8F,0x0F,0xCF},{0,0x8F,0x0F,0xDF},{0,0x8F,0x0F,0xEF},{0,0x8F,0x0F,0xFF},
	{0,0x8F,0x1F,0x0F},{0,0x8F,0x1F,0x1F},{0,0x8F,0x1F,0x2F},{0,0x8F,0x1F,0x3F},
	{0,0x8F,0x1F,0x4F},{0,0x8F,0x1F,0x5F},{0,0x8F,0x1F,0x6F},{0,0x8F,0x1F,0x7F},
	{0,0x8F,0x1F,0x8F},{0,0x8F,0x1F,0x9F},{0,0x8F,0x1F,0xAF},{0,0x8F,0x1F,0xBF},
	{0,0x8F,0x1F,0xCF},{0,0x8F,0x1F,0xDF},{0,0x8F,0x1F,0xEF},{0,0x8F,0x1F,0xFF},
	{0,0x8F,0x2F,0x0F},{0,0x8F,0x2F,0x1F},{0,0x8F,0x2F,0x2F},{0,0x8F,0x2F,0x3F},
	{0,0x8F,0x2F,0x4F},{0,0x8F,0x2F,0x5F},{0,0x8F,0x2F,0x6F},{0,0x8F,0x2F,0x7F},
	{0,0x8F,0x2F,0x8F},{0,0x8F,0x2F,0x9F},{0,0x8F,0x2F,0xAF},{0,0x8F,0x2F,0xBF},
	{0,0x8F,0x2F,0xCF},{0,0x8F,0x2F,0xDF},{0,0x8F,0x2F,0xEF},{0,0x8F,0x2F,0xFF},
	{0,0x8F,0x3F,0x0F},{0,0x8F,0x3F,0x1F},{0,0x8F,0x3F,0x2F},{0,0x8F,0x3F,0x3F},
	{0,0x8F,0x3F,0x4F},{0,0x8F,0x3F,0x5F},{0,0x8F,0x3F,0x6F},{0,0x8F,0x3F,0x7F},
	{0,0x8F,0x3F,0x8F},{0,0x8F,0x3F,0x9F},{0,0x8F,0x3F,0xAF},{0,0x8F,0x3F,0xBF},
	{0,0x8F,0x3F,0xCF},{0,0x8F,0x3F,0xDF},{0,0x8F,0x3F,0xEF},{0,0x8F,0x3F,0xFF},
	{0,0x8F,0x4F,0x0F},{0,0x8F,0x4F,0x1F},{0,0x8F,0x4F,0x2F},{0,0x8F,0x4F,0x3F},
	{0,0x8F,0x4F,0x4F},{0,0x8F,0x4F,0x5F},{0,0x8F,0x4F,0x6F},{0,0x8F,0x4F,0x7F},
	{0,0x8F,0x4F,0x8F},{0,0x8F,0x4F,0x9F},{0,0x8F,0x4F,0xAF},{0,0x8F,0x4F,0xBF},
	{0,0x8F,0x4F,0xCF},{0,0x8F,0x4F,0xDF},{0,0x8F,0x4F,0xEF},{0,0x8F,0x4F,0xFF},
	{0,0x8F,0x5F,0x0F},{0,0x8F,0x5F,0x1F},{0,0x8F,0x5F,0x2F},{0,0x8F,0x5F,0x3F},
	{0,0x8F,0x5F,0x4F},{0,0x8F,0x5F,0x5F},{0,0x8F,0x5F,0x6F},{0,0x8F,0x5F,0x7F},
	{0,0x8F,0x5F,0x8F},{0,0x8F,0x5F,0x9F},{0,0x8F,0x5F,0xAF},{0,0x8F,0x5F,0xBF},
	{0,0x8F,0x5F,0xCF},{0,0x8F,0x5F,0xDF},{0,0x8F,0x5F,0xEF},{0,0x8F,0x5F,0xFF},
	{0,0x8F,0x6F,0x0F},{0,0x8F,0x6F,0x1F},{0,0x8F,0x6F,0x2F},{0,0x8F,0x6F,0x3F},
	{0,0x8F,0x6F,0x4F},{0,0x8F,0x6F,0x5F},{0,0x8F,0x6F,0x6F},{0,0x8F,0x6F,0x7F},
	{0,0x8F,0x6F,0x8F},{0,0x8F,0x6F,0x9F},{0,0x8F,0x6F,0xAF},{0,0x8F,0x6F,0xBF},
	{0,0x8F,0x6F,0xCF},{0,0x8F,0x6F,0xDF},{0,0x8F,0x6F,0xEF},{0,0x8F,0x6F,0xFF},
	{0,0x8F,0x7F,0x0F},{0,0x8F,0x7F,0x1F},{0,0x8F,0x7F,0x2F},{0,0x8F,0x7F,0x3F},
	{0,0x8F,0x7F,0x4F},{0,0x8F,0x7F,0x5F},{0,0x8F,0x7F,0x6F},{0,0x8F,0x7F,0x7F},
	{0,0x8F,0x7F,0x8F},{0,0x8F,0x7F,0x9F},{0,0x8F,0x7F,0xAF},{0,0x8F,0x7F,0xBF},
	{0,0x8F,0x7F,0xCF},{0,0x8F,0x7F,0xDF},{0,0x8F,0x7F,0xEF},{0,0x8F,0x7F,0xFF},
	{0,0x8F,0x8F,0x0F},{0,0x8F,0x8F,0x1F},{0,0x8F,0x8F,0x2F},{0,0x8F,0x8F,0x3F},
	{0,0x8F,0x8F,0x4F},{0,0x8F,0x8F,0x5F},{0,0x8F,0x8F,0x6F},{0,0x8F,0x8F,0x7F},
	{0,0x8F,0x8F,0x8F},{0,0x8F,0x8F,0x9F},{0,0x8F,0x8F,0xAF},{0,0x8F,0x8F,0xBF},
	{0,0x8F,0x8F,0xCF},{0,0x8F,0x8F,0xDF},{0,0x8F,0x8F,0xEF},{0,0x8F,0x8F,0xFF},
	{0,0x8F,0x9F,0x0F},{0,0x8F,0x9F,0x1F},{0,0x8F,0x9F,0x2F},{0,0x8F,0x9F,0x3F},
	{0,0x8F,0x9F,0x4F},{0,0x8F,0x9F,0x5F},{0,0x8F,0x9F,0x6F},{0,0x8F,0x9F,0x7F},
	{0,0x8F,0x9F,0x8F},{0,0x8F,0x9F,0x9F},{0,0x8F,0x9F,0xAF},{0,0x8F,0x9F,0xBF},
	{0,0x8F,0x9F,0xCF},{0,0x8F,0x9F,0xDF},{0,0x8F,0x9F,0xEF},{0,0x8F,0x9F,0xFF},
	{0,0x8F,0xAF,0x0F},{0,0x8F,0xAF,0x1F},{0,0x8F,0xAF,0x2F},{0,0x8F,0xAF,0x3F},
	{0,0x8F,0xAF,0x4F},{0,0x8F,0xAF,0x5F},{0,0x8F,0xAF,0x6F},{0,0x8F,0xAF,0x7F},
	{0,0x8F,0xAF,0x8F},{0,0x8F,0xAF,0x9F},{0,0x8F,0xAF,0xAF},{0,0x8F,0xAF,0xBF},
	{0,0x8F,0xAF,0xCF},{0,0x8F,0xAF,0xDF},{0,0x8F,0xAF,0xEF},{0,0x8F,0xAF,0xFF},
	{0,0x8F,0xBF,0x0F},{0,0x8F,0xBF,0x1F},{0,0x8F,0xBF,0x2F},{0,0x8F,0xBF,0x3F},
	{0,0x8F,0xBF,0x4F},{0,0x8F,0xBF,0x5F},{0,0x8F,0xBF,0x6F},{0,0x8F,0xBF,0x7F},
	{0,0x8F,0xBF,0x8F},{0,0x8F,0xBF,0x9F},{0,0x8F,0xBF,0xAF},{0,0x8F,0xBF,0xBF},
	{0,0x8F,0xBF,0xCF},{0,0x8F,0xBF,0xDF},{0,0x8F,0xBF,0xEF},{0,0x8F,0xBF,0xFF},
	{0,0x8F,0xCF,0x0F},{0,0x8F,0xCF,0x1F},{0,0x8F,0xCF,0x2F},{0,0x8F,0xCF,0x3F},
	{0,0x8F,0xCF,0x4F},{0,0x8F,0xCF,0x5F},{0,0x8F,0xCF,0x6F},{0,0x8F,0xCF,0x7F},
	{0,0x8F,0xCF,0x8F},{0,0x8F,0xCF,0x9F},{0,0x8F,0xCF,0xAF},{0,0x8F,0xCF,0xBF},
	{0,0x8F,0xCF,0xCF},{0,0x8F,0xCF,0xDF},{0,0x8F,0xCF,0xEF},{0,0x8F,0xCF,0xFF},
	{0,0x8F,0xDF,0x0F},{0,0x8F,0xDF,0x1F},{0,0x8F,0xDF,0x2F},{0,0x8F,0xDF,0x3F},
	{0,0x8F,0xDF,0x4F},{0,0x8F,0xDF,0x5F},{0,0x8F,0xDF,0x6F},{0,0x8F,0xDF,0x7F},
	{0,0x8F,0xDF,0x8F},{0,0x8F,0xDF,0x9F},{0,0x8F,0xDF,0xAF},{0,0x8F,0xDF,0xBF},
	{0,0x8F,0xDF,0xCF},{0,0x8F,0xDF,0xDF},{0,0x8F,0xDF,0xEF},{0,0x8F,0xDF,0xFF},
	{0,0x8F,0xEF,0x0F},{0,0x8F,0xEF,0x1F},{0,0x8F,0xEF,0x2F},{0,0x8F,0xEF,0x3F},
	{0,0x8F,0xEF,0x4F},{0,0x8F,0xEF,0x5F},{0,0x8F,0xEF,0x6F},{0,0x8F,0xEF,0x7F},
	{0,0x8F,0xEF,0x8F},{0,0x8F,0xEF,0x9F},{0,0x8F,0xEF,0xAF},{0,0x8F,0xEF,0xBF},
	{0,0x8F,0xEF,0xCF},{0,0x8F,0xEF,0xDF},{0,0x8F,0xEF,0xEF},{0,0x8F,0xEF,0xFF},
	{0,0x8F,0xFF,0x0F},{0,0x8F,0xFF,0x1F},{0,0x8F,0xFF,0x2F},{0,0x8F,0xFF,0x3F},
	{0,0x8F,0xFF,0x4F},{0,0x8F,0xFF,0x5F},{0,0x8F,0xFF,0x6F},{0,0x8F,0xFF,0x7F},
	{0,0x8F,0xFF,0x8F},{0,0x8F,0xFF,0x9F},{0,0x8F,0xFF,0xAF},{0,0x8F,0xFF,0xBF},
	{0,0x8F,0xFF,0xCF},{0,0x8F,0xFF,0xDF},{0,0x8F,0xFF,0xEF},{0,0x8F,0xFF,0xFF},
	{0,0x9F,0x0F,0x0F},{0,0x9F,0x0F,0x1F},{0,0x9F,0x0F,0x2F},{0,0x9F,0x0F,0x3F},
	{0,0x9F,0x0F,0x4F},{0,0x9F,0x0F,0x5F},{0,0x9F,0x0F,0x6F},{0,0x9F,0x0F,0x7F},
	{0,0x9F,0x0F,0x8F},{0,0x9F,0x0F,0x9F},{0,0x9F,0x0F,0xAF},{0,0x9F,0x0F,0xBF},
	{0,0x9F,0x0F,0xCF},{0,0x9F,0x0F,0xDF},{0,0x9F,0x0F,0xEF},{0,0x9F,0x0F,0xFF},
	{0,0x9F,0x1F,0x0F},{0,0x9F,0x1F,0x1F},{0,0x9F,0x1F,0x2F},{0,0x9F,0x1F,0x3F},
	{0,0x9F,0x1F,0x4F},{0,0x9F,0x1F,0x5F},{0,0x9F,0x1F,0x6F},{0,0x9F,0x1F,0x7F},
	{0,0x9F,0x1F,0x8F},{0,0x9F,0x1F,0x9F},{0,0x9F,0x1F,0xAF},{0,0x9F,0x1F,0xBF},
	{0,0x9F,0x1F,0xCF},{0,0x9F,0x1F,0xDF},{0,0x9F,0x1F,0xEF},{0,0x9F,0x1F,0xFF},
	{0,0x9F,0x2F,0x0F},{0,0x9F,0x2F,0x1F},{0,0x9F,0x2F,0x2F},{0,0x9F,0x2F,0x3F},
	{0,0x9F,0x2F,0x4F},{0,0x9F,0x2F,0x5F},{0,0x9F,0x2F,0x6F},{0,0x9F,0x2F,0x7F},
	{0,0x9F,0x2F,0x8F},{0,0x9F,0x2F,0x9F},{0,0x9F,0x2F,0xAF},{0,0x9F,0x2F,0xBF},
	{0,0x9F,0x2F,0xCF},{0,0x9F,0x2F,0xDF},{0,0x9F,0x2F,0xEF},{0,0x9F,0x2F,0xFF},
	{0,0x9F,0x3F,0x0F},{0,0x9F,0x3F,0x1F},{0,0x9F,0x3F,0x2F},{0,0x9F,0x3F,0x3F},
	{0,0x9F,0x3F,0x4F},{0,0x9F,0x3F,0x5F},{0,0x9F,0x3F,0x6F},{0,0x9F,0x3F,0x7F},
	{0,0x9F,0x3F,0x8F},{0,0x9F,0x3F,0x9F},{0,0x9F,0x3F,0xAF},{0,0x9F,0x3F,0xBF},
	{0,0x9F,0x3F,0xCF},{0,0x9F,0x3F,0xDF},{0,0x9F,0x3F,0xEF},{0,0x9F,0x3F,0xFF},
	{0,0x9F,0x4F,0x0F},{0,0x9F,0x4F,0x1F},{0,0x9F,0x4F,0x2F},{0,0x9F,0x4F,0x3F},
	{0,0x9F,0x4F,0x4F},{0,0x9F,0x4F,0x5F},{0,0x9F,0x4F,0x6F},{0,0x9F,0x4F,0x7F},
	{0,0x9F,0x4F,0x8F},{0,0x9F,0x4F,0x9F},{0,0x9F,0x4F,0xAF},{0,0x9F,0x4F,0xBF},
	{0,0x9F,0x4F,0xCF},{0,0x9F,0x4F,0xDF},{0,0x9F,0x4F,0xEF},{0,0x9F,0x4F,0xFF},
	{0,0x9F,0x5F,0x0F},{0,0x9F,0x5F,0x1F},{0,0x9F,0x5F,0x2F},{0,0x9F,0x5F,0x3F},
	{0,0x9F,0x5F,0x4F},{0,0x9F,0x5F,0x5F},{0,0x9F,0x5F,0x6F},{0,0x9F,0x5F,0x7F},
	{0,0x9F,0x5F,0x8F},{0,0x9F,0x5F,0x9F},{0,0x9F,0x5F,0xAF},{0,0x9F,0x5F,0xBF},
	{0,0x9F,0x5F,0xCF},{0,0x9F,0x5F,0xDF},{0,0x9F,0x5F,0xEF},{0,0x9F,0x5F,0xFF},
	{0,0x9F,0x6F,0x0F},{0,0x9F,0x6F,0x1F},{0,0x9F,0x6F,0x2F},{0,0x9F,0x6F,0x3F},
	{0,0x9F,0x6F,0x4F},{0,0x9F,0x6F,0x5F},{0,0x9F,0x6F,0x6F},{0,0x9F,0x6F,0x7F},
	{0,0x9F,0x6F,0x8F},{0,0x9F,0x6F,0x9F},{0,0x9F,0x6F,0xAF},{0,0x9F,0x6F,0xBF},
	{0,0x9F,0x6F,0xCF},{0,0x9F,0x6F,0xDF},{0,0x9F,0x6F,0xEF},{0,0x9F,0x6F,0xFF},
	{0,0x9F,0x7F,0x0F},{0,0x9F,0x7F,0x1F},{0,0x9F,0x7F,0x2F},{0,0x9F,0x7F,0x3F},
	{0,0x9F,0x7F,0x4F},{0,0x9F,0x7F,0x5F},{0,0x9F,0x7F,0x6F},{0,0x9F,0x7F,0x7F},
	{0,0x9F,0x7F,0x8F},{0,0x9F,0x7F,0x9F},{0,0x9F,0x7F,0xAF},{0,0x9F,0x7F,0xBF},
	{0,0x9F,0x7F,0xCF},{0,0x9F,0x7F,0xDF},{0,0x9F,0x7F,0xEF},{0,0x9F,0x7F,0xFF},
	{0,0x9F,0x8F,0x0F},{0,0x9F,0x8F,0x1F},{0,0x9F,0x8F,0x2F},{0,0x9F,0x8F,0x3F},
	{0,0x9F,0x8F,0x4F},{0,0x9F,0x8F,0x5F},{0,0x9F,0x8F,0x6F},{0,0x9F,0x8F,0x7F},
	{0,0x9F,0x8F,0x8F},{0,0x9F,0x8F,0x9F},{0,0x9F,0x8F,0xAF},{0,0x9F,0x8F,0xBF},
	{0,0x9F,0x8F,0xCF},{0,0x9F,0x8F,0xDF},{0,0x9F,0x8F,0xEF},{0,0x9F,0x8F,0xFF},
	{0,0x9F,0x9F,0x0F},{0,0x9F,0x9F,0x1F},{0,0x9F,0x9F,0x2F},{0,0x9F,0x9F,0x3F},
	{0,0x9F,0x9F,0x4F},{0,0x9F,0x9F,0x5F},{0,0x9F,0x9F,0x6F},{0,0x9F,0x9F,0x7F},
	{0,0x9F,0x9F,0x8F},{0,0x9F,0x9F,0x9F},{0,0x9F,0x9F,0xAF},{0,0x9F,0x9F,0xBF},
	{0,0x9F,0x9F,0xCF},{0,0x9F,0x9F,0xDF},{0,0x9F,0x9F,0xEF},{0,0x9F,0x9F,0xFF},
	{0,0x9F,0xAF,0x0F},{0,0x9F,0xAF,0x1F},{0,0x9F,0xAF,0x2F},{0,0x9F,0xAF,0x3F},
	{0,0x9F,0xAF,0x4F},{0,0x9F,0xAF,0x5F},{0,0x9F,0xAF,0x6F},{0,0x9F,0xAF,0x7F},
	{0,0x9F,0xAF,0x8F},{0,0x9F,0xAF,0x9F},{0,0x9F,0xAF,0xAF},{0,0x9F,0xAF,0xBF},
	{0,0x9F,0xAF,0xCF},{0,0x9F,0xAF,0xDF},{0,0x9F,0xAF,0xEF},{0,0x9F,0xAF,0xFF},
	{0,0x9F,0xBF,0x0F},{0,0x9F,0xBF,0x1F},{0,0x9F,0xBF,0x2F},{0,0x9F,0xBF,0x3F},
	{0,0x9F,0xBF,0x4F},{0,0x9F,0xBF,0x5F},{0,0x9F,0xBF,0x6F},{0,0x9F,0xBF,0x7F},
	{0,0x9F,0xBF,0x8F},{0,0x9F,0xBF,0x9F},{0,0x9F,0xBF,0xAF},{0,0x9F,0xBF,0xBF},
	{0,0x9F,0xBF,0xCF},{0,0x9F,0xBF,0xDF},{0,0x9F,0xBF,0xEF},{0,0x9F,0xBF,0xFF},
	{0,0x9F,0xCF,0x0F},{0,0x9F,0xCF,0x1F},{0,0x9F,0xCF,0x2F},{0,0x9F,0xCF,0x3F},
	{0,0x9F,0xCF,0x4F},{0,0x9F,0xCF,0x5F},{0,0x9F,0xCF,0x6F},{0,0x9F,0xCF,0x7F},
	{0,0x9F,0xCF,0x8F},{0,0x9F,0xCF,0x9F},{0,0x9F,0xCF,0xAF},{0,0x9F,0xCF,0xBF},
	{0,0x9F,0xCF,0xCF},{0,0x9F,0xCF,0xDF},{0,0x9F,0xCF,0xEF},{0,0x9F,0xCF,0xFF},
	{0,0x9F,0xDF,0x0F},{0,0x9F,0xDF,0x1F},{0,0x9F,0xDF,0x2F},{0,0x9F,0xDF,0x3F},
	{0,0x9F,0xDF,0x4F},{0,0x9F,0xDF,0x5F},{0,0x9F,0xDF,0x6F},{0,0x9F,0xDF,0x7F},
	{0,0x9F,0xDF,0x8F},{0,0x9F,0xDF,0x9F},{0,0x9F,0xDF,0xAF},{0,0x9F,0xDF,0xBF},
	{0,0x9F,0xDF,0xCF},{0,0x9F,0xDF,0xDF},{0,0x9F,0xDF,0xEF},{0,0x9F,0xDF,0xFF},
	{0,0x9F,0xEF,0x0F},{0,0x9F,0xEF,0x1F},{0,0x9F,0xEF,0x2F},{0,0x9F,0xEF,0x3F},
	{0,0x9F,0xEF,0x4F},{0,0x9F,0xEF,0x5F},{0,0x9F,0xEF,0x6F},{0,0x9F,0xEF,0x7F},
	{0,0x9F,0xEF,0x8F},{0,0x9F,0xEF,0x9F},{0,0x9F,0xEF,0xAF},{0,0x9F,0xEF,0xBF},
	{0,0x9F,0xEF,0xCF},{0,0x9F,0xEF,0xDF},{0,0x9F,0xEF,0xEF},{0,0x9F,0xEF,0xFF},
	{0,0x9F,0xFF,0x0F},{0,0x9F,0xFF,0x1F},{0,0x9F,0xFF,0x2F},{0,0x9F,0xFF,0x3F},
	{0,0x9F,0xFF,0x4F},{0,0x9F,0xFF,0x5F},{0,0x9F,0xFF,0x6F},{0,0x9F,0xFF,0x7F},
	{0,0x9F,0xFF,0x8F},{0,0x9F,0xFF,0x9F},{0,0x9F,0xFF,0xAF},{0,0x9F,0xFF,0xBF},
	{0,0x9F,0xFF,0xCF},{0,0x9F,0xFF,0xDF},{0,0x9F,0xFF,0xEF},{0,0x9F,0xFF,0xFF},
	{0,0xAF,0x0F,0x0F},{0,0xAF,0x0F,0x1F},{0,0xAF,0x0F,0x2F},{0,0xAF,0x0F,0x3F},
	{0,0xAF,0x0F,0x4F},{0,0xAF,0x0F,0x5F},{0,0xAF,0x0F,0x6F},{0,0xAF,0x0F,0x7F},
	{0,0xAF,0x0F,0x8F},{0,0xAF,0x0F,0x9F},{0,0xAF,0x0F,0xAF},{0,0xAF,0x0F,0xBF},
	{0,0xAF,0x0F,0xCF},{0,0xAF,0x0F,0xDF},{0,0xAF,0x0F,0xEF},{0,0xAF,0x0F,0xFF},
	{0,0xAF,0x1F,0x0F},{0,0xAF,0x1F,0x1F},{0,0xAF,0x1F,0x2F},{0,0xAF,0x1F,0x3F},
	{0,0xAF,0x1F,0x4F},{0,0xAF,0x1F,0x5F},{0,0xAF,0x1F,0x6F},{0,0xAF,0x1F,0x7F},
	{0,0xAF,0x1F,0x8F},{0,0xAF,0x1F,0x9F},{0,0xAF,0x1F,0xAF},{0,0xAF,0x1F,0xBF},
	{0,0xAF,0x1F,0xCF},{0,0xAF,0x1F,0xDF},{0,0xAF,0x1F,0xEF},{0,0xAF,0x1F,0xFF},
	{0,0xAF,0x2F,0x0F},{0,0xAF,0x2F,0x1F},{0,0xAF,0x2F,0x2F},{0,0xAF,0x2F,0x3F},
	{0,0xAF,0x2F,0x4F},{0,0xAF,0x2F,0x5F},{0,0xAF,0x2F,0x6F},{0,0xAF,0x2F,0x7F},
	{0,0xAF,0x2F,0x8F},{0,0xAF,0x2F,0x9F},{0,0xAF,0x2F,0xAF},{0,0xAF,0x2F,0xBF},
	{0,0xAF,0x2F,0xCF},{0,0xAF,0x2F,0xDF},{0,0xAF,0x2F,0xEF},{0,0xAF,0x2F,0xFF},
	{0,0xAF,0x3F,0x0F},{0,0xAF,0x3F,0x1F},{0,0xAF,0x3F,0x2F},{0,0xAF,0x3F,0x3F},
	{0,0xAF,0x3F,0x4F},{0,0xAF,0x3F,0x5F},{0,0xAF,0x3F,0x6F},{0,0xAF,0x3F,0x7F},
	{0,0xAF,0x3F,0x8F},{0,0xAF,0x3F,0x9F},{0,0xAF,0x3F,0xAF},{0,0xAF,0x3F,0xBF},
	{0,0xAF,0x3F,0xCF},{0,0xAF,0x3F,0xDF},{0,0xAF,0x3F,0xEF},{0,0xAF,0x3F,0xFF},
	{0,0xAF,0x4F,0x0F},{0,0xAF,0x4F,0x1F},{0,0xAF,0x4F,0x2F},{0,0xAF,0x4F,0x3F},
	{0,0xAF,0x4F,0x4F},{0,0xAF,0x4F,0x5F},{0,0xAF,0x4F,0x6F},{0,0xAF,0x4F,0x7F},
	{0,0xAF,0x4F,0x8F},{0,0xAF,0x4F,0x9F},{0,0xAF,0x4F,0xAF},{0,0xAF,0x4F,0xBF},
	{0,0xAF,0x4F,0xCF},{0,0xAF,0x4F,0xDF},{0,0xAF,0x4F,0xEF},{0,0xAF,0x4F,0xFF},
	{0,0xAF,0x5F,0x0F},{0,0xAF,0x5F,0x1F},{0,0xAF,0x5F,0x2F},{0,0xAF,0x5F,0x3F},
	{0,0xAF,0x5F,0x4F},{0,0xAF,0x5F,0x5F},{0,0xAF,0x5F,0x6F},{0,0xAF,0x5F,0x7F},
	{0,0xAF,0x5F,0x8F},{0,0xAF,0x5F,0x9F},{0,0xAF,0x5F,0xAF},{0,0xAF,0x5F,0xBF},
	{0,0xAF,0x5F,0xCF},{0,0xAF,0x5F,0xDF},{0,0xAF,0x5F,0xEF},{0,0xAF,0x5F,0xFF},
	{0,0xAF,0x6F,0x0F},{0,0xAF,0x6F,0x1F},{0,0xAF,0x6F,0x2F},{0,0xAF,0x6F,0x3F},
	{0,0xAF,0x6F,0x4F},{0,0xAF,0x6F,0x5F},{0,0xAF,0x6F,0x6F},{0,0xAF,0x6F,0x7F},
	{0,0xAF,0x6F,0x8F},{0,0xAF,0x6F,0x9F},{0,0xAF,0x6F,0xAF},{0,0xAF,0x6F,0xBF},
	{0,0xAF,0x6F,0xCF},{0,0xAF,0x6F,0xDF},{0,0xAF,0x6F,0xEF},{0,0xAF,0x6F,0xFF},
	{0,0xAF,0x7F,0x0F},{0,0xAF,0x7F,0x1F},{0,0xAF,0x7F,0x2F},{0,0xAF,0x7F,0x3F},
	{0,0xAF,0x7F,0x4F},{0,0xAF,0x7F,0x5F},{0,0xAF,0x7F,0x6F},{0,0xAF,0x7F,0x7F},
	{0,0xAF,0x7F,0x8F},{0,0xAF,0x7F,0x9F},{0,0xAF,0x7F,0xAF},{0,0xAF,0x7F,0xBF},
	{0,0xAF,0x7F,0xCF},{0,0xAF,0x7F,0xDF},{0,0xAF,0x7F,0xEF},{0,0xAF,0x7F,0xFF},
	{0,0xAF,0x8F,0x0F},{0,0xAF,0x8F,0x1F},{0,0xAF,0x8F,0x2F},{0,0xAF,0x8F,0x3F},
	{0,0xAF,0x8F,0x4F},{0,0xAF,0x8F,0x5F},{0,0xAF,0x8F,0x6F},{0,0xAF,0x8F,0x7F},
	{0,0xAF,0x8F,0x8F},{0,0xAF,0x8F,0x9F},{0,0xAF,0x8F,0xAF},{0,0xAF,0x8F,0xBF},
	{0,0xAF,0x8F,0xCF},{0,0xAF,0x8F,0xDF},{0,0xAF,0x8F,0xEF},{0,0xAF,0x8F,0xFF},
	{0,0xAF,0x9F,0x0F},{0,0xAF,0x9F,0x1F},{0,0xAF,0x9F,0x2F},{0,0xAF,0x9F,0x3F},
	{0,0xAF,0x9F,0x4F},{0,0xAF,0x9F,0x5F},{0,0xAF,0x9F,0x6F},{0,0xAF,0x9F,0x7F},
	{0,0xAF,0x9F,0x8F},{0,0xAF,0x9F,0x9F},{0,0xAF,0x9F,0xAF},{0,0xAF,0x9F,0xBF},
	{0,0xAF,0x9F,0xCF},{0,0xAF,0x9F,0xDF},{0,0xAF,0x9F,0xEF},{0,0xAF,0x9F,0xFF},
	{0,0xAF,0xAF,0x0F},{0,0xAF,0xAF,0x1F},{0,0xAF,0xAF,0x2F},{0,0xAF,0xAF,0x3F},
	{0,0xAF,0xAF,0x4F},{0,0xAF,0xAF,0x5F},{0,0xAF,0xAF,0x6F},{0,0xAF,0xAF,0x7F},
	{0,0xAF,0xAF,0x8F},{0,0xAF,0xAF,0x9F},{0,0xAF,0xAF,0xAF},{0,0xAF,0xAF,0xBF},
	{0,0xAF,0xAF,0xCF},{0,0xAF,0xAF,0xDF},{0,0xAF,0xAF,0xEF},{0,0xAF,0xAF,0xFF},
	{0,0xAF,0xBF,0x0F},{0,0xAF,0xBF,0x1F},{0,0xAF,0xBF,0x2F},{0,0xAF,0xBF,0x3F},
	{0,0xAF,0xBF,0x4F},{0,0xAF,0xBF,0x5F},{0,0xAF,0xBF,0x6F},{0,0xAF,0xBF,0x7F},
	{0,0xAF,0xBF,0x8F},{0,0xAF,0xBF,0x9F},{0,0xAF,0xBF,0xAF},{0,0xAF,0xBF,0xBF},
	{0,0xAF,0xBF,0xCF},{0,0xAF,0xBF,0xDF},{0,0xAF,0xBF,0xEF},{0,0xAF,0xBF,0xFF},
	{0,0xAF,0xCF,0x0F},{0,0xAF,0xCF,0x1F},{0,0xAF,0xCF,0x2F},{0,0xAF,0xCF,0x3F},
	{0,0xAF,0xCF,0x4F},{0,0xAF,0xCF,0x5F},{0,0xAF,0xCF,0x6F},{0,0xAF,0xCF,0x7F},
	{0,0xAF,0xCF,0x8F},{0,0xAF,0xCF,0x9F},{0,0xAF,0xCF,0xAF},{0,0xAF,0xCF,0xBF},
	{0,0xAF,0xCF,0xCF},{0,0xAF,0xCF,0xDF},{0,0xAF,0xCF,0xEF},{0,0xAF,0xCF,0xFF},
	{0,0xAF,0xDF,0x0F},{0,0xAF,0xDF,0x1F},{0,0xAF,0xDF,0x2F},{0,0xAF,0xDF,0x3F},
	{0,0xAF,0xDF,0x4F},{0,0xAF,0xDF,0x5F},{0,0xAF,0xDF,0x6F},{0,0xAF,0xDF,0x7F},
	{0,0xAF,0xDF,0x8F},{0,0xAF,0xDF,0x9F},{0,0xAF,0xDF,0xAF},{0,0xAF,0xDF,0xBF},
	{0,0xAF,0xDF,0xCF},{0,0xAF,0xDF,0xDF},{0,0xAF,0xDF,0xEF},{0,0xAF,0xDF,0xFF},
	{0,0xAF,0xEF,0x0F},{0,0xAF,0xEF,0x1F},{0,0xAF,0xEF,0x2F},{0,0xAF,0xEF,0x3F},
	{0,0xAF,0xEF,0x4F},{0,0xAF,0xEF,0x5F},{0,0xAF,0xEF,0x6F},{0,0xAF,0xEF,0x7F},
	{0,0xAF,0xEF,0x8F},{0,0xAF,0xEF,0x9F},{0,0xAF,0xEF,0xAF},{0,0xAF,0xEF,0xBF},
	{0,0xAF,0xEF,0xCF},{0,0xAF,0xEF,0xDF},{0,0xAF,0xEF,0xEF},{0,0xAF,0xEF,0xFF},
	{0,0xAF,0xFF,0x0F},{0,0xAF,0xFF,0x1F},{0,0xAF,0xFF,0x2F},{0,0xAF,0xFF,0x3F},
	{0,0xAF,0xFF,0x4F},{0,0xAF,0xFF,0x5F},{0,0xAF,0xFF,0x6F},{0,0xAF,0xFF,0x7F},
	{0,0xAF,0xFF,0x8F},{0,0xAF,0xFF,0x9F},{0,0xAF,0xFF,0xAF},{0,0xAF,0xFF,0xBF},
	{0,0xAF,0xFF,0xCF},{0,0xAF,0xFF,0xDF},{0,0xAF,0xFF,0xEF},{0,0xAF,0xFF,0xFF},
	{0,0xBF,0x0F,0x0F},{0,0xBF,0x0F,0x1F},{0,0xBF,0x0F,0x2F},{0,0xBF,0x0F,0x3F},
	{0,0xBF,0x0F,0x4F},{0,0xBF,0x0F,0x5F},{0,0xBF,0x0F,0x6F},{0,0xBF,0x0F,0x7F},
	{0,0xBF,0x0F,0x8F},{0,0xBF,0x0F,0x9F},{0,0xBF,0x0F,0xAF},{0,0xBF,0x0F,0xBF},
	{0,0xBF,0x0F,0xCF},{0,0xBF,0x0F,0xDF},{0,0xBF,0x0F,0xEF},{0,0xBF,0x0F,0xFF},
	{0,0xBF,0x1F,0x0F},{0,0xBF,0x1F,0x1F},{0,0xBF,0x1F,0x2F},{0,0xBF,0x1F,0x3F},
	{0,0xBF,0x1F,0x4F},{0,0xBF,0x1F,0x5F},{0,0xBF,0x1F,0x6F},{0,0xBF,0x1F,0x7F},
	{0,0xBF,0x1F,0x8F},{0,0xBF,0x1F,0x9F},{0,0xBF,0x1F,0xAF},{0,0xBF,0x1F,0xBF},
	{0,0xBF,0x1F,0xCF},{0,0xBF,0x1F,0xDF},{0,0xBF,0x1F,0xEF},{0,0xBF,0x1F,0xFF},
	{0,0xBF,0x2F,0x0F},{0,0xBF,0x2F,0x1F},{0,0xBF,0x2F,0x2F},{0,0xBF,0x2F,0x3F},
	{0,0xBF,0x2F,0x4F},{0,0xBF,0x2F,0x5F},{0,0xBF,0x2F,0x6F},{0,0xBF,0x2F,0x7F},
	{0,0xBF,0x2F,0x8F},{0,0xBF,0x2F,0x9F},{0,0xBF,0x2F,0xAF},{0,0xBF,0x2F,0xBF},
	{0,0xBF,0x2F,0xCF},{0,0xBF,0x2F,0xDF},{0,0xBF,0x2F,0xEF},{0,0xBF,0x2F,0xFF},
	{0,0xBF,0x3F,0x0F},{0,0xBF,0x3F,0x1F},{0,0xBF,0x3F,0x2F},{0,0xBF,0x3F,0x3F},
	{0,0xBF,0x3F,0x4F},{0,0xBF,0x3F,0x5F},{0,0xBF,0x3F,0x6F},{0,0xBF,0x3F,0x7F},
	{0,0xBF,0x3F,0x8F},{0,0xBF,0x3F,0x9F},{0,0xBF,0x3F,0xAF},{0,0xBF,0x3F,0xBF},
	{0,0xBF,0x3F,0xCF},{0,0xBF,0x3F,0xDF},{0,0xBF,0x3F,0xEF},{0,0xBF,0x3F,0xFF},
	{0,0xBF,0x4F,0x0F},{0,0xBF,0x4F,0x1F},{0,0xBF,0x4F,0x2F},{0,0xBF,0x4F,0x3F},
	{0,0xBF,0x4F,0x4F},{0,0xBF,0x4F,0x5F},{0,0xBF,0x4F,0x6F},{0,0xBF,0x4F,0x7F},
	{0,0xBF,0x4F,0x8F},{0,0xBF,0x4F,0x9F},{0,0xBF,0x4F,0xAF},{0,0xBF,0x4F,0xBF},
	{0,0xBF,0x4F,0xCF},{0,0xBF,0x4F,0xDF},{0,0xBF,0x4F,0xEF},{0,0xBF,0x4F,0xFF},
	{0,0xBF,0x5F,0x0F},{0,0xBF,0x5F,0x1F},{0,0xBF,0x5F,0x2F},{0,0xBF,0x5F,0x3F},
	{0,0xBF,0x5F,0x4F},{0,0xBF,0x5F,0x5F},{0,0xBF,0x5F,0x6F},{0,0xBF,0x5F,0x7F},
	{0,0xBF,0x5F,0x8F},{0,0xBF,0x5F,0x9F},{0,0xBF,0x5F,0xAF},{0,0xBF,0x5F,0xBF},
	{0,0xBF,0x5F,0xCF},{0,0xBF,0x5F,0xDF},{0,0xBF,0x5F,0xEF},{0,0xBF,0x5F,0xFF},
	{0,0xBF,0x6F,0x0F},{0,0xBF,0x6F,0x1F},{0,0xBF,0x6F,0x2F},{0,0xBF,0x6F,0x3F},
	{0,0xBF,0x6F,0x4F},{0,0xBF,0x6F,0x5F},{0,0xBF,0x6F,0x6F},{0,0xBF,0x6F,0x7F},
	{0,0xBF,0x6F,0x8F},{0,0xBF,0x6F,0x9F},{0,0xBF,0x6F,0xAF},{0,0xBF,0x6F,0xBF},
	{0,0xBF,0x6F,0xCF},{0,0xBF,0x6F,0xDF},{0,0xBF,0x6F,0xEF},{0,0xBF,0x6F,0xFF},
	{0,0xBF,0x7F,0x0F},{0,0xBF,0x7F,0x1F},{0,0xBF,0x7F,0x2F},{0,0xBF,0x7F,0x3F},
	{0,0xBF,0x7F,0x4F},{0,0xBF,0x7F,0x5F},{0,0xBF,0x7F,0x6F},{0,0xBF,0x7F,0x7F},
	{0,0xBF,0x7F,0x8F},{0,0xBF,0x7F,0x9F},{0,0xBF,0x7F,0xAF},{0,0xBF,0x7F,0xBF},
	{0,0xBF,0x7F,0xCF},{0,0xBF,0x7F,0xDF},{0,0xBF,0x7F,0xEF},{0,0xBF,0x7F,0xFF},
	{0,0xBF,0x8F,0x0F},{0,0xBF,0x8F,0x1F},{0,0xBF,0x8F,0x2F},{0,0xBF,0x8F,0x3F},
	{0,0xBF,0x8F,0x4F},{0,0xBF,0x8F,0x5F},{0,0xBF,0x8F,0x6F},{0,0xBF,0x8F,0x7F},
	{0,0xBF,0x8F,0x8F},{0,0xBF,0x8F,0x9F},{0,0xBF,0x8F,0xAF},{0,0xBF,0x8F,0xBF},
	{0,0xBF,0x8F,0xCF},{0,0xBF,0x8F,0xDF},{0,0xBF,0x8F,0xEF},{0,0xBF,0x8F,0xFF},
	{0,0xBF,0x9F,0x0F},{0,0xBF,0x9F,0x1F},{0,0xBF,0x9F,0x2F},{0,0xBF,0x9F,0x3F},
	{0,0xBF,0x9F,0x4F},{0,0xBF,0x9F,0x5F},{0,0xBF,0x9F,0x6F},{0,0xBF,0x9F,0x7F},
	{0,0xBF,0x9F,0x8F},{0,0xBF,0x9F,0x9F},{0,0xBF,0x9F,0xAF},{0,0xBF,0x9F,0xBF},
	{0,0xBF,0x9F,0xCF},{0,0xBF,0x9F,0xDF},{0,0xBF,0x9F,0xEF},{0,0xBF,0x9F,0xFF},
	{0,0xBF,0xAF,0x0F},{0,0xBF,0xAF,0x1F},{0,0xBF,0xAF,0x2F},{0,0xBF,0xAF,0x3F},
	{0,0xBF,0xAF,0x4F},{0,0xBF,0xAF,0x5F},{0,0xBF,0xAF,0x6F},{0,0xBF,0xAF,0x7F},
	{0,0xBF,0xAF,0x8F},{0,0xBF,0xAF,0x9F},{0,0xBF,0xAF,0xAF},{0,0xBF,0xAF,0xBF},
	{0,0xBF,0xAF,0xCF},{0,0xBF,0xAF,0xDF},{0,0xBF,0xAF,0xEF},{0,0xBF,0xAF,0xFF},
	{0,0xBF,0xBF,0x0F},{0,0xBF,0xBF,0x1F},{0,0xBF,0xBF,0x2F},{0,0xBF,0xBF,0x3F},
	{0,0xBF,0xBF,0x4F},{0,0xBF,0xBF,0x5F},{0,0xBF,0xBF,0x6F},{0,0xBF,0xBF,0x7F},
	{0,0xBF,0xBF,0x8F},{0,0xBF,0xBF,0x9F},{0,0xBF,0xBF,0xAF},{0,0xBF,0xBF,0xBF},
	{0,0xBF,0xBF,0xCF},{0,0xBF,0xBF,0xDF},{0,0xBF,0xBF,0xEF},{0,0xBF,0xBF,0xFF},
	{0,0xBF,0xCF,0x0F},{0,0xBF,0xCF,0x1F},{0,0xBF,0xCF,0x2F},{0,0xBF,0xCF,0x3F},
	{0,0xBF,0xCF,0x4F},{0,0xBF,0xCF,0x5F},{0,0xBF,0xCF,0x6F},{0,0xBF,0xCF,0x7F},
	{0,0xBF,0xCF,0x8F},{0,0xBF,0xCF,0x9F},{0,0xBF,0xCF,0xAF},{0,0xBF,0xCF,0xBF},
	{0,0xBF,0xCF,0xCF},{0,0xBF,0xCF,0xDF},{0,0xBF,0xCF,0xEF},{0,0xBF,0xCF,0xFF},
	{0,0xBF,0xDF,0x0F},{0,0xBF,0xDF,0x1F},{0,0xBF,0xDF,0x2F},{0,0xBF,0xDF,0x3F},
	{0,0xBF,0xDF,0x4F},{0,0xBF,0xDF,0x5F},{0,0xBF,0xDF,0x6F},{0,0xBF,0xDF,0x7F},
	{0,0xBF,0xDF,0x8F},{0,0xBF,0xDF,0x9F},{0,0xBF,0xDF,0xAF},{0,0xBF,0xDF,0xBF},
	{0,0xBF,0xDF,0xCF},{0,0xBF,0xDF,0xDF},{0,0xBF,0xDF,0xEF},{0,0xBF,0xDF,0xFF},
	{0,0xBF,0xEF,0x0F},{0,0xBF,0xEF,0x1F},{0,0xBF,0xEF,0x2F},{0,0xBF,0xEF,0x3F},
	{0,0xBF,0xEF,0x4F},{0,0xBF,0xEF,0x5F},{0,0xBF,0xEF,0x6F},{0,0xBF,0xEF,0x7F},
	{0,0xBF,0xEF,0x8F},{0,0xBF,0xEF,0x9F},{0,0xBF,0xEF,0xAF},{0,0xBF,0xEF,0xBF},
	{0,0xBF,0xEF,0xCF},{0,0xBF,0xEF,0xDF},{0,0xBF,0xEF,0xEF},{0,0xBF,0xEF,0xFF},
	{0,0xBF,0xFF,0x0F},{0,0xBF,0xFF,0x1F},{0,0xBF,0xFF,0x2F},{0,0xBF,0xFF,0x3F},
	{0,0xBF,0xFF,0x4F},{0,0xBF,0xFF,0x5F},{0,0xBF,0xFF,0x6F},{0,0xBF,0xFF,0x7F},
	{0,0xBF,0xFF,0x8F},{0,0xBF,0xFF,0x9F},{0,0xBF,0xFF,0xAF},{0,0xBF,0xFF,0xBF},
	{0,0xBF,0xFF,0xCF},{0,0xBF,0xFF,0xDF},{0,0xBF,0xFF,0xEF},{0,0xBF,0xFF,0xFF},
	{0,0xCF,0x0F,0x0F},{0,0xCF,0x0F,0x1F},{0,0xCF,0x0F,0x2F},{0,0xCF,0x0F,0x3F},
	{0,0xCF,0x0F,0x4F},{0,0xCF,0x0F,0x5F},{0,0xCF,0x0F,0x6F},{0,0xCF,0x0F,0x7F},
	{0,0xCF,0x0F,0x8F},{0,0xCF,0x0F,0x9F},{0,0xCF,0x0F,0xAF},{0,0xCF,0x0F,0xBF},
	{0,0xCF,0x0F,0xCF},{0,0xCF,0x0F,0xDF},{0,0xCF,0x0F,0xEF},{0,0xCF,0x0F,0xFF},
	{0,0xCF,0x1F,0x0F},{0,0xCF,0x1F,0x1F},{0,0xCF,0x1F,0x2F},{0,0xCF,0x1F,0x3F},
	{0,0xCF,0x1F,0x4F},{0,0xCF,0x1F,0x5F},{0,0xCF,0x1F,0x6F},{0,0xCF,0x1F,0x7F},
	{0,0xCF,0x1F,0x8F},{0,0xCF,0x1F,0x9F},{0,0xCF,0x1F,0xAF},{0,0xCF,0x1F,0xBF},
	{0,0xCF,0x1F,0xCF},{0,0xCF,0x1F,0xDF},{0,0xCF,0x1F,0xEF},{0,0xCF,0x1F,0xFF},
	{0,0xCF,0x2F,0x0F},{0,0xCF,0x2F,0x1F},{0,0xCF,0x2F,0x2F},{0,0xCF,0x2F,0x3F},
	{0,0xCF,0x2F,0x4F},{0,0xCF,0x2F,0x5F},{0,0xCF,0x2F,0x6F},{0,0xCF,0x2F,0x7F},
	{0,0xCF,0x2F,0x8F},{0,0xCF,0x2F,0x9F},{0,0xCF,0x2F,0xAF},{0,0xCF,0x2F,0xBF},
	{0,0xCF,0x2F,0xCF},{0,0xCF,0x2F,0xDF},{0,0xCF,0x2F,0xEF},{0,0xCF,0x2F,0xFF},
	{0,0xCF,0x3F,0x0F},{0,0xCF,0x3F,0x1F},{0,0xCF,0x3F,0x2F},{0,0xCF,0x3F,0x3F},
	{0,0xCF,0x3F,0x4F},{0,0xCF,0x3F,0x5F},{0,0xCF,0x3F,0x6F},{0,0xCF,0x3F,0x7F},
	{0,0xCF,0x3F,0x8F},{0,0xCF,0x3F,0x9F},{0,0xCF,0x3F,0xAF},{0,0xCF,0x3F,0xBF},
	{0,0xCF,0x3F,0xCF},{0,0xCF,0x3F,0xDF},{0,0xCF,0x3F,0xEF},{0,0xCF,0x3F,0xFF},
	{0,0xCF,0x4F,0x0F},{0,0xCF,0x4F,0x1F},{0,0xCF,0x4F,0x2F},{0,0xCF,0x4F,0x3F},
	{0,0xCF,0x4F,0x4F},{0,0xCF,0x4F,0x5F},{0,0xCF,0x4F,0x6F},{0,0xCF,0x4F,0x7F},
	{0,0xCF,0x4F,0x8F},{0,0xCF,0x4F,0x9F},{0,0xCF,0x4F,0xAF},{0,0xCF,0x4F,0xBF},
	{0,0xCF,0x4F,0xCF},{0,0xCF,0x4F,0xDF},{0,0xCF,0x4F,0xEF},{0,0xCF,0x4F,0xFF},
	{0,0xCF,0x5F,0x0F},{0,0xCF,0x5F,0x1F},{0,0xCF,0x5F,0x2F},{0,0xCF,0x5F,0x3F},
	{0,0xCF,0x5F,0x4F},{0,0xCF,0x5F,0x5F},{0,0xCF,0x5F,0x6F},{0,0xCF,0x5F,0x7F},
	{0,0xCF,0x5F,0x8F},{0,0xCF,0x5F,0x9F},{0,0xCF,0x5F,0xAF},{0,0xCF,0x5F,0xBF},
	{0,0xCF,0x5F,0xCF},{0,0xCF,0x5F,0xDF},{0,0xCF,0x5F,0xEF},{0,0xCF,0x5F,0xFF},
	{0,0xCF,0x6F,0x0F},{0,0xCF,0x6F,0x1F},{0,0xCF,0x6F,0x2F},{0,0xCF,0x6F,0x3F},
	{0,0xCF,0x6F,0x4F},{0,0xCF,0x6F,0x5F},{0,0xCF,0x6F,0x6F},{0,0xCF,0x6F,0x7F},
	{0,0xCF,0x6F,0x8F},{0,0xCF,0x6F,0x9F},{0,0xCF,0x6F,0xAF},{0,0xCF,0x6F,0xBF},
	{0,0xCF,0x6F,0xCF},{0,0xCF,0x6F,0xDF},{0,0xCF,0x6F,0xEF},{0,0xCF,0x6F,0xFF},
	{0,0xCF,0x7F,0x0F},{0,0xCF,0x7F,0x1F},{0,0xCF,0x7F,0x2F},{0,0xCF,0x7F,0x3F},
	{0,0xCF,0x7F,0x4F},{0,0xCF,0x7F,0x5F},{0,0xCF,0x7F,0x6F},{0,0xCF,0x7F,0x7F},
	{0,0xCF,0x7F,0x8F},{0,0xCF,0x7F,0x9F},{0,0xCF,0x7F,0xAF},{0,0xCF,0x7F,0xBF},
	{0,0xCF,0x7F,0xCF},{0,0xCF,0x7F,0xDF},{0,0xCF,0x7F,0xEF},{0,0xCF,0x7F,0xFF},
	{0,0xCF,0x8F,0x0F},{0,0xCF,0x8F,0x1F},{0,0xCF,0x8F,0x2F},{0,0xCF,0x8F,0x3F},
	{0,0xCF,0x8F,0x4F},{0,0xCF,0x8F,0x5F},{0,0xCF,0x8F,0x6F},{0,0xCF,0x8F,0x7F},
	{0,0xCF,0x8F,0x8F},{0,0xCF,0x8F,0x9F},{0,0xCF,0x8F,0xAF},{0,0xCF,0x8F,0xBF},
	{0,0xCF,0x8F,0xCF},{0,0xCF,0x8F,0xDF},{0,0xCF,0x8F,0xEF},{0,0xCF,0x8F,0xFF},
	{0,0xCF,0x9F,0x0F},{0,0xCF,0x9F,0x1F},{0,0xCF,0x9F,0x2F},{0,0xCF,0x9F,0x3F},
	{0,0xCF,0x9F,0x4F},{0,0xCF,0x9F,0x5F},{0,0xCF,0x9F,0x6F},{0,0xCF,0x9F,0x7F},
	{0,0xCF,0x9F,0x8F},{0,0xCF,0x9F,0x9F},{0,0xCF,0x9F,0xAF},{0,0xCF,0x9F,0xBF},
	{0,0xCF,0x9F,0xCF},{0,0xCF,0x9F,0xDF},{0,0xCF,0x9F,0xEF},{0,0xCF,0x9F,0xFF},
	{0,0xCF,0xAF,0x0F},{0,0xCF,0xAF,0x1F},{0,0xCF,0xAF,0x2F},{0,0xCF,0xAF,0x3F},
	{0,0xCF,0xAF,0x4F},{0,0xCF,0xAF,0x5F},{0,0xCF,0xAF,0x6F},{0,0xCF,0xAF,0x7F},
	{0,0xCF,0xAF,0x8F},{0,0xCF,0xAF,0x9F},{0,0xCF,0xAF,0xAF},{0,0xCF,0xAF,0xBF},
	{0,0xCF,0xAF,0xCF},{0,0xCF,0xAF,0xDF},{0,0xCF,0xAF,0xEF},{0,0xCF,0xAF,0xFF},
	{0,0xCF,0xBF,0x0F},{0,0xCF,0xBF,0x1F},{0,0xCF,0xBF,0x2F},{0,0xCF,0xBF,0x3F},
	{0,0xCF,0xBF,0x4F},{0,0xCF,0xBF,0x5F},{0,0xCF,0xBF,0x6F},{0,0xCF,0xBF,0x7F},
	{0,0xCF,0xBF,0x8F},{0,0xCF,0xBF,0x9F},{0,0xCF,0xBF,0xAF},{0,0xCF,0xBF,0xBF},
	{0,0xCF,0xBF,0xCF},{0,0xCF,0xBF,0xDF},{0,0xCF,0xBF,0xEF},{0,0xCF,0xBF,0xFF},
	{0,0xCF,0xCF,0x0F},{0,0xCF,0xCF,0x1F},{0,0xCF,0xCF,0x2F},{0,0xCF,0xCF,0x3F},
	{0,0xCF,0xCF,0x4F},{0,0xCF,0xCF,0x5F},{0,0xCF,0xCF,0x6F},{0,0xCF,0xCF,0x7F},
	{0,0xCF,0xCF,0x8F},{0,0xCF,0xCF,0x9F},{0,0xCF,0xCF,0xAF},{0,0xCF,0xCF,0xBF},
	{0,0xCF,0xCF,0xCF},{0,0xCF,0xCF,0xDF},{0,0xCF,0xCF,0xEF},{0,0xCF,0xCF,0xFF},
	{0,0xCF,0xDF,0x0F},{0,0xCF,0xDF,0x1F},{0,0xCF,0xDF,0x2F},{0,0xCF,0xDF,0x3F},
	{0,0xCF,0xDF,0x4F},{0,0xCF,0xDF,0x5F},{0,0xCF,0xDF,0x6F},{0,0xCF,0xDF,0x7F},
	{0,0xCF,0xDF,0x8F},{0,0xCF,0xDF,0x9F},{0,0xCF,0xDF,0xAF},{0,0xCF,0xDF,0xBF},
	{0,0xCF,0xDF,0xCF},{0,0xCF,0xDF,0xDF},{0,0xCF,0xDF,0xEF},{0,0xCF,0xDF,0xFF},
	{0,0xCF,0xEF,0x0F},{0,0xCF,0xEF,0x1F},{0,0xCF,0xEF,0x2F},{0,0xCF,0xEF,0x3F},
	{0,0xCF,0xEF,0x4F},{0,0xCF,0xEF,0x5F},{0,0xCF,0xEF,0x6F},{0,0xCF,0xEF,0x7F},
	{0,0xCF,0xEF,0x8F},{0,0xCF,0xEF,0x9F},{0,0xCF,0xEF,0xAF},{0,0xCF,0xEF,0xBF},
	{0,0xCF,0xEF,0xCF},{0,0xCF,0xEF,0xDF},{0,0xCF,0xEF,0xEF},{0,0xCF,0xEF,0xFF},
	{0,0xCF,0xFF,0x0F},{0,0xCF,0xFF,0x1F},{0,0xCF,0xFF,0x2F},{0,0xCF,0xFF,0x3F},
	{0,0xCF,0xFF,0x4F},{0,0xCF,0xFF,0x5F},{0,0xCF,0xFF,0x6F},{0,0xCF,0xFF,0x7F},
	{0,0xCF,0xFF,0x8F},{0,0xCF,0xFF,0x9F},{0,0xCF,0xFF,0xAF},{0,0xCF,0xFF,0xBF},
	{0,0xCF,0xFF,0xCF},{0,0xCF,0xFF,0xDF},{0,0xCF,0xFF,0xEF},{0,0xCF,0xFF,0xFF},
	{0,0xDF,0x0F,0x0F},{0,0xDF,0x0F,0x1F},{0,0xDF,0x0F,0x2F},{0,0xDF,0x0F,0x3F},
	{0,0xDF,0x0F,0x4F},{0,0xDF,0x0F,0x5F},{0,0xDF,0x0F,0x6F},{0,0xDF,0x0F,0x7F},
	{0,0xDF,0x0F,0x8F},{0,0xDF,0x0F,0x9F},{0,0xDF,0x0F,0xAF},{0,0xDF,0x0F,0xBF},
	{0,0xDF,0x0F,0xCF},{0,0xDF,0x0F,0xDF},{0,0xDF,0x0F,0xEF},{0,0xDF,0x0F,0xFF},
	{0,0xDF,0x1F,0x0F},{0,0xDF,0x1F,0x1F},{0,0xDF,0x1F,0x2F},{0,0xDF,0x1F,0x3F},
	{0,0xDF,0x1F,0x4F},{0,0xDF,0x1F,0x5F},{0,0xDF,0x1F,0x6F},{0,0xDF,0x1F,0x7F},
	{0,0xDF,0x1F,0x8F},{0,0xDF,0x1F,0x9F},{0,0xDF,0x1F,0xAF},{0,0xDF,0x1F,0xBF},
	{0,0xDF,0x1F,0xCF},{0,0xDF,0x1F,0xDF},{0,0xDF,0x1F,0xEF},{0,0xDF,0x1F,0xFF},
	{0,0xDF,0x2F,0x0F},{0,0xDF,0x2F,0x1F},{0,0xDF,0x2F,0x2F},{0,0xDF,0x2F,0x3F},
	{0,0xDF,0x2F,0x4F},{0,0xDF,0x2F,0x5F},{0,0xDF,0x2F,0x6F},{0,0xDF,0x2F,0x7F},
	{0,0xDF,0x2F,0x8F},{0,0xDF,0x2F,0x9F},{0,0xDF,0x2F,0xAF},{0,0xDF,0x2F,0xBF},
	{0,0xDF,0x2F,0xCF},{0,0xDF,0x2F,0xDF},{0,0xDF,0x2F,0xEF},{0,0xDF,0x2F,0xFF},
	{0,0xDF,0x3F,0x0F},{0,0xDF,0x3F,0x1F},{0,0xDF,0x3F,0x2F},{0,0xDF,0x3F,0x3F},
	{0,0xDF,0x3F,0x4F},{0,0xDF,0x3F,0x5F},{0,0xDF,0x3F,0x6F},{0,0xDF,0x3F,0x7F},
	{0,0xDF,0x3F,0x8F},{0,0xDF,0x3F,0x9F},{0,0xDF,0x3F,0xAF},{0,0xDF,0x3F,0xBF},
	{0,0xDF,0x3F,0xCF},{0,0xDF,0x3F,0xDF},{0,0xDF,0x3F,0xEF},{0,0xDF,0x3F,0xFF},
	{0,0xDF,0x4F,0x0F},{0,0xDF,0x4F,0x1F},{0,0xDF,0x4F,0x2F},{0,0xDF,0x4F,0x3F},
	{0,0xDF,0x4F,0x4F},{0,0xDF,0x4F,0x5F},{0,0xDF,0x4F,0x6F},{0,0xDF,0x4F,0x7F},
	{0,0xDF,0x4F,0x8F},{0,0xDF,0x4F,0x9F},{0,0xDF,0x4F,0xAF},{0,0xDF,0x4F,0xBF},
	{0,0xDF,0x4F,0xCF},{0,0xDF,0x4F,0xDF},{0,0xDF,0x4F,0xEF},{0,0xDF,0x4F,0xFF},
	{0,0xDF,0x5F,0x0F},{0,0xDF,0x5F,0x1F},{0,0xDF,0x5F,0x2F},{0,0xDF,0x5F,0x3F},
	{0,0xDF,0x5F,0x4F},{0,0xDF,0x5F,0x5F},{0,0xDF,0x5F,0x6F},{0,0xDF,0x5F,0x7F},
	{0,0xDF,0x5F,0x8F},{0,0xDF,0x5F,0x9F},{0,0xDF,0x5F,0xAF},{0,0xDF,0x5F,0xBF},
	{0,0xDF,0x5F,0xCF},{0,0xDF,0x5F,0xDF},{0,0xDF,0x5F,0xEF},{0,0xDF,0x5F,0xFF},
	{0,0xDF,0x6F,0x0F},{0,0xDF,0x6F,0x1F},{0,0xDF,0x6F,0x2F},{0,0xDF,0x6F,0x3F},
	{0,0xDF,0x6F,0x4F},{0,0xDF,0x6F,0x5F},{0,0xDF,0x6F,0x6F},{0,0xDF,0x6F,0x7F},
	{0,0xDF,0x6F,0x8F},{0,0xDF,0x6F,0x9F},{0,0xDF,0x6F,0xAF},{0,0xDF,0x6F,0xBF},
	{0,0xDF,0x6F,0xCF},{0,0xDF,0x6F,0xDF},{0,0xDF,0x6F,0xEF},{0,0xDF,0x6F,0xFF},
	{0,0xDF,0x7F,0x0F},{0,0xDF,0x7F,0x1F},{0,0xDF,0x7F,0x2F},{0,0xDF,0x7F,0x3F},
	{0,0xDF,0x7F,0x4F},{0,0xDF,0x7F,0x5F},{0,0xDF,0x7F,0x6F},{0,0xDF,0x7F,0x7F},
	{0,0xDF,0x7F,0x8F},{0,0xDF,0x7F,0x9F},{0,0xDF,0x7F,0xAF},{0,0xDF,0x7F,0xBF},
	{0,0xDF,0x7F,0xCF},{0,0xDF,0x7F,0xDF},{0,0xDF,0x7F,0xEF},{0,0xDF,0x7F,0xFF},
	{0,0xDF,0x8F,0x0F},{0,0xDF,0x8F,0x1F},{0,0xDF,0x8F,0x2F},{0,0xDF,0x8F,0x3F},
	{0,0xDF,0x8F,0x4F},{0,0xDF,0x8F,0x5F},{0,0xDF,0x8F,0x6F},{0,0xDF,0x8F,0x7F},
	{0,0xDF,0x8F,0x8F},{0,0xDF,0x8F,0x9F},{0,0xDF,0x8F,0xAF},{0,0xDF,0x8F,0xBF},
	{0,0xDF,0x8F,0xCF},{0,0xDF,0x8F,0xDF},{0,0xDF,0x8F,0xEF},{0,0xDF,0x8F,0xFF},
	{0,0xDF,0x9F,0x0F},{0,0xDF,0x9F,0x1F},{0,0xDF,0x9F,0x2F},{0,0xDF,0x9F,0x3F},
	{0,0xDF,0x9F,0x4F},{0,0xDF,0x9F,0x5F},{0,0xDF,0x9F,0x6F},{0,0xDF,0x9F,0x7F},
	{0,0xDF,0x9F,0x8F},{0,0xDF,0x9F,0x9F},{0,0xDF,0x9F,0xAF},{0,0xDF,0x9F,0xBF},
	{0,0xDF,0x9F,0xCF},{0,0xDF,0x9F,0xDF},{0,0xDF,0x9F,0xEF},{0,0xDF,0x9F,0xFF},
	{0,0xDF,0xAF,0x0F},{0,0xDF,0xAF,0x1F},{0,0xDF,0xAF,0x2F},{0,0xDF,0xAF,0x3F},
	{0,0xDF,0xAF,0x4F},{0,0xDF,0xAF,0x5F},{0,0xDF,0xAF,0x6F},{0,0xDF,0xAF,0x7F},
	{0,0xDF,0xAF,0x8F},{0,0xDF,0xAF,0x9F},{0,0xDF,0xAF,0xAF},{0,0xDF,0xAF,0xBF},
	{0,0xDF,0xAF,0xCF},{0,0xDF,0xAF,0xDF},{0,0xDF,0xAF,0xEF},{0,0xDF,0xAF,0xFF},
	{0,0xDF,0xBF,0x0F},{0,0xDF,0xBF,0x1F},{0,0xDF,0xBF,0x2F},{0,0xDF,0xBF,0x3F},
	{0,0xDF,0xBF,0x4F},{0,0xDF,0xBF,0x5F},{0,0xDF,0xBF,0x6F},{0,0xDF,0xBF,0x7F},
	{0,0xDF,0xBF,0x8F},{0,0xDF,0xBF,0x9F},{0,0xDF,0xBF,0xAF},{0,0xDF,0xBF,0xBF},
	{0,0xDF,0xBF,0xCF},{0,0xDF,0xBF,0xDF},{0,0xDF,0xBF,0xEF},{0,0xDF,0xBF,0xFF},
	{0,0xDF,0xCF,0x0F},{0,0xDF,0xCF,0x1F},{0,0xDF,0xCF,0x2F},{0,0xDF,0xCF,0x3F},
	{0,0xDF,0xCF,0x4F},{0,0xDF,0xCF,0x5F},{0,0xDF,0xCF,0x6F},{0,0xDF,0xCF,0x7F},
	{0,0xDF,0xCF,0x8F},{0,0xDF,0xCF,0x9F},{0,0xDF,0xCF,0xAF},{0,0xDF,0xCF,0xBF},
	{0,0xDF,0xCF,0xCF},{0,0xDF,0xCF,0xDF},{0,0xDF,0xCF,0xEF},{0,0xDF,0xCF,0xFF},
	{0,0xDF,0xDF,0x0F},{0,0xDF,0xDF,0x1F},{0,0xDF,0xDF,0x2F},{0,0xDF,0xDF,0x3F},
	{0,0xDF,0xDF,0x4F},{0,0xDF,0xDF,0x5F},{0,0xDF,0xDF,0x6F},{0,0xDF,0xDF,0x7F},
	{0,0xDF,0xDF,0x8F},{0,0xDF,0xDF,0x9F},{0,0xDF,0xDF,0xAF},{0,0xDF,0xDF,0xBF},
	{0,0xDF,0xDF,0xCF},{0,0xDF,0xDF,0xDF},{0,0xDF,0xDF,0xEF},{0,0xDF,0xDF,0xFF},
	{0,0xDF,0xEF,0x0F},{0,0xDF,0xEF,0x1F},{0,0xDF,0xEF,0x2F},{0,0xDF,0xEF,0x3F},
	{0,0xDF,0xEF,0x4F},{0,0xDF,0xEF,0x5F},{0,0xDF,0xEF,0x6F},{0,0xDF,0xEF,0x7F},
	{0,0xDF,0xEF,0x8F},{0,0xDF,0xEF,0x9F},{0,0xDF,0xEF,0xAF},{0,0xDF,0xEF,0xBF},
	{0,0xDF,0xEF,0xCF},{0,0xDF,0xEF,0xDF},{0,0xDF,0xEF,0xEF},{0,0xDF,0xEF,0xFF},
	{0,0xDF,0xFF,0x0F},{0,0xDF,0xFF,0x1F},{0,0xDF,0xFF,0x2F},{0,0xDF,0xFF,0x3F},
	{0,0xDF,0xFF,0x4F},{0,0xDF,0xFF,0x5F},{0,0xDF,0xFF,0x6F},{0,0xDF,0xFF,0x7F},
	{0,0xDF,0xFF,0x8F},{0,0xDF,0xFF,0x9F},{0,0xDF,0xFF,0xAF},{0,0xDF,0xFF,0xBF},
	{0,0xDF,0xFF,0xCF},{0,0xDF,0xFF,0xDF},{0,0xDF,0xFF,0xEF},{0,0xDF,0xFF,0xFF},
	{0,0xEF,0x0F,0x0F},{0,0xEF,0x0F,0x1F},{0,0xEF,0x0F,0x2F},{0,0xEF,0x0F,0x3F},
	{0,0xEF,0x0F,0x4F},{0,0xEF,0x0F,0x5F},{0,0xEF,0x0F,0x6F},{0,0xEF,0x0F,0x7F},
	{0,0xEF,0x0F,0x8F},{0,0xEF,0x0F,0x9F},{0,0xEF,0x0F,0xAF},{0,0xEF,0x0F,0xBF},
	{0,0xEF,0x0F,0xCF},{0,0xEF,0x0F,0xDF},{0,0xEF,0x0F,0xEF},{0,0xEF,0x0F,0xFF},
	{0,0xEF,0x1F,0x0F},{0,0xEF,0x1F,0x1F},{0,0xEF,0x1F,0x2F},{0,0xEF,0x1F,0x3F},
	{0,0xEF,0x1F,0x4F},{0,0xEF,0x1F,0x5F},{0,0xEF,0x1F,0x6F},{0,0xEF,0x1F,0x7F},
	{0,0xEF,0x1F,0x8F},{0,0xEF,0x1F,0x9F},{0,0xEF,0x1F,0xAF},{0,0xEF,0x1F,0xBF},
	{0,0xEF,0x1F,0xCF},{0,0xEF,0x1F,0xDF},{0,0xEF,0x1F,0xEF},{0,0xEF,0x1F,0xFF},
	{0,0xEF,0x2F,0x0F},{0,0xEF,0x2F,0x1F},{0,0xEF,0x2F,0x2F},{0,0xEF,0x2F,0x3F},
	{0,0xEF,0x2F,0x4F},{0,0xEF,0x2F,0x5F},{0,0xEF,0x2F,0x6F},{0,0xEF,0x2F,0x7F},
	{0,0xEF,0x2F,0x8F},{0,0xEF,0x2F,0x9F},{0,0xEF,0x2F,0xAF},{0,0xEF,0x2F,0xBF},
	{0,0xEF,0x2F,0xCF},{0,0xEF,0x2F,0xDF},{0,0xEF,0x2F,0xEF},{0,0xEF,0x2F,0xFF},
	{0,0xEF,0x3F,0x0F},{0,0xEF,0x3F,0x1F},{0,0xEF,0x3F,0x2F},{0,0xEF,0x3F,0x3F},
	{0,0xEF,0x3F,0x4F},{0,0xEF,0x3F,0x5F},{0,0xEF,0x3F,0x6F},{0,0xEF,0x3F,0x7F},
	{0,0xEF,0x3F,0x8F},{0,0xEF,0x3F,0x9F},{0,0xEF,0x3F,0xAF},{0,0xEF,0x3F,0xBF},
	{0,0xEF,0x3F,0xCF},{0,0xEF,0x3F,0xDF},{0,0xEF,0x3F,0xEF},{0,0xEF,0x3F,0xFF},
	{0,0xEF,0x4F,0x0F},{0,0xEF,0x4F,0x1F},{0,0xEF,0x4F,0x2F},{0,0xEF,0x4F,0x3F},
	{0,0xEF,0x4F,0x4F},{0,0xEF,0x4F,0x5F},{0,0xEF,0x4F,0x6F},{0,0xEF,0x4F,0x7F},
	{0,0xEF,0x4F,0x8F},{0,0xEF,0x4F,0x9F},{0,0xEF,0x4F,0xAF},{0,0xEF,0x4F,0xBF},
	{0,0xEF,0x4F,0xCF},{0,0xEF,0x4F,0xDF},{0,0xEF,0x4F,0xEF},{0,0xEF,0x4F,0xFF},
	{0,0xEF,0x5F,0x0F},{0,0xEF,0x5F,0x1F},{0,0xEF,0x5F,0x2F},{0,0xEF,0x5F,0x3F},
	{0,0xEF,0x5F,0x4F},{0,0xEF,0x5F,0x5F},{0,0xEF,0x5F,0x6F},{0,0xEF,0x5F,0x7F},
	{0,0xEF,0x5F,0x8F},{0,0xEF,0x5F,0x9F},{0,0xEF,0x5F,0xAF},{0,0xEF,0x5F,0xBF},
	{0,0xEF,0x5F,0xCF},{0,0xEF,0x5F,0xDF},{0,0xEF,0x5F,0xEF},{0,0xEF,0x5F,0xFF},
	{0,0xEF,0x6F,0x0F},{0,0xEF,0x6F,0x1F},{0,0xEF,0x6F,0x2F},{0,0xEF,0x6F,0x3F},
	{0,0xEF,0x6F,0x4F},{0,0xEF,0x6F,0x5F},{0,0xEF,0x6F,0x6F},{0,0xEF,0x6F,0x7F},
	{0,0xEF,0x6F,0x8F},{0,0xEF,0x6F,0x9F},{0,0xEF,0x6F,0xAF},{0,0xEF,0x6F,0xBF},
	{0,0xEF,0x6F,0xCF},{0,0xEF,0x6F,0xDF},{0,0xEF,0x6F,0xEF},{0,0xEF,0x6F,0xFF},
	{0,0xEF,0x7F,0x0F},{0,0xEF,0x7F,0x1F},{0,0xEF,0x7F,0x2F},{0,0xEF,0x7F,0x3F},
	{0,0xEF,0x7F,0x4F},{0,0xEF,0x7F,0x5F},{0,0xEF,0x7F,0x6F},{0,0xEF,0x7F,0x7F},
	{0,0xEF,0x7F,0x8F},{0,0xEF,0x7F,0x9F},{0,0xEF,0x7F,0xAF},{0,0xEF,0x7F,0xBF},
	{0,0xEF,0x7F,0xCF},{0,0xEF,0x7F,0xDF},{0,0xEF,0x7F,0xEF},{0,0xEF,0x7F,0xFF},
	{0,0xEF,0x8F,0x0F},{0,0xEF,0x8F,0x1F},{0,0xEF,0x8F,0x2F},{0,0xEF,0x8F,0x3F},
	{0,0xEF,0x8F,0x4F},{0,0xEF,0x8F,0x5F},{0,0xEF,0x8F,0x6F},{0,0xEF,0x8F,0x7F},
	{0,0xEF,0x8F,0x8F},{0,0xEF,0x8F,0x9F},{0,0xEF,0x8F,0xAF},{0,0xEF,0x8F,0xBF},
	{0,0xEF,0x8F,0xCF},{0,0xEF,0x8F,0xDF},{0,0xEF,0x8F,0xEF},{0,0xEF,0x8F,0xFF},
	{0,0xEF,0x9F,0x0F},{0,0xEF,0x9F,0x1F},{0,0xEF,0x9F,0x2F},{0,0xEF,0x9F,0x3F},
	{0,0xEF,0x9F,0x4F},{0,0xEF,0x9F,0x5F},{0,0xEF,0x9F,0x6F},{0,0xEF,0x9F,0x7F},
	{0,0xEF,0x9F,0x8F},{0,0xEF,0x9F,0x9F},{0,0xEF,0x9F,0xAF},{0,0xEF,0x9F,0xBF},
	{0,0xEF,0x9F,0xCF},{0,0xEF,0x9F,0xDF},{0,0xEF,0x9F,0xEF},{0,0xEF,0x9F,0xFF},
	{0,0xEF,0xAF,0x0F},{0,0xEF,0xAF,0x1F},{0,0xEF,0xAF,0x2F},{0,0xEF,0xAF,0x3F},
	{0,0xEF,0xAF,0x4F},{0,0xEF,0xAF,0x5F},{0,0xEF,0xAF,0x6F},{0,0xEF,0xAF,0x7F},
	{0,0xEF,0xAF,0x8F},{0,0xEF,0xAF,0x9F},{0,0xEF,0xAF,0xAF},{0,0xEF,0xAF,0xBF},
	{0,0xEF,0xAF,0xCF},{0,0xEF,0xAF,0xDF},{0,0xEF,0xAF,0xEF},{0,0xEF,0xAF,0xFF},
	{0,0xEF,0xBF,0x0F},{0,0xEF,0xBF,0x1F},{0,0xEF,0xBF,0x2F},{0,0xEF,0xBF,0x3F},
	{0,0xEF,0xBF,0x4F},{0,0xEF,0xBF,0x5F},{0,0xEF,0xBF,0x6F},{0,0xEF,0xBF,0x7F},
	{0,0xEF,0xBF,0x8F},{0,0xEF,0xBF,0x9F},{0,0xEF,0xBF,0xAF},{0,0xEF,0xBF,0xBF},
	{0,0xEF,0xBF,0xCF},{0,0xEF,0xBF,0xDF},{0,0xEF,0xBF,0xEF},{0,0xEF,0xBF,0xFF},
	{0,0xEF,0xCF,0x0F},{0,0xEF,0xCF,0x1F},{0,0xEF,0xCF,0x2F},{0,0xEF,0xCF,0x3F},
	{0,0xEF,0xCF,0x4F},{0,0xEF,0xCF,0x5F},{0,0xEF,0xCF,0x6F},{0,0xEF,0xCF,0x7F},
	{0,0xEF,0xCF,0x8F},{0,0xEF,0xCF,0x9F},{0,0xEF,0xCF,0xAF},{0,0xEF,0xCF,0xBF},
	{0,0xEF,0xCF,0xCF},{0,0xEF,0xCF,0xDF},{0,0xEF,0xCF,0xEF},{0,0xEF,0xCF,0xFF},
	{0,0xEF,0xDF,0x0F},{0,0xEF,0xDF,0x1F},{0,0xEF,0xDF,0x2F},{0,0xEF,0xDF,0x3F},
	{0,0xEF,0xDF,0x4F},{0,0xEF,0xDF,0x5F},{0,0xEF,0xDF,0x6F},{0,0xEF,0xDF,0x7F},
	{0,0xEF,0xDF,0x8F},{0,0xEF,0xDF,0x9F},{0,0xEF,0xDF,0xAF},{0,0xEF,0xDF,0xBF},
	{0,0xEF,0xDF,0xCF},{0,0xEF,0xDF,0xDF},{0,0xEF,0xDF,0xEF},{0,0xEF,0xDF,0xFF},
	{0,0xEF,0xEF,0x0F},{0,0xEF,0xEF,0x1F},{0,0xEF,0xEF,0x2F},{0,0xEF,0xEF,0x3F},
	{0,0xEF,0xEF,0x4F},{0,0xEF,0xEF,0x5F},{0,0xEF,0xEF,0x6F},{0,0xEF,0xEF,0x7F},
	{0,0xEF,0xEF,0x8F},{0,0xEF,0xEF,0x9F},{0,0xEF,0xEF,0xAF},{0,0xEF,0xEF,0xBF},
	{0,0xEF,0xEF,0xCF},{0,0xEF,0xEF,0xDF},{0,0xEF,0xEF,0xEF},{0,0xEF,0xEF,0xFF},
	{0,0xEF,0xFF,0x0F},{0,0xEF,0xFF,0x1F},{0,0xEF,0xFF,0x2F},{0,0xEF,0xFF,0x3F},
	{0,0xEF,0xFF,0x4F},{0,0xEF,0xFF,0x5F},{0,0xEF,0xFF,0x6F},{0,0xEF,0xFF,0x7F},
	{0,0xEF,0xFF,0x8F},{0,0xEF,0xFF,0x9F},{0,0xEF,0xFF,0xAF},{0,0xEF,0xFF,0xBF},
	{0,0xEF,0xFF,0xCF},{0,0xEF,0xFF,0xDF},{0,0xEF,0xFF,0xEF},{0,0xEF,0xFF,0xFF},
	{0,0xFF,0x0F,0x0F},{0,0xFF,0x0F,0x1F},{0,0xFF,0x0F,0x2F},{0,0xFF,0x0F,0x3F},
	{0,0xFF,0x0F,0x4F},{0,0xFF,0x0F,0x5F},{0,0xFF,0x0F,0x6F},{0,0xFF,0x0F,0x7F},
	{0,0xFF,0x0F,0x8F},{0,0xFF,0x0F,0x9F},{0,0xFF,0x0F,0xAF},{0,0xFF,0x0F,0xBF},
	{0,0xFF,0x0F,0xCF},{0,0xFF,0x0F,0xDF},{0,0xFF,0x0F,0xEF},{0,0xFF,0x0F,0xFF},
	{0,0xFF,0x1F,0x0F},{0,0xFF,0x1F,0x1F},{0,0xFF,0x1F,0x2F},{0,0xFF,0x1F,0x3F},
	{0,0xFF,0x1F,0x4F},{0,0xFF,0x1F,0x5F},{0,0xFF,0x1F,0x6F},{0,0xFF,0x1F,0x7F},
	{0,0xFF,0x1F,0x8F},{0,0xFF,0x1F,0x9F},{0,0xFF,0x1F,0xAF},{0,0xFF,0x1F,0xBF},
	{0,0xFF,0x1F,0xCF},{0,0xFF,0x1F,0xDF},{0,0xFF,0x1F,0xEF},{0,0xFF,0x1F,0xFF},
	{0,0xFF,0x2F,0x0F},{0,0xFF,0x2F,0x1F},{0,0xFF,0x2F,0x2F},{0,0xFF,0x2F,0x3F},
	{0,0xFF,0x2F,0x4F},{0,0xFF,0x2F,0x5F},{0,0xFF,0x2F,0x6F},{0,0xFF,0x2F,0x7F},
	{0,0xFF,0x2F,0x8F},{0,0xFF,0x2F,0x9F},{0,0xFF,0x2F,0xAF},{0,0xFF,0x2F,0xBF},
	{0,0xFF,0x2F,0xCF},{0,0xFF,0x2F,0xDF},{0,0xFF,0x2F,0xEF},{0,0xFF,0x2F,0xFF},
	{0,0xFF,0x3F,0x0F},{0,0xFF,0x3F,0x1F},{0,0xFF,0x3F,0x2F},{0,0xFF,0x3F,0x3F},
	{0,0xFF,0x3F,0x4F},{0,0xFF,0x3F,0x5F},{0,0xFF,0x3F,0x6F},{0,0xFF,0x3F,0x7F},
	{0,0xFF,0x3F,0x8F},{0,0xFF,0x3F,0x9F},{0,0xFF,0x3F,0xAF},{0,0xFF,0x3F,0xBF},
	{0,0xFF,0x3F,0xCF},{0,0xFF,0x3F,0xDF},{0,0xFF,0x3F,0xEF},{0,0xFF,0x3F,0xFF},
	{0,0xFF,0x4F,0x0F},{0,0xFF,0x4F,0x1F},{0,0xFF,0x4F,0x2F},{0,0xFF,0x4F,0x3F},
	{0,0xFF,0x4F,0x4F},{0,0xFF,0x4F,0x5F},{0,0xFF,0x4F,0x6F},{0,0xFF,0x4F,0x7F},
	{0,0xFF,0x4F,0x8F},{0,0xFF,0x4F,0x9F},{0,0xFF,0x4F,0xAF},{0,0xFF,0x4F,0xBF},
	{0,0xFF,0x4F,0xCF},{0,0xFF,0x4F,0xDF},{0,0xFF,0x4F,0xEF},{0,0xFF,0x4F,0xFF},
	{0,0xFF,0x5F,0x0F},{0,0xFF,0x5F,0x1F},{0,0xFF,0x5F,0x2F},{0,0xFF,0x5F,0x3F},
	{0,0xFF,0x5F,0x4F},{0,0xFF,0x5F,0x5F},{0,0xFF,0x5F,0x6F},{0,0xFF,0x5F,0x7F},
	{0,0xFF,0x5F,0x8F},{0,0xFF,0x5F,0x9F},{0,0xFF,0x5F,0xAF},{0,0xFF,0x5F,0xBF},
	{0,0xFF,0x5F,0xCF},{0,0xFF,0x5F,0xDF},{0,0xFF,0x5F,0xEF},{0,0xFF,0x5F,0xFF},
	{0,0xFF,0x6F,0x0F},{0,0xFF,0x6F,0x1F},{0,0xFF,0x6F,0x2F},{0,0xFF,0x6F,0x3F},
	{0,0xFF,0x6F,0x4F},{0,0xFF,0x6F,0x5F},{0,0xFF,0x6F,0x6F},{0,0xFF,0x6F,0x7F},
	{0,0xFF,0x6F,0x8F},{0,0xFF,0x6F,0x9F},{0,0xFF,0x6F,0xAF},{0,0xFF,0x6F,0xBF},
	{0,0xFF,0x6F,0xCF},{0,0xFF,0x6F,0xDF},{0,0xFF,0x6F,0xEF},{0,0xFF,0x6F,0xFF},
	{0,0xFF,0x7F,0x0F},{0,0xFF,0x7F,0x1F},{0,0xFF,0x7F,0x2F},{0,0xFF,0x7F,0x3F},
	{0,0xFF,0x7F,0x4F},{0,0xFF,0x7F,0x5F},{0,0xFF,0x7F,0x6F},{0,0xFF,0x7F,0x7F},
	{0,0xFF,0x7F,0x8F},{0,0xFF,0x7F,0x9F},{0,0xFF,0x7F,0xAF},{0,0xFF,0x7F,0xBF},
	{0,0xFF,0x7F,0xCF},{0,0xFF,0x7F,0xDF},{0,0xFF,0x7F,0xEF},{0,0xFF,0x7F,0xFF},
	{0,0xFF,0x8F,0x0F},{0,0xFF,0x8F,0x1F},{0,0xFF,0x8F,0x2F},{0,0xFF,0x8F,0x3F},
	{0,0xFF,0x8F,0x4F},{0,0xFF,0x8F,0x5F},{0,0xFF,0x8F,0x6F},{0,0xFF,0x8F,0x7F},
	{0,0xFF,0x8F,0x8F},{0,0xFF,0x8F,0x9F},{0,0xFF,0x8F,0xAF},{0,0xFF,0x8F,0xBF},
	{0,0xFF,0x8F,0xCF},{0,0xFF,0x8F,0xDF},{0,0xFF,0x8F,0xEF},{0,0xFF,0x8F,0xFF},
	{0,0xFF,0x9F,0x0F},{0,0xFF,0x9F,0x1F},{0,0xFF,0x9F,0x2F},{0,0xFF,0x9F,0x3F},
	{0,0xFF,0x9F,0x4F},{0,0xFF,0x9F,0x5F},{0,0xFF,0x9F,0x6F},{0,0xFF,0x9F,0x7F},
	{0,0xFF,0x9F,0x8F},{0,0xFF,0x9F,0x9F},{0,0xFF,0x9F,0xAF},{0,0xFF,0x9F,0xBF},
	{0,0xFF,0x9F,0xCF},{0,0xFF,0x9F,0xDF},{0,0xFF,0x9F,0xEF},{0,0xFF,0x9F,0xFF},
	{0,0xFF,0xAF,0x0F},{0,0xFF,0xAF,0x1F},{0,0xFF,0xAF,0x2F},{0,0xFF,0xAF,0x3F},
	{0,0xFF,0xAF,0x4F},{0,0xFF,0xAF,0x5F},{0,0xFF,0xAF,0x6F},{0,0xFF,0xAF,0x7F},
	{0,0xFF,0xAF,0x8F},{0,0xFF,0xAF,0x9F},{0,0xFF,0xAF,0xAF},{0,0xFF,0xAF,0xBF},
	{0,0xFF,0xAF,0xCF},{0,0xFF,0xAF,0xDF},{0,0xFF,0xAF,0xEF},{0,0xFF,0xAF,0xFF},
	{0,0xFF,0xBF,0x0F},{0,0xFF,0xBF,0x1F},{0,0xFF,0xBF,0x2F},{0,0xFF,0xBF,0x3F},
	{0,0xFF,0xBF,0x4F},{0,0xFF,0xBF,0x5F},{0,0xFF,0xBF,0x6F},{0,0xFF,0xBF,0x7F},
	{0,0xFF,0xBF,0x8F},{0,0xFF,0xBF,0x9F},{0,0xFF,0xBF,0xAF},{0,0xFF,0xBF,0xBF},
	{0,0xFF,0xBF,0xCF},{0,0xFF,0xBF,0xDF},{0,0xFF,0xBF,0xEF},{0,0xFF,0xBF,0xFF},
	{0,0xFF,0xCF,0x0F},{0,0xFF,0xCF,0x1F},{0,0xFF,0xCF,0x2F},{0,0xFF,0xCF,0x3F},
	{0,0xFF,0xCF,0x4F},{0,0xFF,0xCF,0x5F},{0,0xFF,0xCF,0x6F},{0,0xFF,0xCF,0x7F},
	{0,0xFF,0xCF,0x8F},{0,0xFF,0xCF,0x9F},{0,0xFF,0xCF,0xAF},{0,0xFF,0xCF,0xBF},
	{0,0xFF,0xCF,0xCF},{0,0xFF,0xCF,0xDF},{0,0xFF,0xCF,0xEF},{0,0xFF,0xCF,0xFF},
	{0,0xFF,0xDF,0x0F},{0,0xFF,0xDF,0x1F},{0,0xFF,0xDF,0x2F},{0,0xFF,0xDF,0x3F},
	{0,0xFF,0xDF,0x4F},{0,0xFF,0xDF,0x5F},{0,0xFF,0xDF,0x6F},{0,0xFF,0xDF,0x7F},
	{0,0xFF,0xDF,0x8F},{0,0xFF,0xDF,0x9F},{0,0xFF,0xDF,0xAF},{0,0xFF,0xDF,0xBF},
	{0,0xFF,0xDF,0xCF},{0,0xFF,0xDF,0xDF},{0,0xFF,0xDF,0xEF},{0,0xFF,0xDF,0xFF},
	{0,0xFF,0xEF,0x0F},{0,0xFF,0xEF,0x1F},{0,0xFF,0xEF,0x2F},{0,0xFF,0xEF,0x3F},
	{0,0xFF,0xEF,0x4F},{0,0xFF,0xEF,0x5F},{0,0xFF,0xEF,0x6F},{0,0xFF,0xEF,0x7F},
	{0,0xFF,0xEF,0x8F},{0,0xFF,0xEF,0x9F},{0,0xFF,0xEF,0xAF},{0,0xFF,0xEF,0xBF},
	{0,0xFF,0xEF,0xCF},{0,0xFF,0xEF,0xDF},{0,0xFF,0xEF,0xEF},{0,0xFF,0xEF,0xFF},
	{0,0xFF,0xFF,0x0F},{0,0xFF,0xFF,0x1F},{0,0xFF,0xFF,0x2F},{0,0xFF,0xFF,0x3F},
	{0,0xFF,0xFF,0x4F},{0,0xFF,0xFF,0x5F},{0,0xFF,0xFF,0x6F},{0,0xFF,0xFF,0x7F},
	{0,0xFF,0xFF,0x8F},{0,0xFF,0xFF,0x9F},{0,0xFF,0xFF,0xAF},{0,0xFF,0xFF,0xBF},
	{0,0xFF,0xFF,0xCF},{0,0xFF,0xFF,0xDF},{0,0xFF,0xFF,0xEF},{0,0xFF,0xFF,0xFF}
};

//---------------------------------------------------------------------------
BOOL SaveResourceToFile(U8 type, U16 number, U8 *buf, U16 len, U8 mode)
{
	return TRUE;
}
//---------------------------------------------------------------------------
void DecodeSCI1Bits(U8 *inBits, U8 *outBits, int width, int height, U8 transCol, BOOL mirLp)
{
    int i=0,x,y;
    long endrow = 0,px=0;
    U8 *p,*copyBuf;
    px=0;

    memset(outBits,transCol,width*height);

	for(y=height; y!=0; y--) { /* loop by height */   
		endrow += width;
		while (i < endrow) {
            if(*inBits&0x80) {
             	if(*inBits&0x40) {
                	for(x=*(inBits++)&0x3f; x>0; x--)
						i++;
                } else {
	  				for(x=*(inBits++)&0x3f; x>0; x--)
                    	outBits[i++] = *inBits;
                    inBits++;
				}
            } else
            	for(x=*(inBits++); x>0; x--)
                	outBits[i++] = *(inBits++);
      	}
	}
    if(mirLp) {
    	copyBuf = (U8*)ssAlloc(width);
        p = outBits;
		for(int y=0;y<height;y++) {
        	memcpy(copyBuf,p,width);
            int q=width-1;
            for(int x=0;x<width;x++)
            	p[x] = copyBuf[q--];
        }
        ssFree(copyBuf);
    }
}
//---------------------------------------------------------------------------
void DecodeSCIAmigaBits(U8 *inBits, U8 *outBits, int width, int height, U8 transCol, BOOL mirLp)
{
    int i=0,x,y;
    long endrow = 0,px=0;
    U8 *p,*copyBuf;
    px=0;

    memset(outBits,transCol,width*height);

    p = outBits;
    int c,run;
	for(y=0; y<height; y++) {
    	x=0;
		while(x<width) {
        	if((*inBits&7)!=0) {
        		c = ((*inBits>>3)&0x1F);
            	run = *inBits&7;
            } else {
            	c = transCol;
        		run = (*inBits>>3)&0x1F;
            }
            inBits++;
            while(run) {
             	*p++ = c;
                x++;
                run--;
            }
      	}
	}
    if(mirLp) {
    	copyBuf = (U8*)ssAlloc(width);
        p = outBits;
		for(int y=0;y<height;y++) {
        	memcpy(copyBuf,p,width);
            int q=width-1;
            for(int x=0;x<width;x++)
            	p[x] = copyBuf[q--];
        }
        ssFree(copyBuf);
    }
}
//---------------------------------------------------------------------------
void DecodeSCI32Bits(U8 *inBits, U8 *offsBits, U8 *outBits, int width, int height, U8 transCol, BOOL mirLp, int compression, int max)
{
    int i=0,j,x,y,q,c;
    long endrow = 0;
    U8 *p,*copyBuf,*o=outBits;

    memset(outBits,transCol,width*height);
    if(compression==0) {
    	memcpy(outBits,inBits,width*height);
    	return;
    }

    U8 *end=o+width;
	for(y=height; y; y--) { /* loop by height */
		while(o<end) {
            if(*inBits&0x80) {
             	if(*inBits&0x40) {
                	for(x=*(inBits++)&0x3f; x>0; x--)
						*o++ = transCol;
                } else {
                	c = *offsBits++;
	  				for(x=*(inBits++)&0x3f; x>0; x--)
                    	*o++ = c;
				}
            } else
            	for(x=*(inBits++); x>0; x--)
                	*o++ = *offsBits++;
      	}
        end+=width;
	}
    if(mirLp) {
    	copyBuf = (U8*)ssAlloc(width);
        p = outBits;
		for(int y=0;y<height;y++) {
        	memcpy(copyBuf,p,width);
            int q=width-1;
            for(int x=0;x<width;x++)
            	p[x] = copyBuf[q--];
        }
        ssFree(copyBuf);
    }
}
//---------------------------------------------------------------------------
U16 EncodeSCI1Bits(U8 *inBits, U8 *outBits, int xwidth, int xheight, U8 transCol, BOOL mirLp)
{
	U16 width=xwidth,height=xheight;
	U16 t=width*height;
	U8 *outBitsX,*outStart=outBits;
	U8 c, RunLength;
    U16 o;
    U16 X=0,Y=0;

    while(Y<height) {
    	RunLength=0;
        if(*inBits==transCol) {
        	do {
            	RunLength++;
                inBits++;
                X++;
            } while(X<width&&transCol==*inBits&&RunLength<0x1F);
        	*outBits++ = 0xC0|RunLength;
        } else if(inBits[0]==inBits[1]) {
        	c=*inBits;
            do {
            	RunLength++;
                inBits++;
                X++;
            } while(X<width&&c==*inBits&&RunLength<0x1F);
            *outBits++ = 0x80|RunLength;
            *outBits++ = c;
        } else {
        	outBitsX = outBits++;
            do {
            	RunLength++;
                *outBits++ = *inBits++;
                X++;
            } while(X<width&&*inBits!=inBits[1]&&RunLength<0x1F);
            *outBitsX = RunLength;
        }
        if(X>=width) {
        	X=0;
            Y++;
        }
    }
    return (U16)((int)outBits-(int)outStart);
}
//---------------------------------------------------------------------------
void DecodeSCI0Bits(U8 *inBits, U8 *outBits, int width, int height, U8 transCol, BOOL mirLp)
{
	int run,col;
	if(mirLp) {
		for(int y=0;y<height;y++) {
        	int x=width-1;
            while(x>=0) {
            	run = (U8)(*inBits>>4);
                col = (U8)(*inBits&0xF);
                inBits++;
                while(run) {
                	outBits[y*width+x] = col;
                    run--;
                    x--;
                }
            }
        }
    } else {
		for(int y=0;y<height;y++) {
        	int x=0;
            while(x<width) {
            	run = (U8)(*inBits>>4);
                col = (U8)(*inBits&0xF);
                inBits++;
                while(run) {
                	outBits[y*width+x] = col;
                    run--;
                    x++;
                }
            }
        }
	}
}

//---------------------------------------------------------------------------
U16 EncodeSCI0Bits(U8 *inBits, U8 *outBits, int width, int height, U8 transCol, BOOL mirLp)
{
	int run,x,y,offs;
    U8 col;
    offs = 0;
	for(y=0;y<height;y++) {
		x=0;
		while(x<width) {
			run=0;
            col=*inBits;
            while(inBits[run]==col&&run<15&&x+run<width) run++;
            outBits[offs++] = (U8)((run<<4)&0xF0)|(col&0xF);
            x+=run;
            inBits+=run;
		}
	}
    return offs;
}
//---------------------------------------------------------------------------
sciVIEWLOOP *ViewFindLoopEntry(sciVIEW	*view, int e)
{
	sciVIEWLOOP *l;
	int i=0;
    l = view->firstLoop;
    while(l) {
    	if(i==e) return l;
        i++;
        l = l->next;
    }
    return NULL;
}
//---------------------------------------------------------------------------
sciVIEWCEL *ViewFindCelEntry(sciVIEWLOOP *loop, int e)
{
	sciVIEWCEL *c;
	int i=0;
    c = loop->firstCel;
    while(c) {
    	if(i==e) return c;
        i++;
        c = c->next;
    }
    return NULL;
}
//---------------------------------------------------------------------------
sciVIEWLOOP *ViewGetLoop(sciVIEW	*view, int lp)
{
	sciVIEWLOOP *l;
    l = view->firstLoop;
    while(l) {
    	if(l->loop==lp) return l;
        l = l->next;
    }
    return NULL;
}    
//---------------------------------------------------------------------------
sciVIEWLOOP *GetRealLoop(sciVIEWLOOP *loop)
{
	return(loop->mirror?loop->mirror:loop);
}
//---------------------------------------------------------------------------
sciVIEWCEL *ViewLoopGetCel(sciVIEWLOOP *loop, int cl)
{
	sciVIEWCEL *c;

    loop = GetRealLoop(loop);

    c = loop->firstCel;
    while(c) {
    	if(c->cel==cl) return c;
        c = c->next;
    }
    return NULL;
}
//---------------------------------------------------------------------------
sPOINT GetLoopMaxSize(sciVIEWLOOP *loop)
{
	int i=0;
	sPOINT p={0,0};
    sciVIEWCEL *cc = loop->firstCel;
	while(cc) {
		if(cc->width>p.x)  p.x=cc->width;
		if(cc->height>p.y) p.y=cc->height;
		i++;
        cc = cc->next;
	};

    return p;
}
//---------------------------------------------------------------------------
sciVIEW	*ViewLoad1(U8 *buf, U16 len, S16 ver)
{
	sciVIEW *view;
	sciVIEWLOOP *loop=NULL,*prevLoop=NULL;
	sciVIEWCEL *cel=NULL,*prevCel=NULL;
    U16 lpMirFlags;
    U16 *lpTable,*clTable,dataLen,i,mirLp,palStart;
    U8 *ptr,col,run;

    view = (sciVIEW*)ssAlloc(sizeof(sciVIEW));

    view->totalLoops = *(buf);
	lpMirFlags = ssBGetW(buf+2);

    view->palVGA = NULL;
	if(ver==sv_VT_VGA10) {
    	palStart=ssBGetW(buf+6);
        if(palStart) {
        	view->palVGA = SCI1PalLoad(buf+palStart,0x504,TRUE);
            view->palVGA->SET = TRUE;
        } else {
        	view->palVGA = SCI1PalLoad(defPalette,0x504,FALSE);
            view->palVGA->SET = FALSE;
        }
    } else if(ver==sv_VT_AMIGA10) {
    	view->palVGA = SCI1PalLoad(defPalette,0x504,TRUE);   
        view->palVGA->SET = TRUE;
    }

	lpTable = (U16*)(buf+8);

    for(U16 l=0;l<view->totalLoops;l++) {
    	// check to see if a "mirrored" loop is really mirrored with something
        // else, or just mirrored with itself
        if(l<16&&((lpMirFlags>>l)&1)) {
        	for(mirLp=0;mirLp<view->totalLoops;mirLp++) {
            	if(mirLp==l) continue;
                if(lpTable[mirLp]==lpTable[l]) { // we've found the mirror
                 	break;
                }
            }
            if(mirLp<view->totalLoops) continue;
        } else mirLp = 0;

    	// load all the non mirrored loops
        	ptr  = buf+lpTable[l];
            loop = (sciVIEWLOOP*)ssAlloc(sizeof(sciVIEWLOOP));
            if(prevLoop)
            	prevLoop->next = loop;
            else
            	view->firstLoop = loop;
          	loop->prev		= prevLoop;
            loop->next		= NULL;

            loop->mirror	= NULL;

            loop->loop		= l;
            loop->totalCels = ssBGetW(ptr);
            // skip 2 bytes unknown/unused SCI0
            clTable = (U16*)(ptr+4);

            prevCel = NULL;
            for(U16 c=0;c<loop->totalCels;c++) {
            	ptr = buf+clTable[c];
            	cel = (sciVIEWCEL*)ssAlloc(sizeof(sciVIEWCEL));
            	if(prevCel)
            		prevCel->next = cel;
            	else
            		loop->firstCel = cel;
          		cel->prev = prevCel;
            	cel->next = NULL;

                cel->loop		= l;
                cel->cel		= c;

                cel->width		= ssBGetW(ptr);
                cel->height		= ssBGetW(ptr+2);
                cel->x			= (S8)ptr[4];
                cel->y			= (S8)ptr[5];
                cel->transCol	= ptr[6];
                cel->fFlipH		= ptr[7];
                ptr += 8;

                dataLen   = (U16)(cel->width*cel->height);
            	cel->data = (U8*) ssAlloc(dataLen);

                if(ver==sv_VT_VGA10) {
                	DecodeSCI1Bits(ptr, cel->data, cel->width, cel->height, cel->transCol, mirLp);
                } else {
                	if(ver==sv_VT_AMIGA10) {
                		DecodeSCIAmigaBits(ptr, cel->data, cel->width, cel->height, cel->transCol, mirLp);
                	} else {
                		DecodeSCI0Bits(ptr, cel->data, cel->width, cel->height, cel->transCol, mirLp);
                	}
                }

            	prevCel = cel;
            }

            prevLoop = loop;
    }
    for(U16 l=0;l<view->totalLoops;l++) {
    	// set up all the mirrored loops
        if(l>15||!((lpMirFlags>>l)&1)) continue;

        	for(mirLp=0;mirLp<view->totalLoops;mirLp++) {
            	if(mirLp==l) continue;
                if(lpTable[mirLp]==lpTable[l]) { // we've found the mirror
                 	break;
                }
            }
            if(mirLp==view->totalLoops) continue;

            loop = (sciVIEWLOOP*)ssAlloc(sizeof(sciVIEWLOOP));
            if(prevLoop)
            	prevLoop->next = loop;
            else
            	view->firstLoop = loop;
          	loop->prev = prevLoop;
            loop->next = NULL;

            loop->loop		= l;
            loop->mirror	= ViewGetLoop(view,mirLp);

            prevLoop = loop;
    }


	return view;
}
//---------------------------------------------------------------------------
sciVIEW	*ViewLoad2(U8 *buf, U16 len, S16 ver)
{
	sciVIEW *view;
	sciVIEWLOOP *loop=NULL,*prevLoop=NULL;
	sciVIEWCEL *cel=NULL,*prevCel=NULL;
    U32 dataLen,encLen,i,mirLp;
    U16 palStart;
    U8 *ptr,*lpTable,*clTable,*clPtr1,*clPtr2,col,run;
    U8 compression;
    BOOL MIRRORED;

    view = (sciVIEW*)ssAlloc(sizeof(sciVIEW));

	view->maxWidth  = ssBGetW(buf+0x0E);
	view->maxHeight = ssBGetW(buf+0x10);
	switch(buf[5]) {
		case 0:
			view->maxWidth  = 320;
			view->maxHeight = 200;
			break;
		case 1:
			view->maxWidth  = 640;
			view->maxHeight = 480;
			break;
		case 2:
			view->maxWidth  = 640;
			view->maxHeight = 400;
			break;
		// NOTE MOST VIEWS HAVE 0xFF (-1) so the maxes are intact
	}

    view->totalLoops = buf[2];


    palStart=ssBGetW(buf+8);
    if(palStart) {
    	view->palVGA = SCI11PalLoad(buf+palStart,0x504,TRUE);
    } else {
    	view->palVGA = SCI1PalLoad(defPalette,0x504,FALSE);
    	view->palVGA->SET = FALSE;
    }


    for(U16 l=0;l<view->totalLoops;l++) {
    	// load all the non mirrored loops
			lpTable = buf+ (buf[0xC] * l + ssBGetW(buf) + 2);
			if( lpTable[0] != 0xFF) {
            	if(lpTable[1] == 1)
        			continue;
            }
        	MIRRORED = lpTable[1];
            loop = (sciVIEWLOOP*)ssAlloc(sizeof(sciVIEWLOOP));
            if(prevLoop)
            	prevLoop->next = loop;
            else
            	view->firstLoop = loop;
          	loop->prev		= prevLoop;
            loop->next		= NULL;

            loop->mirror	= NULL;

            loop->loop		= l;
            loop->totalCels = lpTable[2];

            prevCel = NULL;
            for(U16 c=0;c<loop->totalCels;c++) {
            	ptr = buf+(buf[0x0D] * c)+ssBGetL(lpTable+0x0C);

            	cel = (sciVIEWCEL*)ssAlloc(sizeof(sciVIEWCEL));
            	if(prevCel)
            		prevCel->next = cel;
            	else
            		loop->firstCel = cel;
          		cel->prev = prevCel;
            	cel->next = NULL;

                cel->loop		= l;
                cel->cel		= c;

                cel->width		= ssBGetW(ptr);
                cel->height		= ssBGetW(ptr+2);
                cel->x			= ssBGetW(ptr+4);
                cel->y			= ssBGetW(ptr+6);
                cel->transCol	= ptr[8];
                compression		= ptr[9];

                clPtr1			= buf+ssBGetL(ptr+0x18);
                clPtr2			= buf+ssBGetL(ptr+0x1C);

                encLen			= ssBGetL(ptr+28);

                dataLen   = (U32)cel->width*cel->height;
            	cel->data = (U8*) ssAlloc(dataLen);

                if(compression!=0&&compression!=138) {
                 	//ssMessage(ssERROR,"The view you are trying to load it not a valid SCI32 view!");
                    //return NULL;
                }
                if(ssBGetW(ptr+10)&0x80) {
                 	//view->[40h] = ssBGetW(ptr+10)&1;
                }

                DecodeSCI32Bits(clPtr1, clPtr2, cel->data, cel->width, cel->height, cel->transCol, FALSE, compression, MIRRORED);

            	prevCel = cel;
            }

            prevLoop = loop;
    }
    for(U16 l=0;l<view->totalLoops;l++) {
    	// set up all the mirrored loops
			lpTable = buf+ (buf[0xC] * l + ssBGetW(buf) + 2);
            mirLp = lpTable[0];
			if( mirLp != 0xFF ) {
            	if( lpTable[1] != 1 ) continue;
                lpTable = buf+ (buf[0xC] * mirLp + ssBGetW(buf) + 2);
            } else continue;
            
            loop = (sciVIEWLOOP*)ssAlloc(sizeof(sciVIEWLOOP));
            if(prevLoop)
            	prevLoop->next = loop;
            else
            	view->firstLoop = loop;
          	loop->prev = prevLoop;
            loop->next = NULL;

            loop->loop		= l;
            loop->mirror	= ViewGetLoop(view,mirLp);

            prevLoop = loop;
    }
	return view;
}
//---------------------------------------------------------------------------
sciVIEW	*ViewLoad(U8 *buf, U16 len, S16 ver)
{
	if(ver==sv_VT_EGA||ver==sv_VT_VGA10||ver==sv_VT_AMIGA10)
    	return ViewLoad1(buf,len,ver);
	if(ver==sv_VT_VGA32)
    	return ViewLoad2(buf,len,ver);
}
//---------------------------------------------------------------------------

U8 *ViewSave(sciVIEW *view, U16 *len, S16 ver)
{
	U8 *p,*retBuf;
	U16 *loopOffs,*celOffs;
    U16 offs=0;
    U16 mirFlags;
    sciVIEWLOOP *loop;
    sciVIEWCEL  *cel;

	loopOffs = (U16*)(rsBuf+8);
                                                 
    rsBuf[0] = view->totalLoops;
    rsBuf[1] = (ver==sv_VT_EGA)?0x00:0x80;

	offs = (U16)((view->totalLoops*2)+8);
    mirFlags = 0;
	for(int l=0;l<view->totalLoops;l++) {
    	loop = ViewGetLoop(view,l);
        if(loop->mirror) continue;
        loopOffs[l] = offs;
    	ssBPutW((U16)loop->totalCels,(U8*)(rsBuf+(U16)offs));
        offs += (U16)4;
		celOffs  = (U16*)(rsBuf+offs);
        offs += (U16)(loop->totalCels*2);
        for(int c=0;c<loop->totalCels;c++) {
        	celOffs[c] = offs;
    		cel = ViewLoopGetCel(loop,c);
    		ssBPutW(cel->width,		rsBuf+((U16)offs));
    		ssBPutW(cel->height,	rsBuf+((U16)offs+(U16)2));
    		rsBuf[offs+4]			= cel->x;
    		rsBuf[offs+5]			= cel->y;
    		rsBuf[offs+6]			= cel->transCol;
    		rsBuf[offs+7]			= cel->fFlipH;
            offs+=(U16)8;
            p = cel->data;  
            if(ver==sv_VT_EGA) {
            	offs += EncodeSCI0Bits(cel->data, rsBuf+offs, cel->width, cel->height, cel->transCol, FALSE);
            } else {
            	offs += EncodeSCI1Bits(cel->data, rsBuf+offs, cel->width, cel->height, cel->transCol, FALSE);
            	if((offs&1)==1) rsBuf[offs++]=0xC0;
            }
        }
    }
        
	for(int l=0;l<view->totalLoops;l++) {
    	loop = ViewGetLoop(view,l);
        if(!loop->mirror) continue;
        loopOffs[l] = loopOffs[loop->mirror->loop];
		if(l<16) mirFlags |= (U16)(1<<l);
    }
    ssBPutW(mirFlags,(U8*)(rsBuf+(U16)2));
                     
	if(ver==sv_VT_VGA10) {
    	memcpy(rsBuf+offs,"PAL",3);
        offs+=3;
    	ssBPutW(offs,rsBuf+6);
        for(int i=0;i<256;i++)
          	rsBuf[offs++]=i;
    	rsBuf[offs  ]=0;
    	rsBuf[offs+1]=0xFE;
    	rsBuf[offs+2]=0;
    	rsBuf[offs+3]=ViewLoopGetCel(ViewGetLoop(view,0),0)->transCol;
        memcpy(rsBuf+offs+4,view->palVGA->cols,0x400);
        offs += 0x404;
    }

    *len = offs;
   	retBuf = (U8*)ssAlloc(offs);
    memcpy(retBuf,rsBuf,offs);
	return retBuf;
}
//---------------------------------------------------------------------------
void pViewDispose(sciVIEW **pView)
{
    sciVIEWLOOP *loop,*newLoop;

    if((*pView)==NULL) return;

   	loop = (*pView)->firstLoop;
    while(loop) {
   		ViewClearLoop(loop);
     	newLoop = loop->next;
        ssFree(loop);
        loop = newLoop;
    }
	SCI1PalDispose((*pView)->palVGA);
    ssFree((*pView)->palVGA);

    ssFree(*pView);
    *pView = NULL;
}
//---------------------------------------------------------------------------
void ViewClearLoop(sciVIEWLOOP *loop)
{
    sciVIEWCEL *cel,*newCel;
    if(loop->mirror) return;
	cel = loop->firstCel;
    while(cel) {
    	ssFree(cel->data);
        newCel = cel->next;
        ssFree(cel);
        cel = newCel;
    }
}       
//---------------------------------------------------------------------------
BOOL ViewDeleteLoop(sciVIEW *view,sciVIEWLOOP *loop)
{
	sciVIEWLOOP *qloop,*al,*bl;
	sciVIEWCEL *cel;
	if(!loop||!view) return FALSE;
	int loopNum = loop->loop;

    qloop = view->firstLoop;
    while(qloop) {
     	if(qloop->mirror==loop) return FALSE;
        qloop = qloop->next;
    }
    for(int l=loopNum+1;l<view->totalLoops;l++) {
    	qloop = ViewGetLoop(view, l);
        qloop->loop--;
        if(!qloop->mirror) {
        	cel = qloop->firstCel;
            while(cel) {
            	cel->loop = qloop->loop;
                cel = cel->next;
            }
        }
    }
    if(loop->prev)
    	loop->prev->next = loop->next;
    if(loop->next)
    	loop->next->prev = loop->prev;
    view->totalLoops--;
    if(view->firstLoop==loop) {
    	if(view->totalLoops) {
        	view->firstLoop = loop->next;
        } else
        	view->firstLoop = NULL;
    }

    ViewClearLoop(loop);

    ssFree(loop);

    return TRUE;
}
//---------------------------------------------------------------------------
void ViewDeleteCel(sciVIEWLOOP *loop,sciVIEWCEL *cel)
{
	int celNum = cel->cel;
    loop = GetRealLoop(loop);
	sciVIEWCEL *qcel,*ac,*bc;
    qcel = loop->firstCel;
	while(qcel) {
		if(qcel->cel>=celNum) qcel->cel--;
		qcel = qcel->next;
	}
    if(cel->prev)
    	cel->prev->next = cel->next;
    if(cel->next)
    	cel->next->prev = cel->prev;
    loop->totalCels--;
    if(loop->firstCel==cel) {
    	if(loop->totalCels) {
        	loop->firstCel = cel->next;
        } else
        	loop->firstCel = NULL;
    }

    ssFree(cel->data);
    ssFree(cel);
}
//---------------------------------------------------------------------------
sciVIEWLOOP *ViewAddLoop(sciVIEW *view,int loopNum)
{
	sciVIEWLOOP *loop,*prevLoop;
    sciVIEWCEL *cel;
	if(loopNum==-1||loopNum>=view->totalLoops)
    	loopNum = view->totalLoops;
    else {
     	for(int l=loopNum;l<view->totalLoops;l++) {
         	loop = ViewGetLoop(view, l);
            loop->loop++;
            if(!loop->mirror) {
				cel = loop->firstCel;
    			while(cel) {
            		cel->loop = loop->loop;
        			cel = cel->next;
    			}
            }
        }
    }          
	loop = (sciVIEWLOOP*)ssAlloc(sizeof(sciVIEWLOOP));
	if(view->totalLoops) {
		prevLoop = ViewFindLoopEntry(view, view->totalLoops-1);
        prevLoop->next = loop;
	} else
		view->firstLoop = loop;
	loop->prev 			= prevLoop;
	loop->next			= NULL;

	loop->loop			= (U16)loopNum;
	loop->mirror		= NULL;
	loop->totalCels		= 0;

    view->totalLoops++;

    return loop;
}
//---------------------------------------------------------------------------
sciVIEWCEL *ViewAddCel(sciVIEWLOOP *loop,int celNum, U8 fillCol, U16 width, U16 height)
{
    sciVIEWCEL *cel,*prevCel;
    loop = GetRealLoop(loop);
	if(celNum==-1||celNum>=loop->totalCels)
    	celNum = loop->totalCels;
    else {
        	cel = loop->firstCel;
            while(cel) {
            	if(cel->cel>=celNum) cel->cel++;
                cel = cel->next;
            }
    }          
	cel = (sciVIEWCEL*)ssAlloc(sizeof(sciVIEWCEL));
    prevCel = NULL;
	if(loop->totalCels) {
		prevCel = ViewFindCelEntry(loop, loop->totalCels-1);
        prevCel->next = cel;
	} else
		loop->firstCel	= cel;
	cel->prev 			= prevCel;
	cel->next			= NULL;

	cel->loop			= loop->loop;
	cel->cel			= (U16)celNum;
    cel->width			= width;
    cel->height			= height;
                      
    cel->x				= 0;
    cel->y				= 0;
    cel->transCol		= fillCol;
    cel->fFlipH			= FALSE;

    cel->data			= (U8*)ssAlloc(width*height);
    memset(cel->data,fillCol,width*height);

	loop->totalCels++;

    return cel;
}
//---------------------------------------------------------------------------
void ViewUnmirrorLoop(sciVIEWLOOP *loop)
{
    sciVIEWCEL *cel,*newCel,*prevCel;
    int len;
    U8 *buf;

    if(!loop->mirror) return;

    loop->totalCels = loop->mirror->totalCels;
	cel = loop->mirror->firstCel;
    prevCel = NULL;
    while(cel) {
		newCel = (sciVIEWCEL*)ssAlloc(sizeof(sciVIEWCEL));
        memcpy(newCel,cel,sizeof(sciVIEWCEL));
        if(prevCel)
        	prevCel->next = newCel;
        else
			loop->firstCel = newCel;
		newCel->prev = prevCel;
		newCel->next = NULL;
		newCel->loop = loop->loop;

    	len = cel->width*cel->height;
        newCel->data = (U8*)ssAlloc(len);
        buf = cel->data;
		for(int y=0;y<cel->height;y++)
    		for(int x=cel->width-1;x>=0;x--)
        		newCel->data[y*cel->width+x] = *buf++;
        prevCel = newCel;
        cel = cel->next;
    }          
    loop->mirror = NULL;
}
//---------------------------------------------------------------------------

sciPIC *PicLoad1(U8 *buf, U16 len, U8 plMODE, U8 defPal, S16 ver)
{
	sciPIC *pic;

    pic = (sciPIC*)ssAlloc(sizeof(sciPIC));
    pic->length = len; 
    pic->data = (U8*) ssAlloc(plMODE==plEDITOR?rsMAX_SIZE:len);
	memcpy(pic->data,buf,len);
    for(int i=0;i<sPIC_TOTALBMPS;i++)
    	pic->bitmaps[i] = (U8*) ssAlloc(sPIC_SIZE);

    pic->mode = plMODE;
    pic->offset = (U16)(len-1);
                                
    pic->width		= sPIC_WIDTH;
    pic->height		= sPIC_HEIGHT;
    pic->x			= 0;
    pic->y			= 0;
    pic->transCol	= 15;

    pic->palVGA = NULL;
    memcpy(pic->priBars,defPri,sizeof(pic->priBars));
	DrawPic(FALSE, defPal, pic, ver);

	return pic;
}
//---------------------------------------------------------------------------

sciPIC *PicLoad2(U8 *buf, U16 len, U8 plMODE, U8 defPal, S16 ver)
{
	sciPIC *pic;
    U16 palStart,priStart;
    U8 compression;
    U8 *clPtr1,*clPtr2,*ptr;

    pic = (sciPIC*)ssCalloc(sizeof(sciPIC));

    priStart=ssBGetW(buf);
    if(priStart)
		for(int i=0;i<14;i++)
        	pic->priBars[i] = ssBGetW(buf+priStart+(i<<1));

    palStart=ssBGetW(buf+0x1C);
    if(palStart) {
    	pic->palVGA = SCI11PalLoad(buf+palStart,0x504,TRUE);
    } else {
    	pic->palVGA = SCI1PalLoad(defPalette,0x504,FALSE);
    	pic->palVGA->SET = FALSE;
    }

    if(buf[4]) {

    ptr=buf+ssBGetL(buf+0x20);

    pic->width		= ssBGetW(ptr);
    pic->height		= ssBGetW(ptr+2);
    pic->x			= ssBGetW(ptr+4);
    pic->y			= ssBGetW(ptr+6);
    pic->transCol	= ptr[8];
    compression		= ptr[9];

    clPtr1			= buf+ssBGetL(ptr+0x18);
    clPtr2			= buf+ssBGetL(ptr+0x1C);

    pic->data = (U8*) ssAlloc((U32)pic->width*pic->height);

                if(compression!=0&&compression!=138) {
                 	//ssMessage(ssERROR,"The view you are trying to load it not a valid SCI32 view!");
                    //return NULL;
                }
                if(ssBGetW(ptr+10)&0x80) {
                 	//view->[40h] = ssBGetW(ptr+10)&1;
                }

                DecodeSCI32Bits(clPtr1, clPtr2, pic->data, pic->width, pic->height, pic->transCol, FALSE, compression, FALSE);
	}
	return pic;
}
//---------------------------------------------------------------------------

sciPIC *PicLoad3(U8 *buf, U16 len, U8 plMODE, U8 defPal, S16 ver)
{
	sciPIC *pic;
    U16 palStart,priStart;
    U8 compression;
    U8 *clPtr1,*clPtr2,*ptr;

    pic = (sciPIC*)ssCalloc(sizeof(sciPIC));
            /*
    priStart=ssBGetW(buf);
    if(priStart)
		for(int i=0;i<14;i++)
        	pic->priBars[i] = ssBGetW(buf+priStart+(i<<1));
              */
    palStart=ssBGetW(buf+0x6);
    if(palStart) {
    	pic->palVGA = SCI11PalLoad(buf+palStart,0x504,TRUE);
    } else {
    	pic->palVGA = SCI1PalLoad(defPalette,0x504,FALSE);
    	pic->palVGA->SET = FALSE;
    }

    //if(buf[4]) {

    ptr=buf+ssBGetW(buf);

    pic->width		= ssBGetW(ptr);
    pic->height		= ssBGetW(ptr+2);
    pic->x			= ssBGetW(ptr+4);
    pic->y			= ssBGetW(ptr+6);
    pic->transCol	= ptr[8];
    compression		= ptr[9];

    clPtr1			= buf+ssBGetL(ptr+0x18);
    clPtr2			= buf+ssBGetL(ptr+0x1C);

    pic->data = (U8*) ssAlloc((U32)pic->width*pic->height);

                if(compression!=0&&compression!=138) {
                 	//ssMessage(ssERROR,"The view you are trying to load it not a valid SCI32 view!");
                    //return NULL;
                }
                if(ssBGetW(ptr+10)&0x80) {
                 	//view->[40h] = ssBGetW(ptr+10)&1;
                }

	DecodeSCI32Bits(clPtr1, clPtr2, pic->data, pic->width, pic->height, pic->transCol, FALSE, compression, FALSE);
	//}
	return pic;
}
//---------------------------------------------------------------------------

sciPIC *PicLoad(U8 *buf, U16 len, U8 plMODE, U8 defPal, S16 ver)
{
	if(ver==sv_PT_VGA11)
    	return PicLoad2(buf, len, plMODE, defPal, ver);
   	if(ver==sv_PT_VGA32)
    	return PicLoad3(buf, len, plMODE, defPal, ver);
   	return PicLoad1(buf, len, plMODE, defPal, ver);
}
//---------------------------------------------------------------------------
BOOL PicDraw(sciPIC *pic, S16 ver)
{               
	if(ver!=sv_PT_VGA11&&ver!=sv_PT_VGA32)
    	DrawPic(FALSE, 0, pic, ver);
	return TRUE;
}
//---------------------------------------------------------------------------
U8 *PicSave(sciPIC *pic, U16 *len)
{
	*len = (U16)pic->length;
	return pic->data;
}
//---------------------------------------------------------------------------
void pPicDispose(sciPIC **pPic)
{
    if((*pPic)==NULL) return;
	SCI1PalDispose((*pPic)->palVGA);
    ssFree((*pPic)->palVGA);
	ssFree((*pPic)->data);
	for(int i=0;i<sPIC_TOTALBMPS;i++)
		ssFree((*pPic)->bitmaps[i]);

    ssFree(*pPic);
    *pPic = NULL;
}
//---------------------------------------------------------------------------
/*U8 amigaFromScript802[] = {
		    31,31,31,
		    63,63,63,
		    95,95,95,
		    127,127,127,
		    159,159,159,
		    191,191,191,
		    223,223,223,
		    151,27,27,
		    231,103,103,
		    235,135,135,
		    187,187,35,
		    219,219,39,
		    223,223,71,
		    27,151,27,
		    71,223,71,
		    135,235,135,
		    23,23,119,
		    35,35,187,
		    71,71,223,
		    135,135,235,
		    219,39,219,
		    27,151,151,
		    187,35,35,
		    255,100,100,
		    151,27,27,
		    219,127,39,
		    231,231,103,
		    15,87,87,
		    27,27,151,
};           */

U16 amiga32[32];
void SetupSCIPal(sciPALETTE *pal)
{
    int i;

	// Set up the palette
	pal->pal.lPal = (PLOGPALETTE)ssAlloc(sizeof(LOGPALETTE) + (sizeof(PALETTEENTRY) * 256));
	pal->pal.lPal->palNumEntries = 256;
	pal->pal.lPal->palVersion = 0x300;

    for (int i = 0; i < 256; i++){
    	pal->pal.cols[i]  = pal->cols[i].red+(pal->cols[i].green<<8)+(pal->cols[i].blue<<16);
        pal->pal.wCols[i] = pal->cols[i].blue+(pal->cols[i].green<<8)+(pal->cols[i].red<<16);
        pal->pal.lPal->palPalEntry[i].peRed   = pal->cols[i].red;
        pal->pal.lPal->palPalEntry[i].peGreen = pal->cols[i].green;
        pal->pal.lPal->palPalEntry[i].peBlue  = pal->cols[i].blue;
        pal->pal.lPal->palPalEntry[i].peFlags = PC_NOCOLLAPSE;
    }

  	if(Game.version->palType == sv_PALT_AMIGA) {
    	FILE *f = ssOpenFile(ssFIO_MESSAGE|ssFIO_GAME,"spal","rb");
    	if(f) {
			for (int i = 0; i < 32; i++){
        		amiga32[i] = (ssFGetB(f)<<8)+ssFGetB(f); // BIGENDIAN
				pal->cols[i].infoBits	= TRUE;
    			pal->cols[i].red   = amiga4096[amiga32[i]].red;
    			pal->cols[i].green = amiga4096[amiga32[i]].green;
    			pal->cols[i].blue  = amiga4096[amiga32[i]].blue;
    			pal->pal.cols[i]   = pal->cols[i].red +(pal->cols[i].green<<8)+(pal->cols[i].blue<<16);
    			pal->pal.wCols[i]  = pal->cols[i].blue+(pal->cols[i].green<<8)+(pal->cols[i].red <<16);
				pal->pal.lPal->palPalEntry[i].peRed   = pal->cols[i].red;
				pal->pal.lPal->palPalEntry[i].peGreen = pal->cols[i].green;
				pal->pal.lPal->palPalEntry[i].peBlue  = pal->cols[i].blue;
				pal->pal.lPal->palPalEntry[i].peFlags = PC_NOCOLLAPSE;
			}
        }
    	fclose(f);

    	pal->maxCol = 32;
        pal->FIXED = TRUE;
    } else {
    	pal->maxCol = 256;
        pal->FIXED = FALSE;
    }

    pal->pal.bitdepth = 256;
    pal->pal.handle = CreatePalette(pal->pal.lPal);
}
//---------------------------------------------------------------------------
void SCI1PalDisposeX(sciPALETTE **pal)
{
	if(*pal==NULL) return;
    FreeLogPal(&((*pal)->pal));
    ssFree(*pal);
}
//---------------------------------------------------------------------------
sciPALETTE *SCI1PalLoad(U8 *buf, U16 len, BOOL FIX)
{
	sciPALETTE *p;
	p = (sciPALETTE *)ssAlloc(sizeof(sciPALETTE));
    //memcpy(p->cols,buf+0x104,0x400);
    buf += 0x104;
    memcpy(p->cols,defPalette+0x104,0x400);
    for(int i=0;i<256;i++) {
		p->cols[i].infoBits	= buf[0];
        if(!FIX||p->cols[i].infoBits) {
			p->cols[i].red		= buf[1];
			p->cols[i].green	= buf[2];
			p->cols[i].blue		= buf[3];
        }
       	buf+=4;
    }
    SetupSCIPal(p);
    return p;
}

//---------------------------------------------------------------------------
sciPALETTE *SCI11PalLoad(U8 *buf, U16 len, BOOL FIX)
{
	sciPALETTE *p;
	U8 *ptr;
	U16 i,endCol,col;
	U8 infoBits;
    BOOL WIDE_COLS;

	p = (sciPALETTE *)ssAlloc(sizeof(sciPALETTE));

    memcpy(p->cols,defPalette+0x104,0x400);
	if(buf[0x0A]!=0) {
		if(buf[0x20]==0)
			WIDE_COLS = TRUE;
		else if(buf[0x20]==1) {
			WIDE_COLS = FALSE;
			infoBits = buf[0x1F];
        }
		ptr = buf + 0x25 + (buf[0x1A]<<2);
		col = buf[0x19];
		if(ssBGetW(buf+0x1D) + col > 0x100)
			return NULL;

        endCol = ssBGetW(buf+0x1D);
		while(col < endCol) {
			if(col>255)
				break;
			if(WIDE_COLS)
				infoBits = *ptr++;
			if(infoBits) {
				p->cols[col].infoBits 	= infoBits;
				p->cols[col].red 		= ptr[0];
				p->cols[col].green 		= ptr[1];
				p->cols[col].blue 		= ptr[2];
			}
			ptr+=3;
			col++;
		}
    }

    SetupSCIPal(p);
    return p;
}
//---------------------------------------------------------------------------
sciFONT *FontLoad(U8 *buf, U16 len)
{
	U16 *charOffsets;
    U8 *ptr,byt;
    sciFONTCHAR *fChar,*fLastChar;
	sciFONT *font;
    int bit,x,y;

	font = (sciFONT*) ssAlloc(sizeof(sciFONT));

	font->foo = ssBGetW(buf); // first two bytes--unknown or unused
	font->totalChars = ssBGetW(buf+2);
	font->height = ssBGetW(buf+4);
    charOffsets = (U16*)(buf+6);

    fLastChar = NULL;
    font->firstChar = NULL;
    for(int c=0;c<font->totalChars;c++) {
        if(!charOffsets[c]) continue;
        ptr = buf+charOffsets[c];

		fChar = (sciFONTCHAR*) ssAlloc(sizeof(sciFONTCHAR));
        if(!font->firstChar) font->firstChar = fChar;
        if(fLastChar)
        	fLastChar->next = fChar;
        fChar->prev = fLastChar; 
        fChar->next = NULL; 
        fChar->index = (U16)c;

        // Get the width and height
        fChar->width = *ptr;
        fChar->height = ptr[1];
        ptr += 2;

		fChar->data = (U8*)ssAlloc(fChar->width*fChar->height);
        int u=0;
        for(y = 0; y < fChar->height; y++) {
 	        x = 0;
            bit = -1;
            while(x < fChar->width) {
                if(bit == -1) {
                    byt = *ptr++;
                    bit = 7;
                }
                fChar->data[u++] = (U8)((byt >> bit) & 1);
                bit--;
                x++;
	        }
	    }
        fLastChar = fChar;
    }

	return font;
}
//---------------------------------------------------------------------------
U8 *FontSave(sciFONT *font, U16 *len)
{
	sciFONTCHAR *fChar;
	U8 *buf;
    U16 p=0;
    int x,y,bit;

    ssBPutW(font->foo,(U8*)rsBuf);
    ssBPutW(font->totalChars,(U8*)(rsBuf+2));
    ssBPutW(font->height,(U8*)(rsBuf+4));
             
	U16 *charOffsets;
    charOffsets = (U16*)(rsBuf+6);

	p = (U16)((font->totalChars<<1)+6);

    fChar = font->firstChar;
    while(fChar) {
    	charOffsets[fChar->index] = p;
        rsBuf[p  ] = fChar->width;
        rsBuf[p+1] = fChar->height;
        p+=(U16)2;

        int u=0;     
        rsBuf[p] = 0;
        for(y = 0; y < fChar->height; y++) {
 	        x = 0;
            bit = 7;
            while(x < fChar->width) {
                rsBuf[p] |= (U8)((fChar->data[u++]&1)<<bit);
                bit = (bit-1)&7;
                if(bit==7) {
                	p++;
            		rsBuf[p] = 0;
                }
                x++;
	        }
            if(bit!=7) {
            	p++;  
  				rsBuf[p] = 0;
            };
	    }
        fChar = fChar->next;
    }

    if(len) *len = p;
    buf = (U8*)ssAlloc(p);
    memcpy(buf,rsBuf,p);

	return buf;
}                                             
//---------------------------------------------------------------------------
sciFONTCHAR *GetFontChar(sciFONT *font, int index)
{
	sciFONTCHAR *fChar;   
    fChar = font->firstChar;
    while(fChar) {
    	if(fChar->index==index) return fChar;
        fChar = fChar->next;
    }
    return NULL;
}
//---------------------------------------------------------------------------
void pFontDispose(sciFONT **pFont)
{
    sciFONTCHAR *fChar,*newChar;

    if((*pFont)==NULL) return;

   	fChar = (*pFont)->firstChar;
    while(fChar) {
    	ssFree(fChar->data);
     	newChar = fChar->next;
        ssFree(fChar);
        fChar = newChar;
    }
    ssFree(*pFont);
    *pFont = NULL;
}
//---------------------------------------------------------------------------
sciCURSOR *CursorLoad(U8 *buf, U16 len)
{
	sciCURSOR *cursor;
    U8 *data;
    U16 mask1,mask2;

	cursor = (sciCURSOR *) ssAlloc(sizeof(sciCURSOR));

	cursor->hotSpot  = ssBGetW(buf+2);
	cursor->hotSpotX = ssBGetW(buf);
	cursor->hotSpotY = ssBGetW(buf+2);
	buf += 4;
    data = cursor->data;
	for(int y = 0; y < 16; y++) {
		mask1 = ssBGetW(buf);
		mask2 = ssBGetW(buf+32);
        buf += 2;
		for(int bit = 15; bit >= 0; bit--)
            *data++ = (U8)(((mask1 >> bit) & 1) << 1) | ((mask2 >> bit) & 1);
	}

	return cursor;
}
//---------------------------------------------------------------------------
U8 *CursorSave(sciCURSOR *cursor, U16 *len)
{
	U8 *buf = (U8*)ssCalloc(sCSR_FILELEN);
  	U16 *Ebuf = (U16*)(buf+4);
    *len = sCSR_FILELEN;
	buf[2] = (U8)cursor->hotSpot;
	for(int y = 0; y < 16; y++) {
		for(int x = 0; x < 16; x++) {
            Ebuf[y   ] |= (U16)((cursor->data[(y<<4)+x]>>1)&1)<<(U16)(15-x);
            Ebuf[y+16] |= (U16)(cursor->data[(y<<4)+x]&1)<<(U16)(15-x);
        }
	}

	return buf;
}
//---------------------------------------------------------------------------
void pCursorDispose(sciCURSOR **pCursor)
{
    ssFree(*pCursor);
    *pCursor = NULL;
}
//---------------------------------------------------------------------------
     
//---------------------------------------------------------------------------
// fill a memo with information about a given script
void GetScriptInfo(U8 *ScrData, U16 Len,TSynMemo *Memo)
{
    Memo->Lines->Clear();

    if(Game.version->scrType==sv_ST_SCI11||Game.version->scrType==sv_ST_SCI32) return;

    Memo->Visible = false;

    U16 Offs = 0,TotalSegments=0,Segment,SegLen,SegEnd,NameAddr;
    char *Str;
    Memo->Lines->Add("Script Information");
    Memo->Lines->Add("");
    while(Offs<Len) {
        Segment = ssBGetW(ScrData+Offs);
        if(Segment==sgRETURN) break;
        Offs += ssBGetW(ScrData+Offs+2);
        TotalSegments++;
    }
    Offs = (Game.version->num==svSCI_00_EARLY)?2:0;
    Memo->Lines->Add("Total Segments: "+IntToStr(TotalSegments));
    while(Offs<Len) {
        Segment = ssBGetW(ScrData+Offs);

        if(Segment==sgRETURN) break;

        SegLen = ssBGetW(ScrData+Offs+2);
        SegEnd = Offs+SegLen;
        switch(Segment) {
            case sgLOCAL:
                Memo->Lines->Add("Total Locals: "+IntToStr((SegLen>>1)-4));
                break;
            case sgPUBLIC:
                Memo->Lines->Add("Total Public: "+IntToStr(ssBGetW(ScrData+Offs+4)));
                break;
            case sgRELOCATION:
                Memo->Lines->Add("Total Relocation: "+IntToStr(ssBGetW(ScrData+Offs+4)));
                break;
            case sgCLASS:
                NameAddr = ssBGetW(ScrData+Offs+18);
                Memo->Lines->Add("(class "+AnsiString((char*)(ScrData+NameAddr))+")");
                break;
            case sgINSTANCE:
                NameAddr = ssBGetW(ScrData+Offs+18);
                Memo->Lines->Add("(instance "+AnsiString((char*)(ScrData+NameAddr))+")");
                break;
            case sgSTRINGS:
                NameAddr = Offs+4;
                Memo->Lines->Add("(string");
                while(NameAddr < SegEnd) {
                    Str = (char*)(ScrData+NameAddr);
                    Memo->Lines->Add("\t\""+AnsiString(Str)+"\"");
                    NameAddr += strlen(Str)+1;
                }   
                Memo->Lines->Add(")");
                break;
        }
        Offs = SegEnd;
    }

    Memo->Visible = true;
}
//---------------------------------------------------------------------------
AnsiString GetVocTypeName(int Mask)
{         int i;

    for(i = 0; i < 12; i++)
        if(vocabTypes[i].Mask == Mask){//ShowMessage(AnsiString(vocabTypes[i].Name));
            return vocabTypes[i].Name; }

    return "NULL";
}
//---------------------------------------------------------------------------
AnsiString GetVocabTypesAsString(WORD Type)
{
    AnsiString Str = "";

    switch(Type) {
        case 0: // no word
            Str = GetVocTypeName(vtNO_WORD);
            break;
        case 0x4FF:
            Str = GetVocTypeName(vtANY_WORD);
            break;
        default:
            for(int i = 0; i < TOTAL_VT; i++)
                if((Type >> i) & 1) {
                    if(Str != "") Str += " | ";
                    Str += GetVocTypeName(1 << i);
                }
    }

    return Str;
}

//---------------------------------------------------------------------------
void DecodeVocab(U8 *Data, int Num, U16 FileLen, TMemo *Memo)
{
	AnsiString s;
	char VocString[128],str1[41],str2[41];
	int Offset,Count,type1,type2,strSegs,segLen,segEnd;
                int i,j,k,l;
    Memo->Lines->Clear();
    Memo->Visible = false;

    Memo->Lines->Add("Vocab Information"); 
    Memo->Lines->Add("");
    switch(Num) {
    	case 0:           
        	if((Game.version->num!=svSCI_00_EARLY)&&
               (Game.version->num!=svSCI_00_LATE)) {
    			Memo->Lines->Add("Unsupported vocab resource!");
                break;
            }
    		Memo->Lines->Add("Type: Words");
   			Memo->Lines->Add("");
			Offset = 52;
   			while(Offset < FileLen) {
        		i = Data[Offset++];
        		while((BYTE) (VocString[i++] = Data[Offset++]) < 0x80);
        		VocString[i-1] &= 0x7F;
        		VocString[i] = '\0';
        		Offset += 3;
   				Memo->Lines->Add(AnsiString(VocString));
            }
            break;   
    	case 900:
        	if((Game.version->num!=svSCI_10_EGA_EARLY)&&
               (Game.version->num!=svSCI_10_EGA_LATE)) {
    			Memo->Lines->Add("Unsupported vocab resource!");
                break;
            }
    		Memo->Lines->Add("Type: Words");
   			Memo->Lines->Add("");
			Offset = 0x1FE;
   			while(Offset < FileLen) {
	        	i = Data[Offset++];
	        	while(((BYTE)VocString[i++] = Data[Offset++])!='\0');
        		Offset += 3;
   				Memo->Lines->Add(AnsiString(VocString));
            }
            break;
    	case 901:
    	case 902:
    	case 912:      
        	if( !((Num==901) && (Game.version->num==svSCI_00_EARLY || Game.version->num==svSCI_00_LATE)) &&
                !((Num==902 || Num == 912) && (Game.version->num==svSCI_10_EGA_EARLY || Game.version->num==svSCI_10_EGA_LATE)) ) {
    				Memo->Lines->Add("Unsupported vocab resource!");
                	break;
            }
    		Memo->Lines->Add("Type: Suffixes");
            Offset = 0;
   			Memo->Lines->Add("");
   			while(Offset<FileLen) {
            	strcpy(str1, (char*)(Data+Offset));
                Offset += strlen(str1)+1;
                type1 = Data[Offset]+(Data[Offset+1]<<8);
                Offset+=2;
            	strcpy(str2, (char*)(Data+Offset));
                Offset += strlen(str2)+1;
                type2 = Data[Offset]+(Data[Offset+1]<<8);
                Offset+=2;

            	s.sprintf("\"%s\" of (%s) -> \"%s\" of (%s)", str1, GetVocabTypesAsString(type1).c_str(), str2, GetVocabTypesAsString(type2).c_str());
   				Memo->Lines->Add(s);
            }
            break;
    	case 995:
    		Memo->Lines->Add("Type: Debug Info");
            Offset = 0;
            strSegs = Data[Offset]+(Data[Offset+1]<<8);
   			Memo->Lines->Add("String Segments: "+IntToStr(strSegs));
            j=0;
   			while(j<strSegs) {                 
            	Offset = Data[(j<<1)+2]+(Data[(j<<1)+3]<<8);
                                           
                segLen = Data[Offset]+(Data[Offset+1]<<8);
                Offset += 2;
                segEnd = Offset+segLen;

   				Memo->Lines->Add("");
   				Memo->Lines->Add("");
   				Memo->Lines->Add("Segment #"+IntToStr(j));
   				Memo->Lines->Add("Length: "+IntToStr(segLen)); 
   				Memo->Lines->Add("");

                while(Offset<segEnd) {
                	k=0;
                 	for(l=Offset;Data[l]!='\n'&&l<segEnd;l++) {
                    	VocString[k]=Data[l];
                        k++;
                    }
                    VocString[k]='\0';
            		Memo->Lines->Add(AnsiString(VocString));
                    Offset = l+1;
                }
                j++;
            }
            break;
    	case 996:
    		Memo->Lines->Add("Type: Class Table");
            Offset = 0;
            Count = FileLen>>2;
   			Memo->Lines->Add("Total Classes: "+IntToStr(Count));
   			Memo->Lines->Add("");
            j = 0;
   			while(j<Count) {
            	s.sprintf("Class #%d is in SCRIPT.%03d", j, Data[Offset+2]+(Data[Offset+3]<<8));
   				Memo->Lines->Add(s);
                j++;
                Offset+=4;
            }
            break;
    	case 997:
    		Memo->Lines->Add("Type: Selector Names");
            Offset = 0;
            Count = Data[Offset]+(Data[Offset+1]<<8)+1;
   			Memo->Lines->Add("Total Selectors: "+IntToStr(Count));
   			Memo->Lines->Add("");
            j = 0;
   			while(j<Count) {
				Offset = Data[(j<<1)+2]+(Data[(j<<1)+3]<<8);
        		BYTE StrLen = Data[Offset];
                Offset+=2;
        		for(i=0;i<StrLen;i++) VocString[i] = Data[Offset++];
        		VocString[i] = '\0';
   				Memo->Lines->Add("$"+IntToHex(j,3)+": "+IntToStr(j)+": "+AnsiString(VocString));
                j++;
            }
            break;
    	case 998:
    		Memo->Lines->Add("Type: Opcode Names");
            Offset = 0;
            Count = Data[Offset]+(Data[Offset+1]<<8)-1;
   			Memo->Lines->Add("Total Opcodes: "+IntToStr(Count));
   			Memo->Lines->Add("");
            j = 0;
   			while(j<Count) {
				Offset = Data[(j<<1)+2]+(Data[(j<<1)+3]<<8);
        		BYTE StrLen = Data[Offset]-2;
        		BYTE Params = Data[Offset+2]+(Data[Offset+3]<<8);
                Offset+=4;
        		for(i=0;i<StrLen;i++) VocString[i] = Data[Offset++];  
        		while(i<9) VocString[i++] = ' ';
        		VocString[i] = '\0';
   				Memo->Lines->Add(IntToHex(j,2)+": "+AnsiString(VocString)+" \t"+IntToStr(Params));   
                j++;
            }
            break;
    	case 999:
    		Memo->Lines->Add("Type: Kernel Names");
            Offset = 0;                         
        	if(Game.version->scrType==sv_ST_SCI1) { 
   				Memo->Lines->Add("");
                Count = 0;
   				while(Offset < FileLen) {
        			i = 0;
        			while((BYTE) (VocString[i++] = Data[Offset++]));
   					Memo->Lines->Add(AnsiString(VocString));
                    Count++;
            	}            
   				Memo->Lines->Add("");
   				Memo->Lines->Add("Total Kernels: "+IntToStr(Count));
            } else {
            	Count = Data[Offset]+(Data[Offset+1]<<8);
   				Memo->Lines->Add("Total Kernels: "+IntToStr(Count));
   				Memo->Lines->Add("");
            	j = 0;
   				while(j<Count) {
					Offset = Data[(j<<1)+2]+(Data[(j<<1)+3]<<8);
        			BYTE StrLen = Data[Offset];
                	Offset+=2;
        			for(i=0;i<StrLen;i++) VocString[i] = Data[Offset++];
        			VocString[i] = '\0';
                //if(!FileExists("D:\\programming\\SCIStudio\\Help\\SCC\\kernel_"+AnsiString(VocString)+".html")) {
   					Memo->Lines->Add("$"+IntToHex(j,3)+": "+IntToStr(j)+": "+AnsiString(VocString));
                //}
                	j++;
            	}
            }
            break;
        default:   
    		Memo->Lines->Add("Unsupported vocab resource!");
    }


    Memo->Visible = true;
}
//---------------------------------------------------------------------------
void TextToMemo(U8 *Data,U16 Len,TMemo *Memo)
{
    Memo->Lines->Clear();
    Memo->Visible = false;

    WORD Offs = 0,Num=0,StrLen;

    while(Offs<Len) {
        StrLen = strlen((char*)(Data+Offs));
        Memo->Lines->Add(IntToStr(Num)+": "+AnsiString((char*)(Data+Offs)));
        Offs+=StrLen+1;
        Num++;
    }

    Memo->Visible = true;
}
//---------------------------------------------------------------------------
void MessageToMemo(U8 *data,U16 Len,TMemo *Memo)
{
    Memo->Lines->Clear();
    Memo->Visible = false;
    U8 *d=data;

    AnsiString s;
    U16 totalMsg ;
	int base,recSize,preMagic,postMagic; /*
    if(Game.version->num==svSCI_32) {  */
    	base = 8;
		recSize = 11;
		preMagic = 5;
		postMagic = 4;
    	totalMsg = ssBGetW(data+base);  /*
    } else {
    	base = 4;
		recSize = 4;
		preMagic = 2;
		postMagic = 0;
    	totalMsg = ssBGetW(data+5);
    }   */
    s = "";
	for (int i = 0 ; i < base ; i++)
		s.cat_printf(" %d,", data[i]);

	Memo->Lines->Add("Total Messages: "+IntToStr(totalMsg));
	Memo->Lines->Add("");
             /*
    if(Game.version->num==svSCI_32) { */ /*
    for(int i=0;i<totalMsg;i++) {
		    int j;
		    int offset = data[base + 2 + preMagic + (i*recSize)] | (data[base + 2 + preMagic + 1 + (i*recSize)] << 8);

		    s = ("(");
		    for (j = 0; j < preMagic; j++)
		      s.cat_printf("%d, ", data[base + 2 + j + (i*recSize)]);
            Memo->Lines->Add(s);

		    Memo->Lines->Add(AnsiString((char*)(data+offset))+",");

            s = "";
		    for (j = 0; j < postMagic; j++)
		      s.cat_printf(", %d", data[base + 2 + 2 + preMagic + j + (i*recSize)]);

		    s.cat_printf(")");

		    if (i < totalMsg - 1)
		      s.cat_printf(",");
		    Memo->Lines->Add(s);
    }
	} else { */
    	data += 10;
    for(int i=0;i<totalMsg;i++) {
		    int j;
		    int offset = ssBGetW(data+5);
		    Memo->Lines->Add(AnsiString((char*)(d+offset))+",");
            data += 11;
    }
	//}


    Memo->Visible = true;
}
//---------------------------------------------------------------------------
